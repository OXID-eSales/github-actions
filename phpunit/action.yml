name: 'phpunit'
description: 'Executes phpunit in a running container'
inputs:
  container:
    type: string
    required: false
    description: 'Name of the container to run the test in'
    default: 'php'
  container_options:
    type: string
    required: false
    description: 'Additional options to pass into the container'
    default: ''
  configuration:
    type: string
    required: false
    description: 'Name of the configuration file'
    default: 'phpunit.xml'
  test:
    type: string
    required: false
    description: 'Name of the test or folder to run'
    default: 'tests/Unit'
  additional_options:
    type: string
    required: false
    description: 'Optional: Additional options to pass to phpunit'
    default: ''
  logfile:
    type: string
    required: false
    description: 'Name of the output logfile'
    default: 'phpunit_log.txt'
  logfile_artifact:
    type: string
    required: false
    description: 'Github run artifact to put the logfile in'
    default: 'phpunit-logs'
  output_files:
    type: string
    required: false
    description: 'phpunit output and test settings'
    default: |
      source/unit.cov
      source/source/log/oxideshop.log
      data/php/logs/error_log.txt
  output_artifact:
    type: string
    required: false
    description: 'Github run artifact for the phpunit output'
    default: 'phpunit-artifacts'
  coverage_path:
    type: string
    required: false
    description: 'Path for the coverage file, don't upload if it is empty'
    default: ''

  failure_pattern:
    type: string
    required: false
    description: 'Grep pattern which indicate that the test failed'
    default: 'fail|\\.\\=\\=|Warning|Notice|Deprecated|Fatal|Error'
runs:
  using: "composite"
  steps:
    - name: Run PHPUnit Unit tests
      shell: bash
      run: |
        docker-compose exec -T ${{ inputs. container_options }} \
          ${{ inputs.container }} \
          php vendor/bin/phpunit \
            -c "${{ inputs.configuration }}" \
            ${{ inputs.additional_options }} \
            "${{ inputs.test }}" \
          | tee "${{ inputs.logfile }}" 2>&1 || true

    - name: Upload Log
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.logfile_artifact }}
        path: ${{ inputs.logfile }}
        if-no-files-found: error
        retention-days: 7

    - name: Upload Artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.output_artifact }}
        path: ${{ inputs.output_files }}
        if-no-files-found: ignore
        retention-days: 7

    - name: Upload Coverage Report
      if: ${{  always() && inputs.coverage_path != "" }}
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: ${{ inputs.coverage_path }}
        if-no-files-found: error
        retention-days: 7


    - name: Check results
      shell: bash
      run: |
        if [ ! -s "${{ inputs.logfile }}" ]; then
          cat <<EOF
        *******************************************************************************
        Log file is empty! Seems like no tests have been run!
        *******************************************************************************
        EOF
          exit 1
        fi
        if grep -q -Ei '${{ inputs.failure_pattern}}' "${{ inputs.logfile }}"; then
          cat <<EOF
        *******************************************************************************
        phpunit test ${{ inputs.test }} failed
        *******************************************************************************
        EOF
          exit 1
        fi
        if [ -n "${{ inputs.coverage_path }}" && ! -s "${{ inputs.coverage_path }}" ]; then
          cat <<EOF
        *******************************************************************************
        "${{ inputs.coverage_path }}" is empty!
        *******************************************************************************
        EOF
          exit 1
        fi
