name: 'composer_merge'
description: 'This action merges json code into an existing composer.json'
inputs:
  file:
    type: string
    required: true
    description: 'Name of the original composer.json'
  transform:
    type: string
    required: true
    description: 'JSON code to apply to the composer.json'
  backup:
    type: boolean
    required: false
    default: true
    description: 'Should we create a backup for composer.json'
  update:
    type: boolean
    required: false
    description: 'Run composer update after configuring all repositories'
    default: true
  update_options:
    type: string
    required: false
    description: 'Options to pass along to composer when running composer update'
    default: '--no-interaction'
  container_name:
    type: string
    required: false
    description: 'Name of the container to run the test in'
    default: 'php'
  container_options:
    type: string
    required: false
    description: 'Additional options to pass into the container'
    default: ''
  container_method:
    type: string
    required: false
    description: 'Method to execute the commands inside a container, either "run" or "exec"'
    default: 'exec'
  debug:
    type: boolean
    description: 'Enable debugging'
    default: false
    required: false

runs:
  using: "composite"
  steps:
    - name: Create files
      shell: bash
      run: |
        # composer_merge: Create files
        BACKUP="${{ inputs.backup }}"
        if [ "${BACKUP}" == 'true' ]; then
          cp "${{ inputs.file }}" "${{ inputs.file }}.bak"
        fi
        cat > .composer_merge.tmp.json <<EOF
        ${{ inputs.transform }}
        EOF
        echo -e "\033[0;35m### JSON to merge\033[0m"
        cat .composer_merge.tmp.json

    - name: Merge files
      uses: 'joernott/load_testplan@v1'
      with:
        files: '${{ inputs.file }},.composer_merge.tmp.json'
        input_type: 'json'
        json: '${{ inputs.file }}'

    - name: Cleanup
      shell: bash
      run: |
        # composer_merge: Cleanup
        rm .composer_merge.tmp.json
        cat '${{ inputs.file }}'

        if [ '${{ inputs.update }}' == 'true' ]; then
          echo -e "\033[0;35m### Running composer update with ${{ inputs.update_options }}\033[0m"
          docker-compose ${{ inputs.container_method }} -T \
            ${{ inputs.container_options }} \
            ${{ inputs.container_name}} \
            composer update ${{ inputs.update_options }}
        fi
