name: 'styles'
description: 'Configures styles'
inputs:
  container_name:
    type: string
    required: false
    description: 'Name of the container to run the test in'
    default: 'php'
  container_options:
    type: string
    required: false
    description: 'Additional options to pass into the container'
    default: ''
  container_method:
    type: string
    required: false
    description: 'Method to execute the commands inside a container, either "run" or "exec"'
    default: 'exec'
  output_files:
    type: string
    required: false
    description: 'phpunit output and test settings'
    default: |
      source/test-module/tests/reports/phpstan.report.json
      source/test-module/tests/reports/phpmd.report.json
  output_artifact:
    type: string
    required: false
    description: 'Github run artifact for the phpunit output'
    default: 'StylesLog'
runs:
  using: "composite"
  steps:
    - name: Run phpstan
      id: phpstan
      if: always()
      shell: bash
      run: |
        docker-compose ${{ inputs.container_method }} -T ${{ inputs.container_options }} \
          --workdir=/var/www/test-module \
          ${{ inputs.container_name}} \
          bash -c "composer phpstan-report; composer phpstan"

    - name: Run phpmd
      id: phpmd
      if: always()
      continue-on-error: true
      shell: bash
      run: |
        docker-compose ${{ inputs.container_method }} -T ${{ inputs.container_options }} \
          --workdir=/var/www/test-module \
          ${{ inputs.container_name}} \
          bash -c "composer phpmd-report; composer phpmd"

    - name: Run phpcs
      if: always()
      shell: bash
      run: |
        docker-compose ${{ inputs.container_method }} -T ${{ inputs.container_options }} \
          --workdir=/var/www/test-module \
          ${{ inputs.container_name}} \
          composer phpcs

    - name: Stop containers
      if: always()
      shell: bash
      run: |
        make down

    - name: Upload log artifact
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.output_artifact }}
        path: ${{ inputs.output_files }}
