name: 'codeception'
description: 'Executes codeception tests in a running shop and uploads the logs and outputs as artifacts'
inputs:
  container:
    type: string
    required: false
    description: 'Name of the container to run the test in'
    default: 'php'
  container_options:
    type: string
    required: false
    description: 'Additional options to pass into the container'
    default: '-e SELENIUM_SERVER_HOST=selenium -e BROWSER_NAME=chrome -e THEME_ID=apex'
  configuration:
    type: string
    required: false
    description: 'Name of the configuration file'
    default: 'tests/codeception.yml'
  build:
    type: boolean
    required: false
    description: 'Whether to run the build step before running codeception or not'
    default: false
  suite:
    type: string
    required: false
    description: 'Name of the codeception test suite to run'
    default: 'acceptance,acceptanceAdmin'
  test:
    type: string
    required: false
    description: 'Name of the test to run'
    default: ''
  additional_options:
    type: string
    required: false
    description: 'Optional: Additional options to pass to codeception'
    default: ''
  logfile:
    type: string
    required: false
    description: 'Name of the output logfile'
    default: 'phpunit_log.txt'
  logfile_artifact:
    type: string
    required: false
    description: 'Github run artifact to put the logfile in'
    default: 'phpunit-logs'
  output_files:
    type: string
    required: false
    description: 'Output files of the codeception run to put into the output artifact'
    default: |
      docker-compose.yml
      source/composer.json
      source/composer.lock
      source/source/config.inc.php
      source/source/log/oxideshop.log
      data/php/logs/error_log.txt
      source/tests/Codeception/_output
  output_artifact:
    type: string
    required: false
    description: 'Github run artifact to put the output files in'
    default: 'codeception-artifacts'
  coverage_path:
    type: string
    required: false
    description: 'Path for the coverage file, do not upload if it is empty'
    default: ''
  coverage_artifact:
    type: string
    required: false
    description: 'Github run artifact for the coverage file'
    default: 'coverage-reports'
  failure_pattern:
    type: string
    required: false
    description: 'Grep pattern which indicate that the test failed'
    default: 'fail|\\.\\=\\=|Warning|Notice|Deprecated|Fatal|Error|DID NOT FINISH'
runs:
  using: "composite"
  steps:
    - name: Build Codeception
      if: ${{ inputs.build == 'true' }}
      shell: bash
      run: |
        docker-compose exec -T
          ${{ inputs. container_options }} \
          ${{ inputs.container }} \
          php vendor/bin/codecept build \
          -c ${{ inputs.configuration }}

    - name: Run Codeception tests
      shell: bash
      run: |
        docker-compose exec -T \
          ${{ inputs. container_options }} \
           ${{ inputs.container }} \
           vendor/bin/codecept run ${{ inputs.suite }} ${{ inputs.test }} \
            -c ${{ inputs.configuration }} \
            --ext DotReporter \
            ${{ inputs.additional_options }} \
            2>&1 | tee ${{ inputs.logfile }} || true

    - name: Upload Codeception Log
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.logfile_artifact }}
        path: ${{ inputs.logfile }}
        if-no-files-found: error
        retention-days: 7

    - name: Upload Codeception Artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.output_artifact }}
        path: ${{ inputs.output_files }}
        if-no-files-found: ignore
        retention-days: 7

    - name: Upload Coverage Report
      if: ${{ always() && inputs.coverage_path != '' }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.coverage_artifact }}
        path: ${{ inputs.coverage_path }}
        if-no-files-found: error
        retention-days: 7

    - name: Check results
      shell: bash
      run: |
        PURPLE=$(echo -e "\033[0;31m")
        NOCOLOR=$(echo -e "\033[0m")
        if [ ! -s "${{ inputs.logfile }}" ]; then
          cat <<EOF
        ${PURPLE}###############################################################################
        Log file is empty! Seems like no tests have been run!
        ###############################################################################
        EOF
          exit 1
        fi
        if grep -q -Ei '${{ inputs.failure_pattern}}' "${{ inputs.logfile }}"; then
          cat <<EOF
        ${PURPLE}###############################################################################
        codeception test ${{ inputs.test }} failed
        ###############################################################################
        EOF
          grep -Ei '${{ inputs.failure_pattern}}' "${{ inputs.logfile }}"
          exit 1
        fi
        if [ -n "${{ inputs.coverage_path }}" && ! -s "${{ inputs.coverage_path }}" ]; then
          cat <<EOF
        ${PURPLE}###############################################################################
        "${{ inputs.coverage_path }}" is empty!
        ###############################################################################
        EOF
          exit 1
        fi
