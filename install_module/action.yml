name: 'install_module'
description: 'Fetches the module and installs it'
inputs:
  container_name:
    type: string
    required: false
    description: 'Name of the container to run the test in'
    default: 'php'
  container_options:
    type: string
    required: false
    description: 'Additional options to pass into the container'
    default: ''
  container_method:
    type: string
    required: false
    description: 'Method to execute the commands inside a container, either "run" or "exec"'
    default: 'exec'
  package_name:
    type: string
    required: true
    description: 'Name of the module package'
  module_ids:
    type: string
    required: true
    description: 'Ids of the module'
  module_path:
    type: string
    required: false
    description: 'Path for the checkout and url'
    default: 'dev-packages/test-module'
  activate:
    type: string
    required: true
    description: 'Space/multiline list of modules to activate'
  git_module_url:
    type: string
    required: true
    description: 'URL for the module repository'
  git_module_ref:
    type: string
    required: false
    description: 'Branch, tag or hash of the commit to check out'
    default: true
  update:
    type: boolean
    required: false
    description: 'Run composer update and reset database after instlling the module'
    default: true
  output_files:
    type: string
    required: false
    description: 'Output files of the codeception run to put into the output artifact'
    default: |
      docker-compose.yml
      source/composer.json
      source/composer.lock
      source/source/config.inc.php
  output_artifact:
    type: string
    required: false
    description: 'Github run artifact to put the output files in'
    default: 'install_module-artifacts'
  enterprise_github_token:
    type: string
    required: false
    description: 'OAuth token to access enterprise repos'
    default: ''
  cache_name:
    type: string
    required: true
    description: 'Name of the shop to cache'
  cache_bucket:
    type: string
    required: false
    description: 'Name of the local s3 cache bucket'
    default: 'oxideshop-ee'
  cache_endpoint:
    type: string
    required: false
    description: 'secrets.CACHE_ENDPOINT for actions-cache'
    default: ''
  cache_access_key:
    type: string
    required: false
    description: 'secrets.CACHE_ACCESS_KEY for actions-cache'
    default: ''
  cache_secret_key:
    type: string
    required: false
    description: 'secrets.CACHE_SECRET_KEY  for actions-cache'
    default: ''
  debug:
    type: string
    description: 'Appended to debugging scripts'
    default: ''
    required: false

runs:
  using: "composite"
  steps:
    - name: Locate Console
      shell: bash
      run: |
        # install_module: Locate Console
        cd source
        OE_CONSOLE=$(find . -iname "oe-console" -type f|head -1|sed -e "s|^$(pwd)/||")
        echo "OE_CONSOLE=${OE_CONSOLE}"|tee -a "${GITHUB_ENV}"

    - name: Configure enterprise credentials
      shell: bash
      run: |
        # install_module: Configure enterprise credentials
        ${{ inputs.debug }}
        if [ -n "${{ inputs.enterprise_github_token }}" ]; then
          echo -e "\033[0;35m###  configure github access ###\033[0m"
          docker compose ${{ inputs.container_method }} -T \
            ${{ inputs.container_options }} \
            ${{ inputs.container_name}} \
            composer config github-protocols https
          docker compose ${{ inputs.container_method }} -T \
            ${{ inputs.container_options }} \
            ${{ inputs.container_name}} \
            composer config -g github-oauth.github.com "${{ inputs.enterprise_github_token }}"
        fi

    # - name: Install module
    #   shell: bash
    #   run: |
    #     # install_module: Install module
    #     ${{ inputs.debug }}
    #     docker compose ${{ inputs.container_method }} -T \
    #       ${{ inputs. container_options }} \
    #       ${{ inputs.container_name}} \
    #       composer config repositories.${{ inputs.package_name }} \
    #       --json '{"type":"path", "url":"./${{inputs.module_path}}", "options": {"symlink": true}}'
    #     docker compose ${{ inputs.container_method }} -T \
    #       ${{ inputs. container_options }} \
    #       ${{ inputs.container_name}} \
    #       composer require ${{ inputs.package_name }}:${{ inputs.git_module_ref }} --no-interaction --no-update

    - name: 'Modify composer.json'
      uses: 'OXID-eSales/github-actions/composer_merge@v4alpha'
      with:
        file: 'source/composer.json'
        backup: true
        transform: |
          {
            "require": {
              "${{ inputs.package_name }}": "${{ inputs.git_module_ref }} "
            },
            "repositories": {
                "${{ inputs.package_name }}": {
                     "type": "path",
                      "url": "./${{inputs.module_path}}",
                      "options": {
                          "symlink": true
                      }
                }
            }
          }
        update: ${{ inputs.update }}
        container_name: ${{ inputs.container_name }}
        container_options: ${{ inputs.container_options }}
        container_method: 'exec'
        debug: ${{ inputs.debug }}

    - name: Install dependencies and reset database
      if: ${{ inputs.update == 'true' }}
      shell: bash
      run: |
        # install_module: Install dependencies and reset database
        ${{ inputs.debug }}
        # docker compose ${{ inputs.container_method }} -T \
        #   ${{ inputs. container_options }} \
        #   ${{ inputs.container_name}} \
        #   composer update --no-interaction
        docker compose ${{ inputs.container_method }} -T \
          ${{ inputs. container_options }} \
          ${{ inputs.container_name}} \
          ${{ env.OE_CONSOLE }} oe:database:reset \
          --db-host=mysql --db-port=3306 --db-name=example --db-user=root --db-password=root --force

    - name: Activate modules
      shell: bash
      run: |
        # install_module: Activate modules
        ${{ inputs.debug }}
        MODULES=$(echo -n "${{ inputs.activate }}"| tr '\n' ' ')
        for MODULE in ${MODULES}; do
          echo -e "\033[0;35m###  activating module ${MODULE} ###\033[0m"
          docker compose ${{ inputs.container_method }} -T \
            ${{ inputs. container_options }} \
            ${{ inputs.container_name}} \
            ${{ env.OE_CONSOLE }} oe:module:activate "${MODULE}"
        done

    - name: Install module dependencies
      shell: bash
      run: |
        # install_module: Install module dependencies
        ${{ inputs.debug }}
        docker compose ${{ inputs.container_method }} -T \
          ${{ inputs. container_options }} \
          --workdir=/var/www \
          ${{ inputs.container_name}} \
          composer install

    - name: Write files list
      if: always()
      shell: bash
      run: |
        # install_module: Write files list
        find . >files.txt

    - name: Output php error log
      if: always()
      shell: bash
      run: |
        # install_module: Output php error log
        ${{ inputs.debug }}
        if [ -s data/php/logs/error_log.txt ]; then
          echo -e "\033[0;35mPHP error log\033[0m"
          cat data/php/logs/error_log.txt
        fi

    - name: Upload configuration artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.output_artifact }}
        path: ${{ inputs.output_files }}

    - name: Cache current installation
      uses: tespkg/actions-cache@v1
      with:
        path: |
          ./*
        key: ${{ inputs.cache_name }}
        endpoint: ${{ inputs.cache_endpoint }}
        accessKey: ${{ inputs.cache_access_key }}
        secretKey: ${{ inputs.cache_secret_key }}
        bucket: ${{ inputs.cache_bucket }}
