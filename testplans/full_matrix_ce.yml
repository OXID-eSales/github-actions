workflow:
  # The variables "php" and "mysql" are used to run a matrix of all combinations
  matrix:
    # A json array of php versions to test
    php: &matrix_php '["8.1","8.2"]'
    # A json array of mysql versions to test
    mysql: &matrix_mysql '["5.7","8.0"]'
  max_parallel: &max_parallel 4
global:
  # URL for the docker-eshop sdk repo to clone 
  git_sdk_url: &git_sdk_url 'https://github.com/OXID-eSales/docker-eshop-sdk.git'
  # Branch to check out for the SDK
  git_sdk_ref: &git_sdk_ref 'master'
  # URL for the oxidshop_ce repository
  git_shop_url: &git_shop_url 'https://github.com/OXID-eSales/oxideshop_ce.git'
  # Branch, tag or hash of the commit to check out
  git_shop_ref: *github_ref_name

  # This action can be used on the community edition (ce) and enterprise
  # edition (ee) of the shop. On top of setting this to true, a few extra 
  # variables/secrets must be provided for using the action on ee.
  is_enterprise: &is_enterprise false
  # If is enterprise is set to true, you need to provide the following
  # - secrets.enterprise_github_token
  # - testplan entry global.git_enterprise_ref
  # Branch to check out for the enterprise repos
  git_enterprise_ref: &git_enterprise_ref ''

  # When running on a self hosted runner with access to a local s3 cache:
  # Set the following secrets:
  # - secrets.CACHE_ENDPOINT
  # - secrets.CACHE_ACCESS_KEY
  # - secrets.CACHE_SECRET_KEY
  cache_bucket: &cache_bucket 'oxideshop-ee'

  # Name of the container running php
  container: &container 'php'
  # Additional options when running something in the the container
  container_options: &container_options ''
  # Method to execute the commands inside a container, either "run" or "exec"
  container_method: &container_method 'exec'

init:
  # Should we log in to docker? If set to "true", you need to set the following secrets:
  # - secrets.DOCKER_HUB_USER
  # - secrets.DOCKER_HUB_TOKEN
  docker_login: &docker_login true

# See docs/actions/prepare_shop.md for more information.
prepare_shop:
  # Using the global settings here
  matrix:
    php: *matrix_php
    mysql: *matrix_mysql
  max_parallel: *max_parallel
  container: *container
  container_options: *container_options
  container_method: *container_method
  git_sdk_url: *git_sdk_url
  git_sdk_ref: *git_sdk_ref
  git_shop_url: *git_shop_url
  git_shop_ref: *github_ref_name
  git_enterprise_ref: *git_enterprise_ref
  is_enterprise: *is_enterprise
  cache_bucket: *cache_bucket
  # Error reporting settings for php custom.ini
  custom_ini_error_reporting: 'E_ALL & ~E_DEPRECATED & ~E_NOTICE & ~E_WARNING'
  # xdebug settings for php custom.ini
  custom_ini_xdebug: 'xdebug.max_nesting_level=1000'
  # Space separated list of extra services to add
  add_services: 'selenium-chrome'
  # Themes to install
  themes:
    # Space separated list of themes to install
    install: ''
    # Options to pass along to composer during install
    options: '--with-all-dependencies'
    # Run composer update after installing all themes
    update: true
    # Options to pass along to composer during install
    update_options: '--no-interaction'

# See docs/actions/start_shop.md and docs/actions/install_shop.md for more information.
install_shop:
  # Using the global settings here
  matrix:
    php: *matrix_php
    mysql: *matrix_mysql
  max_parallel: *max_parallel
  container: *container
  container_options: *container_options
  container_method: *container_method
  git_shop_ref: *github_ref_name
  git_enterprise_ref: *git_enterprise_ref
  is_enterprise: *is_enterprise
  cache_bucket: *cache_bucket
  # Set iDebug in source/source/config.inc.php
  config_idebug: false
  # Configuration files for the shop setup'
  output_files: |
    docker-compose.yml
    source/composer.json
    source/composer.lock
    source/source/config.inc.php
  # Configuration file is dynamic, so we use the actions default
  #output_artifact: 'Configs-<matrix.php>-<matrix.mysql>_install_shop'

# See docs/actions/start_shop.md and docs/actions/phpunit.md for more information.
unit_tests:
  # Skip this part of the test run
  skip: false
  # Using the global settings here
  matrix:
    php: *matrix_php
    mysql: *matrix_mysql
  max_parallel: *max_parallel
  container: *container
  container_method: *container_method
  cache_bucket: *cache_bucket
  # container options for coverage
  container_options: '-e XDEBUG_MODE=coverage'
  # Name of the configuration file
  configuration: 'phpunit.xml'
  # Name of the test or folder to run
  test: 'tests/Unit'
  # Optional: Additional options to pass to phpunit
  additional_options: '--bootstrap tests/bootstrap.php tests --coverage-clover=/var/www/tests_coverage.xml'
  # Name of the output logfile - This is dynamic, so we set it in the workflow
  #logfile:  'unit_PHP<matrix.php>_MYSQL<matrix.mysql>_phpunit_log.txt'
  # Github run artifact to put the logfile in
  logfile_artifact: 'phpunit-logs'
  # phpunit output and test settings
  output_files: |
    source/unit.cov
    source/source/log/oxideshop.log
    data/php/logs/error_log.txt
  # Github run artifact for the phpunit output - This is dynamic, so we set it in the workflow
  # output_artifact: phpunit-artifacts_PHP<matrix.php>_MYSQL<matrix.mysql>
  # Path for the coverage file, not uploaded if it is empty
  coverage_path: 'source/tests_coverage.xml'
  # Github run artifact for the coverage file - This is dynamic, so we set it in the workflow
  # coverage_artifact: coverage-reports_PHP<matrix.php>_MYSQL<matrix.mysql>
  # Grep pattern which indicate that the test failed
  failure_pattern: 'fail|\\.\\=\\=|Warning|Notice|Deprecated|Fatal|Error'

# See docs/actions/start_shop.md and docs/actions/phpunit.md for more information.
integration_tests:
  # Skip this part of the test run
  skip: false
  # Using the global settings here
  matrix:
    php: *matrix_php
    mysql: *matrix_mysql
  max_parallel: *max_parallel
  container: *container
  container_options: *container_options
  container_method: *container_method
  cache_bucket: *cache_bucket
  # Name of the configuration file
  configuration: 'phpunit.xml'
  # Name of the test or folder to run
  test: 'tests/Integration'
  # Optional: Additional options to pass to phpunit
  additional_options: '--bootstrap tests/bootstrap.php'
  # Name of the output logfile - This is dynamic, so we set it in the workflow
  #logfile:  'integration_PHP<matrix.php>_MYSQL<matrix.mysql>_phpunit_log.txt'
  # Github run artifact to put the logfile in
  logfile_artifact: 'phpunit-logs'
  # phpunit output and test settings
  output_files: |
    source/unit.cov
    source/source/log/oxideshop.log
    data/php/logs/error_log.txt
  # Github run artifact for the phpunit output - This is dynamic, so we set it in the workflow
  # output_artifact: phpunit-artifacts_PHP<matrix.php>_MYSQL<matrix.mysql>
  # Path for the coverage file, not uploaded if it is empty
  coverage_path: ''
  # Github run artifact for the coverage file - This is dynamic, so we set it in the workflow
  # coverage_artifact: coverage-reports_PHP<matrix.php>_MYSQL<matrix.mysql>
  # Grep pattern which indicate that the test failed
  failure_pattern: 'fail|\\.\\=\\=|Warning|Notice|Deprecated|Fatal|Error'

# See docs/actions/start_shop.md and docs/actions/codeception.md for more information.
codeception_tests:
  # Skip this part of the test run
  skip: false
  # Using the global settings here
  matrix:
    php: *matrix_php
    mysql: *matrix_mysql
  max_parallel: *max_parallel
  container: *container
  container_method: *container_method
  cache_bucket: *cache_bucket
  # For codeception, we need different options than the empty default
  container_options: '-e SELENIUM_SERVER_HOST=selenium -e BROWSER_NAME=chrome -e THEME_ID=apex -e XDEBUG_MODE=coverage'

  # Themes to install
  themes:
    # Space separated list of themes to install
    install: 'oxid-esales/twig-admin-theme oxid-esales/apex-theme'
    # Options to pass along to composer during install
    options: '--with-all-dependencies'
    # Run composer update after installing all themes
    update: true
    # Options to pass along to composer during install
    update_options: '--no-interaction'
  # Name of the configuration file
  configuration: 'tests/codeception.yml'
  # Whether to run the build step before running codeception or not
  build: true
  # Name of the codeception test suite to run
  suite: 'acceptance,acceptanceAdmin'
  # Name of the test to run
  test: ''
  # Additional options to pass to codeception
  additional_options: '--coverage-xml=/var/www/codeception_coverage.xml --skip-group flow_theme'
  # Name of the output logfile - This is dynamic, so we set it in the workflow
  # logfile: codeception_PHP<matrix.php>_MYSQL<matrix.mysql>_phpunit_log.txt
  # Github run artifact to put the logfile in
  logfile_artifact: 'phpunit-logs'
  # Output files of the codeception run to put into the output artifact
  output_files: |
      docker-compose.yml
      source/composer.json
      source/composer.lock
      source/source/config.inc.php
      source/source/log/oxideshop.log
      data/php/logs/error_log.txt
      source/tests/Codeception/_output
  # Github run artifact to put the output files in - This is dynamic, so we set it in the workflow
  # output_artifact: codeception-artifacts_PHP<matrix.php>_MYSQL<matrix.mysql>
  # Path for the coverage file, not uploaded if it is empty
  coverage_path: 'source/codeception_coverage.xml'
  # Github run artifact for the coverage file - This is dynamic, so we set it in the workflow
  # coverage_artifact: coverage-reports _PHP<matrix.php>_MYSQL<matrix.mysql>
  # Grep pattern which indicate that the test failed
  failure_pattern: 'fail|\\.\\=\\=|Warning|Notice|Deprecated|Fatal|Error|DID NOT FINISH'

# See docs/actions/start_shop.md, docs/actions/install_themes and docs/actions/codeception.md
# for more information.
shop_setup_tests:
  # Skip this part of the test run
  skip: false
  # Using the global settings here
  matrix:
    php: *matrix_php
    mysql: *matrix_mysql
  max_parallel: *max_parallel
  container: *container
  container_method: *container_method
  cache_bucket: *cache_bucket
  # We pass the configuration parameters into the container here
  container_options: '-e SELENIUM_SERVER_HOST=selenium -e BROWSER_NAME=chrome -e DB_NAME=setup_test -e DB_USERNAME=root -e DB_PASSWORD=root -e DB_HOST=mysql -e DB_PORT=3306 -e SHOP_URL=http://localhost.local/ -e SHOP_SOURCE_PATH=/var/www/source/'
  # Themes to install
  themes:
    # Space separated list of themes to install
    install: 'oxid-esales/twig-admin-theme oxid-esales/apex-theme'
    # Options to pass along to composer during install
    options: '--with-all-dependencies'
    # Run composer update after installing all themes
    update: true
    # Options to pass along to composer during install
    update_options: '--no-interaction'
  # Name of the configuration file
  configuration: 'tests/codeception.yml'
  # Whether to run the build step before running codeception or not
  build: true
  # Name of the codeception test suite to run
  suite: 'acceptanceSetup'
  # Name of the test to run
  test: ''
  # Additional options to pass to codeception
  additional_options: ''
  # Name of the output logfile - This is dynamic, so we set it in the workflow
  # logfile: codeception_PHP<matrix.php>_MYSQL<matrix.mysql>_phpunit_log.txt
  # Github run artifact to put the logfile in
  logfile_artifact: 'phpunit-logs'
  # Output files of the codeception run to put into the output artifact
  output_files: |
      docker-compose.yml
      source/composer.json
      source/composer.lock
      source/source/config.inc.php
      source/source/log/oxideshop.log
      data/php/logs/error_log.txt
      source/tests/Codeception/_output
  # Github run artifact to put the output files in - This is dynamic, so we set it in the workflow
  # output_artifact: codeception-artifacts_PHP<matrix.php>_MYSQL<matrix.mysql>
  # Path for the coverage file, not uploaded if it is empty
  coverage_path: ''
  # Github run artifact for the coverage file - This is dynamic, so we set it in the workflow
  # coverage_artifact: coverage-reports_PHP<matrix.php>_MYSQL<matrix.mysql>
  # Grep pattern which indicate that the test failed
  failure_pattern: 'fail|\\.\\=\\=|Warning|Notice|Deprecated|Fatal|Error|DID NOT FINISH'

deprecated_tests:
  # Skip this part of the test run
  skip: false
  # Using the global settings here
  matrix:
    php: *matrix_php
    mysql: *matrix_mysql
  max_parallel: *max_parallel
  container: *container
  cache_bucket: *cache_bucket
  # container options for coverage
  container_options: '-e XDEBUG_MODE=coverage'
  # We use run here, too
  container_method: 'run'
  # Themes to install
  themes:
    # Space separated list of themes to install
    install: 'oxid-esales/twig-admin-theme oxid-esales/twig-theme oxid-esales/tests-deprecated-ce'
    # Options to pass along to composer during install
    options: '--with-all-dependencies'
    # Run composer update after installing all themes
    update: true
    # Options to pass along to composer during install
    update_options: '--no-interaction'
  # Name of the test or folder to run
  test: 'AllTestsUnit'
  # Optional: Additional options to pass to phpunit
  additional_options: '--coverage-clover=/var/www/deprecated_tests_coverage.xml'
  # Name of the output logfile - This is dynamic, so we set it in the workflow
  #logfile:  'deprecated_tests_PHP<matrix.php>_MYSQL<matrix.mysql>_phpunit_log.txt'
  # Github run artifact to put the logfile in
  logfile_artifact: 'phpunit-logs'
  # phpunit output and test settings
  output_files: |
    source/unit.cov
    source/source/log/oxideshop.log
    data/php/logs/error_log.txt
  # Github run artifact for the phpunit output - This is dynamic, so we set it in the workflow
  # output_artifact: phpunit-artifacts_PHP<matrix.php>_MYSQL<matrix.mysql>
  # Path for the coverage file, not uploaded if it is empty
  coverage_path: 'source/deprecated_tests_coverage.xml'
  # Github run artifact for the coverage file - This is dynamic, so we set it in the workflow
  # coverage_artifact: coverage-reports_PHP<matrix.php>_MYSQL<matrix.mysql>
  # Grep pattern which indicate that the test failed
  failure_pattern: 'fail|\\.\\=\\=|Warning|Notice|Fatal|Error|DID NOT FINISH'

# Running sonarcloud
sonarcloud:
  # Skip this part of the test run
  skip: false
  # We only run sonarcloud for one combination ofo PHP/MySQL
  matrix:
    php: '["8.1"]'
    mysql: '["5.7"]'
  # Github run artifact for the coverage file - This is dynamic, so we set it in the workflow
  # coverage_artifact: coverage-reports_PHP<matrix.php>_MYSQL<matrix.mysql>
  # Target branch for the sonarcloud check. This will only be set if the branch is not the default branch
  target_branch: b-8.0.x
  # Sonarcloud settings
  organization: 'oxid-esales'
  project_key: 'OXID-eSales_oxideshop_ce'
  project_name: 'oxideshop_ce'
  # Parameters passed to the scanner
  parameters: |
    -Dsonar.language=php
    -Dsonar.scm.provider=git  
    -Dsonar.sources=source
    -Dsonar.tests=tests

  # for the internal run
  internal_project_name: 'oxideshop_ce_internal'
  internal_parameters: |
    -Dsonar.language=php
    -Dsonar.scm.provider=git  
    -Dsonar.sources=source/Internal
    -Dsonar.tests=tests

# This is the final cleanup at the end
finish:
  # Skip this part of the test run
  skip: false
  # Using the global settings here
  matrix:
    php: *matrix_php
    mysql: *matrix_mysql
  # Whether we should logout from docker, we mirror docker login
  docker_logout: *docker_login