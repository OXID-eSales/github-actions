name: 'phpcs'
description: 'Executes phpcs tests in a running container and uploads the logs as artefacts'
inputs:
  container_name:
    type: string
    required: false
    description: 'Name of the container to run the test in'
    default: 'php'
  container_options:
    type: string
    required: false
    description: 'Additional options to pass into the container'
    default: ''
  container_method:
    type: string
    required: false
    description: 'Method to execute the commands inside a container, either "run" or "exec"'
    default: 'exec'
  diff_only:
    type: boolean
    required: false
    description: 'Run phpcs only on changed files between this and the last commit'
    default: true
  git_ref:
    type: string
    required: false
    description: 'Reference to check out'
    default: 'main'
  filter:
    type: string
    required: false
    description: 'Filter the file names against this regex'
    default: '\.php$'
  additional_options:
    type: string
    required: false
    description: 'Optional: Additional options to pass to phpcs'
    default: '-q --standard=PSR12'
  logfile:
    type: string
    required: false
    description: 'Name of the output logfile'
    default: 'phpcs_log.txt'
  logfile_artifact:
    type: string
    required: false
    description: 'Github run artifact to put the logfile in'
    default: 'phpunit-logs'
  failure_pattern:
    type: string
    required: false
    description: 'Grep pattern which indicate that the test failed'
    default: 'fail|\\.\\=\\=|Warning|Notice|Deprecated|Fatal|Error'
runs:
  using: "composite"
  steps:
    - name: 'List changed files'
      id: diff
      shell: bash
      run: |
        cd source
        git status
        if [ "${{ inputs.diff_only }}" == "true" ]; then
          git diff --name-only --diff-filter=AM ${{ inputs.git_ref }} HEAD~1 | grep '${{ inputs.filter }}' | while read file; do
            if [[ -f "$file" ]]; then
              echo "$file"
            fi
          done >changed-files.txt || true
        else
          find . -type f|grep'${{ inputs.filter }}' >changed-files.txt
        fi
        if [[ -f "changed-files.txt" && -s "changed-files.txt" ]]; then
          echo "skip=false" >> "$GITHUB_OUTPUT"
        else
          echo "skip=true" >> "$GITHUB_OUTPUT"
        fi

    - name: Run PHP_CS check
      shell: bash
      if: ${{ steps.diff.outputs.skip == 'false' }}
      run: |
        docker-compose ${{ inputs.container_method }} -T ${{ inputs.container_options }} \
          ${{ inputs.container_name}} \
          php vendor/bin/phpcs --version \
          | tee "${{ inputs.logfile }}" 2>&1 || true

        docker-compose ${{ inputs.container_method }} -T ${{ inputs.container_options }} \
          ${{ inputs.container_name}} \
          php vendor/bin/phpcs \
            ${{ inputs.additional_options }} \
            ${{ inputs.test }} \
          | tee "${{ inputs.logfile }}" 2>&1 || true

    - name: Upload Log
      if: ${{ always() && steps.diff.outputs.skip == 'false' }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.logfile_artifact }}
        path: ${{ inputs.logfile }}
        if-no-files-found: error
        retention-days: 7

    - name: Check results
      shell: bash
      run: |
        PURPLE=$(echo -e "\033[0;31m")
        NOCOLOR=$(echo -e "\033[0m")
        if [ ! -s "${{ inputs.logfile }}" ]; then
          cat <<EOF
        ${PURPLE}###############################################################################
        ### Log file is empty! Seems like no tests have been run!
        ###############################################################################${NOCOLOR}
        EOF
          exit 1
        fi
        if grep -q -Ei '${{ inputs.failure_pattern}}' "${{ inputs.logfile }}"; then
          cat <<EOF
        ${PURPLE}###############################################################################
        ### phpcs test ${{ inputs.test }} failed
        ###############################################################################${NOCOLOR}
        EOF
          grep -Ei '${{ inputs.failure_pattern}}' "${{ inputs.logfile }}"
          exit 1
        fi
        if [[ -n "${{ inputs.coverage_path }}" && ! -s "${{ inputs.coverage_path }}" ]]; then
          cat <<EOF
        ${PURPLE}###############################################################################
        ### "${{ inputs.coverage_path }}" is empty!
        ###############################################################################${NOCOLOR}
        EOF
          exit 1
        fi
