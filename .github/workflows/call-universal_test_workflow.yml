name: universal_test_workflow
# This workflow loads a base testplan, creates cached shop instances and runs
# phpunit, codeception and runtest based tests as well as code scans
# and sonarcloud reports
#
# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      testplan:
        type: string
        description: 'Testplan to run'
        required: true
      runs_on:
        type: string
        description: 'JSON string/array describing the runner'
        required: true
      defaults:
        type: string
        description: 'Which ref do we want to use for the plan defaults'
        required: false
        default: 'v3'

    secrets:
      DOCKER_HUB_USER:
        # description: 'user for the docker login'
        required: false
      DOCKER_HUB_TOKEN:
        # description: 'Token for the docker login'
        required: false
      CACHE_ENDPOINT:
        # description: 'Endpoint for tespkg/actions-cache@v1'
        required: false    # only for ee
      CACHE_ACCESS_KEY:
        # description: 'Access key for tespkg/actions-cache@v1'
        required: false    # only for ee
      CACHE_SECRET_KEY:
        # description: 'Secret key for tespkg/actions-cache@v1'
        required: false    # only for ee
      enterprise_github_token:
        # description: 'OAuth token to access enterprise repos'
        required: false
      SONAR_TOKEN:
        # description: Token for sonarcloud access
        required: false
      SLACK_WEBHOOK_URL:
        required: false
        # description: Webhook for posting to SLACK

jobs:
  init:
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Checkout testplan defaults'
        uses: actions/checkout@v4
        with:
          repository: 'OXID-eSales/github-actions'
          ref: '${{ inputs.defaults }}'
          path: 'defaults'
          sparse-checkout: 'tests/github_actions/defaults'

      - name: 'Show files'
        run: |
          find . -type f

      - name: 'Checkout testplans'
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            tests/github_actions
            Tests/github_actions
          path: workflow

      - name: 'Consolidate plans'
        run: |
          find . -type f
          mkdir tests
          if [ -d workflow/tests/github_actions ]; then
            mv workflow/tests/github_actions tests/
          fi
          if [ -d workflow/Tests/github_actions ]; then
            mv workflow/Tests/github_actions tests/
          fi
          mv defaults/tests/github_actions/defaults tests/github_actions/

      - name: 'Load Testplan'
        id: ltp
        uses: 'joernott/load_testplan@v1'
        with:
          files: 'tests/github_actions/defaults/defaults.yml,${{ inputs.testplan }}'
          set_output: true
          set_env: true
          set_print: true
          # loglevel: trace
          # logfile: load_testplan.log
          yaml: generated_testplan.yaml

      - name: 'Prepare artifact'
        if: always()
        run: |
          cp "${GITHUB_OUTPUT}" generated_output.txt
          cp "${GITHUB_ENV}" generated_env.txt

      - name: 'Upload generated test plan'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: 'testplan'
          path: |
            tests/github_actions/*
            generated_testplan.yaml
            generated_output.txt
            generated_env.txt
            load_testplan.log
          retention-days: 7

      - name: 'Write Report Header'
        if: always()
        uses: OXID-eSales/github-actions/begin_report@v3
        with:
          title: ${{ steps.ltp.outputs.finish_slack_title }}
          repository: '${{ github.server_url }}/${{ github.repository }}'
          job: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          testplan: '${{ inputs.testplan }}'

      - name: 'Write Report'
        if: always()
        uses: OXID-eSales/github-actions/append_report@v3
        with:
          header: true
          phase: install
          priority: '001'

      - name: Cache testplan
        uses: tespkg/actions-cache@v1
        with:
          path: |
            tests/github_actions/*
          key: '${{ steps.ltp.outputs.init_cache_name }}'
          endpoint: ${{ secrets.CACHE_ENDPOINT }}
          accessKey: ${{ secrets.CACHE_ACCESS_KEY }}
          secretKey: ${{ secrets.CACHE_SECRET_KEY }}
          bucket: ${{ steps.ltp.outputs.init_cache_bucket }}


    outputs:
      # init variables
      init_cache_bucket: ${{ steps.ltp.outputs.init_cache_bucket }}
      init_cache_name: ${{ steps.ltp.outputs.init_cache_name }}
      # prepare_shop variables
      prepare_shop_add_services: ${{ steps.ltp.outputs.prepare_shop_add_services }}
      prepare_shop_cache_bucket: ${{ steps.ltp.outputs.prepare_shop_cache_bucket }}
      prepare_shop_cache_prefix: ${{ steps.ltp.outputs.prepare_shop_cache_prefix }}
      prepare_shop_composer_allow_plugins_repositories: ${{ steps.ltp.outputs.prepare_shop_composer_allow_plugins_repositories }}
      prepare_shop_composer_rm_parameters: ${{ steps.ltp.outputs.prepare_shop_composer_rm_parameters }}
      prepare_shop_composer_rm_options: ${{ steps.ltp.outputs.prepare_shop_composer_rm_options }}
      prepare_shop_composer_rm_update: ${{ steps.ltp.outputs.prepare_shop_composer_rm_update }}
      prepare_shop_composer_rm_update_options: ${{ steps.ltp.outputs.prepare_shop_composer_rm_update_options }}
      prepare_shop_composer_configure_install: ${{ steps.ltp.outputs.prepare_shop_composer_configure_install }}
      prepare_shop_composer_configure_options: ${{ steps.ltp.outputs.prepare_shop_composer_configure_options }}
      prepare_shop_composer_configure_organisation: ${{ steps.ltp.outputs.prepare_shop_composer_configure_organisation }}
      prepare_shop_composer_configure_ref: ${{ steps.ltp.outputs.prepare_shop_composer_configure_ref }}
      prepare_shop_composer_configure_update: ${{ steps.ltp.outputs.prepare_shop_composer_configure_update }}
      prepare_shop_composer_configure_update_options: ${{ steps.ltp.outputs.prepare_shop_composer_configure_update_options }}
      prepare_shop_composer_require_install: ${{ steps.ltp.outputs.prepare_shop_composer_require_install }}
      prepare_shop_composer_require_options: ${{ steps.ltp.outputs.prepare_shop_composer_require_options }}
      prepare_shop_composer_require_organisation: ${{ steps.ltp.outputs.prepare_shop_composer_require_organisation }}
      prepare_shop_composer_require_ref: ${{ steps.ltp.outputs.prepare_shop_composer_require_ref }}
      prepare_shop_composer_require_update: ${{ steps.ltp.outputs.prepare_shop_composer_require_update }}
      prepare_shop_composer_require_update_options: ${{ steps.ltp.outputs.prepare_shop_composer_require_update_options }}
      prepare_shop_container_method: ${{ steps.ltp.outputs.prepare_shop_container_method }}
      prepare_shop_container_name: ${{ steps.ltp.outputs.prepare_shop_container_name }}
      prepare_shop_container_options: ${{ steps.ltp.outputs.prepare_shop_container_options }}
      prepare_shop_custom_ini_error_reporting: ${{ steps.ltp.outputs.prepare_shop_custom_ini_error_reporting }}
      prepare_shop_custom_ini_xdebug: ${{ steps.ltp.outputs.prepare_shop_custom_ini_xdebug }}
      prepare_shop_docker_login: ${{ steps.ltp.outputs.prepare_shop_docker_login }}
      prepare_shop_git_enterprise_ref: ${{ steps.ltp.outputs.prepare_shop_git_enterprise_ref }}
      prepare_shop_git_sdk_ref: ${{ steps.ltp.outputs.prepare_shop_git_sdk_ref }}
      prepare_shop_git_sdk_url: ${{ steps.ltp.outputs.prepare_shop_git_sdk_url }}
      prepare_shop_git_shop_ref: ${{ steps.ltp.outputs.prepare_shop_git_shop_ref }}
      prepare_shop_git_shop_url: ${{ steps.ltp.outputs.prepare_shop_git_shop_url }}
      prepare_shop_is_enterprise: ${{ steps.ltp.outputs.prepare_shop_is_enterprise }}
      prepare_shop_matrix_mysql: ${{ steps.ltp.outputs.prepare_shop_matrix_mysql }}
      prepare_shop_matrix_php: ${{ steps.ltp.outputs.prepare_shop_matrix_php }}
      prepare_shop_max_parallel: ${{ steps.ltp.outputs.prepare_shop_max_parallel }}
      # install_shop variables
      install_shop_cache_bucket: ${{ steps.ltp.outputs.install_shop_cache_bucket }}
      install_shop_cache_prefix: ${{ steps.ltp.outputs.install_shop_cache_prefix }}
      install_shop_config_idebug: ${{ steps.ltp.outputs.install_shop_config_idebug }}
      install_shop_container_method: ${{ steps.ltp.outputs.install_shop_container_method }}
      install_shop_container_name: ${{ steps.ltp.outputs.install_shop_container_name }}
      install_shop_container_options: ${{ steps.ltp.outputs.install_shop_container_options }}
      install_shop_docker_login: ${{ steps.ltp.outputs.install_shop_docker_login }}
      install_shop_git_enterprise_ref: ${{ steps.ltp.outputs.install_shop_git_enterprise_ref }}
      install_shop_git_shop_ref: ${{ steps.ltp.outputs.install_shop_git_shop_ref }}
      install_shop_is_enterprise: ${{ steps.ltp.outputs.install_shop_is_enterprise }}
      install_shop_matrix_mysql: ${{ steps.ltp.outputs.install_shop_matrix_mysql }}
      install_shop_matrix_php: ${{ steps.ltp.outputs.install_shop_matrix_php }}
      install_shop_max_parallel: ${{ steps.ltp.outputs.install_shop_max_parallel }}
      install_shop_output_artifact_prefix: ${{ steps.ltp.outputs.install_shop_output_artifact_prefix }}
      install_shop_output_files: ${{ steps.ltp.outputs.install_shop_output_files }}
      # install_module variables
      install_module_cache_prefix: ${{ steps.ltp.outputs.install_module_cache_prefix }}
      install_module_matrix_mysql: ${{ steps.ltp.outputs.install_module_matrix_mysql }}
      install_module_matrix_php: ${{ steps.ltp.outputs.install_module_matrix_php }}
      install_module_matrix_testplan: ${{ steps.ltp.outputs.install_module_matrix_testplan }}
      install_module_max_parallel: ${{ steps.ltp.outputs.install_module_max_parallel }}
      # phpunit variables
      phpunit_matrix_mysql: ${{ steps.ltp.outputs.phpunit_matrix_mysql }}
      phpunit_matrix_php: ${{ steps.ltp.outputs.phpunit_matrix_php }}
      phpunit_matrix_testplan: ${{ steps.ltp.outputs.phpunit_matrix_testplan }}
      phpunit_max_parallel: ${{ steps.ltp.outputs.phpunit_max_parallel }}
      # codeception_tests variables
      codeception_matrix_mysql: ${{ steps.ltp.outputs.codeception_matrix_mysql }}
      codeception_matrix_php: ${{ steps.ltp.outputs.codeception_matrix_php }}
      codeception_matrix_testplan: ${{ steps.ltp.outputs.codeception_matrix_testplan }}
      codeception_max_parallel: ${{ steps.ltp.outputs.codeception_max_parallel }}
      # runtest variables
      runtest_matrix_mysql: ${{ steps.ltp.outputs.runtest_matrix_mysql }}
      runtest_matrix_php: ${{ steps.ltp.outputs.runtest_matrix_php }}
      runtest_matrix_testplan: ${{ steps.ltp.outputs.runtest_matrix_testplan }}
      runtest_max_parallel: ${{ steps.ltp.outputs.runtest_max_parallel }}
      # sonarcloud variables
      sonarcloud_matrix_mysql: ${{ steps.ltp.outputs.sonarcloud_matrix_mysql }}
      sonarcloud_matrix_php: ${{ steps.ltp.outputs.sonarcloud_matrix_php }}
      sonarcloud_matrix_testplan: ${{ steps.ltp.outputs.sonarcloud_matrix_testplan }}
      sonarcloud_max_parallel: ${{ steps.ltp.outputs.sonarcloud_max_parallel }}
      # phpcs_tests variables
      phpcs_tests_additional_options: ${{ steps.ltp.outputs.phpcs_tests_additional_options }}
      phpcs_tests_cache_bucket: ${{ steps.ltp.outputs.phpcs_tests_cache_bucket }}
      phpcs_tests_container_method: ${{ steps.ltp.outputs.phpcs_tests_container_method }}
      phpcs_tests_container_name: ${{ steps.ltp.outputs.phpcs_tests_container_name }}
      phpcs_tests_container_options: ${{ steps.ltp.outputs.phpcs_tests_container_options }}
      phpcs_tests_docker_login: ${{ steps.ltp.outputs.phpcs_tests_docker_login }}
      phpcs_tests_diff_only: ${{ steps.ltp.outputs.phpcs_tests_diff_only }}
      phpcs_tests_failure_pattern: ${{ steps.ltp.outputs.phpcs_tests_failure_pattern }}
      phpcs_tests_filter: ${{ steps.ltp.outputs.phpcs_tests_filter }}
      phpcs_tests_git_ref: ${{ steps.ltp.outputs.phpcs_tests_git_ref }}
      phpcs_tests_logfile_artifact: ${{ steps.ltp.outputs.phpcs_tests_logfile_artifact }}
      phpcs_tests_logfile_prefix: ${{ steps.ltp.outputs.phpcs_tests_logfile_prefix }}
      phpcs_tests_matrix_mysql: ${{ steps.ltp.outputs.phpcs_tests_matrix_mysql }}
      phpcs_tests_matrix_php: ${{ steps.ltp.outputs.phpcs_tests_matrix_php }}
      phpcs_tests_max_parallel: ${{ steps.ltp.outputs.phpcs_tests_max_parallel }}
      phpcs_tests_skip: ${{ steps.ltp.outputs.phpcs_tests_skip }}
      # styles variables
      styles_matrix_mysql: ${{ steps.ltp.outputs.styles_matrix_mysql }}
      styles_matrix_php: ${{ steps.ltp.outputs.styles_matrix_php }}
      styles_matrix_testplan: ${{ steps.ltp.outputs.styles_matrix_testplan }}
      styles_max_parallel: ${{ steps.ltp.outputs.styles_max_parallel }}
      # finish variables
      finish_matrix_mysql: ${{ steps.ltp.outputs.finish_matrix_mysql }}
      finish_matrix_php: ${{ steps.ltp.outputs.finish_matrix_php }}
      finish_skip: ${{ steps.ltp.outputs.finish_skip }}
      finish_slack_title: ${{ steps.ltp.outputs.finish_slack_title }}

  prepare_shop:
    needs: init
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.prepare_shop_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.prepare_shop_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.prepare_shop_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Prepare Shop'
        id: prepare_shop
        uses: 'OXID-eSales/github-actions/prepare_shop@v3'
        with:
          container_name: ${{ needs.init.outputs.prepare_shop_container_name }}
          container_options: ${{ needs.init.outputs.prepare_shop_container_options }}
          container_method: ${{ needs.init.outputs.prepare_shop_container_method }}
          docker_login: ${{ needs.init.outputs.prepare_shop_docker_login }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}
          git_sdk_url: ${{ needs.init.outputs.prepare_shop_git_sdk_url }}
          git_sdk_ref: ${{ needs.init.outputs.prepare_shop_git_sdk_ref }}
          git_shop_url: ${{ needs.init.outputs.prepare_shop_git_shop_url }}
          git_shop_ref: ${{ needs.init.outputs.prepare_shop_git_shop_ref }}
          git_enterprise_ref: ${{ needs.init.outputs.prepare_shop_git_enterprise_ref }}
          github_event_name: ${{ github.event_name }}
          github_event_number: ${{ github.event.number }}
          github_base_ref: ${{ github.base_ref }}
          github_sha: ${{ github.sha }}
          github_run_number: ${{ github.run_number }}
          github_run_attempt: ${{ github.run_attempt }}
          php: ${{ matrix.php }}
          mysql: ${{ matrix.mysql }}
          is_enterprise: ${{ needs.init.outputs.prepare_shop_is_enterprise }}
          custom_ini_error_reporting: ${{ needs.init.outputs.prepare_shop_custom_ini_error_reporting }}
          custom_ini_xdebug: ${{ needs.init.outputs.prepare_shop_custom_ini_xdebug }}
          add_services: ${{ needs.init.outputs.prepare_shop_add_services }}
          composer_allow_plugins_repositories: '${{ needs.init.outputs.prepare_shop_composer_allow_plugins_repositories }}'
          composer_rm_parameters: ${{ needs.init.outputs.prepare_shop_composer_rm_parameters}}
          composer_rm_options: ${{ needs.init.outputs.prepare_shop_composer_rm_options}}
          composer_rm_update: ${{ needs.init.outputs.prepare_shop_composer_rm_update}}
          composer_rm_update_options: ${{ needs.init.outputs.prepare_shop_composer_rm_update_options}}
          composer_configure_organisation: ${{ needs.init.outputs.prepare_shop_composer_configure_organisation}}
          composer_configure_install: '${{ needs.init.outputs.prepare_shop_composer_configure_install}}'
          composer_configure_ref: ${{ needs.init.outputs.prepare_shop_composer_configure_ref}}
          composer_configure_options: ${{ needs.init.outputs.prepare_shop_composer_configure_options}}
          composer_configure_update: ${{ needs.init.outputs.prepare_shop_composer_configure_update}}
          composer_configure_update_options: ${{ needs.init.outputs.prepare_shop_composer_configure_update_options}}
          composer_require_organisation: ${{ needs.init.outputs.prepare_shop_composer_require_organisation}}
          composer_require_install: '${{ needs.init.outputs.prepare_shop_composer_require_install}}'
          composer_require_ref: ${{ needs.init.outputs.prepare_shop_composer_require_ref}}
          composer_require_options: ${{ needs.init.outputs.prepare_shop_composer_require_options}}
          composer_require_update: ${{ needs.init.outputs.prepare_shop_composer_require_update}}
          composer_require_update_options: ${{ needs.init.outputs.prepare_shop_composer_require_update_options}}
          enterprise_github_token: ${{ secrets.enterprise_github_token }}
          cache_name: '${{ needs.init.outputs.prepare_shop_cache_prefix}}_PHP${{matrix.php}}-MYSQL${{matrix.mysql}}'
          cache_bucket: ${{ needs.init.outputs.prepare_shop_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}

      - name: 'Write Report'
        if: always()
        uses: OXID-eSales/github-actions/append_report@v3
        with:
          priority: '010'
          phase: install
          job: prepare_shop
          php: ${{matrix.php}}
          mysql: ${{matrix.mysql}}
          status: ${{job.status}}

  install_shop:
    needs: ['init', 'prepare_shop']
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.install_shop_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.install_shop_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.install_shop_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v3'
        with:
          cached_shop: '${{ needs.init.outputs.prepare_shop_cache_prefix}}_PHP${{matrix.php}}-MYSQL${{matrix.mysql}}'
          cache_bucket: ${{ needs.init.outputs.install_shop_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}
          docker_login: ${{ needs.init.outputs.install_shop_docker_login }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: 'Install shop'
        id: install_shop
        uses: 'OXID-eSales/github-actions/install_shop@v3'
        with:
          container_name: ${{ needs.init.outputs.install_shop_container_name }}
          container_options: ${{ needs.init.outputs.install_shop_container_options }}
          container_method: ${{ needs.init.outputs.install_shop_container_method }}
          git_shop_ref: ${{ needs.init.outputs.install_shop_git_shop_ref }}
          git_enterprise_ref: ${{ needs.init.outputs.install_shop_git_enterprise_ref }}
          github_sha: ${{ github.sha }}
          github_run_number: ${{ github.run_number }}
          github_run_attempt: ${{ github.run_attempt }}
          php: ${{ matrix.php }}
          mysql: ${{ matrix.mysql }}
          is_enterprise: ${{ needs.init.outputs.install_shop_is_enterprise }}
          config_idebug: ${{ needs.init.outputs.install_shop_config_idebug }}
          output_artifact: 'configs-install_shop-${{ matrix.php }}-${{ matrix.mysql }}'
          cache_name: '${{ needs.init.outputs.install_shop_cache_prefix}}_PHP${{matrix.php}}-MYSQL${{matrix.mysql}}'
          cache_bucket: ${{ needs.init.outputs.install_shop_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}

      - name: 'Write Report'
        if: always()
        uses: OXID-eSales/github-actions/append_report@v3
        with:
          priority: '020'
          phase: install
          job: install_shop
          php: ${{matrix.php}}
          mysql: ${{matrix.mysql}}
          status: ${{job.status}}

  install_module:
    needs: ['init', 'install_shop']
    strategy:
      matrix:
        testplan: ${{ fromJSON(needs.init.outputs.install_module_matrix_testplan) }}
        php: ${{ fromJSON(needs.init.outputs.install_module_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.install_module_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.install_module_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    env:
      MATRIX_PHP: ${{ matrix.php }}
      MATRIX_MYSQL: ${{ matrix.mysql }}
      MATRIX_TESTPLAN: ${{ matrix.testplan }}
    steps:
      - name: Load cached testplan
        id: load_testplan_cache
        uses: tespkg/actions-cache@v1
        with:
          path: |
            tests/github_actions/*
          key: ${{ needs.init.outputs.init_cache_name }}
          restore-keys: ${{ needs.init.outputs.init_cache_name }}
          endpoint: ${{ secrets.CACHE_ENDPOINT }}
          accessKey: ${{ secrets.CACHE_ACCESS_KEY }}
          secretKey: ${{ secrets.CACHE_SECRET_KEY }}
          bucket: ${{ needs.init.outputs.init_cache_bucket }}

      - name: Confirm successful restore
        shell: bash
        run: |
          if [ "${{ steps.load_testplan_cache.outputs.cache-hit }}" != "true" ]; then
            echo -e "\033[0;31m### Failed to load ${{ needs.init.outputs.init_cache_name }} from cache\033[0m"
            exit 1
          fi

      - name: 'Get testplan name'
        if: ${{ matrix.testplan != 'skip' }}
        id: install_module_testplan_name
        run: |
          DEFAULT_TESTPLAN='tests/github_actions/defaults/defaults.yml,${{ inputs.testplan }}'
          if [ '${{ matrix.testplan}}' == '-' ]; then
            echo "testplan=${DEFAULT_TESTPLAN}" | tee -a "${GITHUB_OUTPUT}"
          else
            echo "testplan=${DEFAULT_TESTPLAN},${{matrix.testplan}}" | tee -a "${GITHUB_OUTPUT}"
          fi
          echo "matrix_suffix=PHP${{matrix.php}}-MYSQL${{matrix.mysql}}" | tee -a "${GITHUB_OUTPUT}"
          if [ -z '${{ secrets.enterprise_github_token }}' ]; then
            echo -e "\033[0;35mUsing enterprise github token\033[0m"
          else
            echo -e "\033[0;35mUsing default github token\033[0m"
          fi

      - name: 'Load Testplan'
        id: install_module_testplan
        if: ${{ matrix.testplan != 'skip' }}
        uses: 'joernott/load_testplan@v1'
        with:
          files: '${{steps.install_module_testplan_name.outputs.testplan}}'
          set_output: true
          set_print: true
          yaml: generated_testplan.yaml
          token: ${{ secrets.enterprise_github_token }}

      - name: 'Start shop'
        if: ${{ matrix.testplan != 'skip' }}
        uses: 'OXID-eSales/github-actions/start_shop@v3'
        with:
          # yamllint disable-line rule:line-length
          cached_shop: '${{ steps.install_module_testplan.outputs.install_module_load_shop}}_${{steps.install_module_testplan_name.outputs.matrix_suffix}}'
          cache_bucket: ${{ steps.install_module_testplan.outputs.install_module_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}
          docker_login: ${{ steps.install_module_testplan.outputs.install_module_docker_login }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Checkout module
        if: ${{ matrix.testplan != 'skip' }}
        run: |
          AUTH="oxidci:${{ secrets.enterprise_github_token || github.token }}"

          if [[ '${{ github.event_name }}' == 'pull_request' && \
                '${{github.repository}}' != 'OXID-eSales/oxideshop_ce' && \
                '${{github.repository}}' != 'OXID-eSales/oxideshop_ee' ]]; then
            echo -e "\033[0;35mHandling the pull request\033[0m"
            git clone --depth 2 \
              https://${AUTH}@github.com/${{ steps.install_module_testplan.outputs.install_module_git_module_url }}.git \
              --branch ${{ github.base_ref }} \
              --single-branch 'source/dev-packages/${{ steps.install_module_testplan.outputs.install_module_path }}'
            git -C 'source/dev-packages/${{ steps.install_module_testplan.outputs.install_module_path }}' fetch origin \
              refs/pull/${{ github.event.number }}/head:pr_${{ github.event.number }}
            git -C 'source/dev-packages/${{ steps.install_module_testplan.outputs.install_module_path }}' checkout pr_${{ github.event.number }}

          else
            git clone --depth 2 \
              https://${AUTH}@github.com/${{ steps.install_module_testplan.outputs.install_module_git_module_url }}.git \
              --branch ${{ steps.install_module_testplan.outputs.install_module_git_module_ref }} \
              --single-branch 'source/dev-packages/${{ steps.install_module_testplan.outputs.install_module_path }}'
          fi
          find . -type f >files.txt

      - name: Install module
        if: ${{ matrix.testplan != 'skip' }}
        id: install_module
        uses: 'OXID-eSales/github-actions/install_module@v3'
        with:
          container_name: ${{ steps.install_module_testplan.outputs.install_module_container_name }}
          container_options: ${{ steps.install_module_testplan.outputs.install_module_container_options }}
          container_method: ${{ steps.install_module_testplan.outputs.install_module_container_method }}
          package_name: ${{ steps.install_module_testplan.outputs.install_module_package_name }}
          module_ids: ${{ steps.install_module_testplan.outputs.install_module_ids }}
          module_path: 'dev-packages/${{ steps.install_module_testplan.outputs.install_module_path }}'
          activate: ${{ steps.install_module_testplan.outputs.install_module_activate }}
          git_module_url: ${{ steps.install_module_testplan.outputs.install_module_git_module_url }}
          git_module_ref: ${{ steps.install_module_testplan.outputs.install_module_git_module_ref }}
          output_files: ${{ steps.install_module_testplan.outputs.install_module_output_files }}
          # yamllint disable-line rule:line-length
          output_artifact: '${{steps.install_module_testplan.outputs.install_module_output_artifact_prefix}}-${{steps.install_module_testplan.outputs.install_module_ids}}-${{steps.install_module_testplan_name.outputs.matrix_suffix}}'
          enterprise_github_token: ${{ secrets.enterprise_github_token }}
          cache_name: '${{ steps.install_module_testplan.outputs.install_module_cache_prefix}}_${{steps.install_module_testplan_name.outputs.matrix_suffix}}'
          cache_bucket: ${{ steps.install_module_testplan.outputs.install_module_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}

      - name: 'Write Report'
        if: ${{ always() && matrix.testplan != 'skip' }}
        uses: OXID-eSales/github-actions/append_report@v3
        with:
          priority: '030'
          phase: install
          job: install_module
          title: ${{ steps.install_module_testplan.outputs.install_module_ids }}
          php: ${{matrix.php}}
          mysql: ${{matrix.mysql}}
          testplan: ${{matrix.testplan}}
          status: ${{job.status}}

      - name: 'Write Report'
        if: ${{ always() && matrix.testplan == 'skip' }}
        uses: OXID-eSales/github-actions/append_report@v3
        with:
          priority: '030'
          phase: install
          job: install_module
          title: 'none'
          php: ${{matrix.php}}
          mysql: ${{matrix.mysql}}
          testplan: ${{matrix.testplan}}
          status: 'skipped'

  begin_test_phase:
    needs: ['install_module']
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Write Report'
        if: always()
        uses: OXID-eSales/github-actions/append_report@v3
        with:
          header: true
          priority: '100'
          phase: test

  phpunit:
    needs: ['init', 'install_module', 'begin_test_phase']
    # yamllint disable-line rule:line-length
    if: ${{ always() && needs.init.outputs.phpunit_matrix_testplan != '' && needs.init.outputs.phpunit_matrix_testplan != 'skip' && needs.init.outputs.phpunit_matrix_testplan != 'none' && needs.install_module.result == 'success' }}
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.phpunit_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.phpunit_matrix_mysql) }}
        testplan: ${{ fromJSON(needs.init.outputs.phpunit_matrix_testplan) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.phpunit_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    env:
      MATRIX_PHP: ${{ matrix.php }}
      MATRIX_MYSQL: ${{ matrix.mysql }}
      MATRIX_TESTPLAN: ${{ matrix.testplan }}
    steps:
      - name: Load cached testplan
        id: load_testplan_cache
        uses: tespkg/actions-cache@v1
        with:
          path: |
            tests/github_actions/*
          key: ${{ needs.init.outputs.init_cache_name }}
          restore-keys: ${{ needs.init.outputs.init_cache_name }}
          endpoint: ${{ secrets.CACHE_ENDPOINT }}
          accessKey: ${{ secrets.CACHE_ACCESS_KEY }}
          secretKey: ${{ secrets.CACHE_SECRET_KEY }}
          bucket: ${{ needs.init.outputs.init_cache_bucket }}

      - name: Confirm successful restore
        shell: bash
        run: |
          if [ "${{ steps.load_testplan_cache.outputs.cache-hit }}" != "true" ]; then
            echo -e "\033[0;31m### Failed to load ${{ needs.init.outputs.init_cache_name }} from cache\033[0m"
            exit 1
          fi

      - name: 'Get testplan name'
        id: phpunit_testplan_name
        run: |
          DEFAULT_TESTPLAN='tests/github_actions/defaults/defaults.yml,${{ inputs.testplan }}'
          if [ '${{ matrix.testplan}}' == '-' ]; then
            echo "testplan=${DEFAULT_TESTPLAN}" | tee -a "${GITHUB_OUTPUT}"
          else
            echo "testplan=${DEFAULT_TESTPLAN},${{matrix.testplan}}" | tee -a "${GITHUB_OUTPUT}"
          fi
          echo "matrix_suffix=PHP${{matrix.php}}-MYSQL${{matrix.mysql}}" | tee -a "${GITHUB_OUTPUT}"

      - name: 'Load Testplan'
        id: phpunit_testplan
        uses: 'joernott/load_testplan@v1'
        with:
          files: '${{steps.phpunit_testplan_name.outputs.testplan}}'
          set_output: true
          set_print: true
          yaml: generated_testplan.yaml
          token: ${{ secrets.enterprise_github_token }}

      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v3'
        with:
          cached_shop: '${{ steps.phpunit_testplan.outputs.phpunit_load_shop}}_${{ steps.phpunit_testplan_name.outputs.matrix_suffix }}'
          cache_bucket: ${{ steps.phpunit_testplan.outputs.phpunit_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}
          docker_login: ${{ steps.phpunit_testplan.outputs.phpunit_docker_login }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: 'Run phpunit tests'
        id: phpunit_run
        uses: 'OXID-eSales/github-actions/phpunit@v3'
        with:
          container_name: ${{ steps.phpunit_testplan.outputs.phpunit_container_name }}
          container_options: ${{ steps.phpunit_testplan.outputs.phpunit_container_options }}
          container_method: ${{ steps.phpunit_testplan.outputs.phpunit_container_method }}
          configuration: ${{ steps.phpunit_testplan.outputs.phpunit_configuration }}
          test: ${{ steps.phpunit_testplan.outputs.phpunit_test }}
          additional_options: ${{ steps.phpunit_testplan.outputs.phpunit_additional_options }}
          # yamllint disable-line rule:line-length
          logfile: ${{steps.phpunit_testplan.outputs.phpunit_logfile_prefix}}-${{ steps.phpunit_testplan.outputs.phpunit_title }}-${{steps.phpunit_testplan_name.outputs.matrix_suffix}}.txt
          logfile_artifact: ${{ steps.phpunit_testplan.outputs.phpunit_logfile_artifact }}
          output_files: ${{ steps.phpunit_testplan.outputs.phpunit_output_files }}
          output_artifact: ${{steps.phpunit_testplan.outputs.phpunit_output_prefix}}_${{steps.phpunit_testplan_name.outputs.matrix_suffix}}
          coverage_path: ${{ steps.phpunit_testplan.outputs.phpunit_coverage_path }}
          coverage_artifact: ${{ steps.phpunit_testplan.outputs.phpunit_coverage_prefix }}_${{steps.phpunit_testplan_name.outputs.matrix_suffix}}
          failure_pattern: ${{ steps.phpunit_testplan.outputs.phpunit_failure_pattern }}

      - name: 'Stop shop'
        uses: 'OXID-eSales/github-actions/stop_shop@v3'

      - name: 'Write Report'
        if: always()
        uses: OXID-eSales/github-actions/append_report@v3
        with:
          priority: '110'
          phase: test
          job: phpunit
          title: ${{ steps.phpunit_testplan.outputs.phpunit_title }}
          php: ${{matrix.php}}
          mysql: ${{matrix.mysql}}
          testplan: ${{matrix.testplan}}
          status: ${{job.status}}

  codeception:
    needs: ['init', 'install_module', 'begin_test_phase']
    # yamllint disable-line rule:line-length
    if: ${{ always() && needs.init.outputs.codeception_matrix_testplan != '' && needs.init.outputs.codeception_matrix_testplan != 'none' && needs.init.outputs.codeception_matrix_testplan != 'skip' && needs.install_module.result == 'success' }}
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.codeception_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.codeception_matrix_mysql) }}
        testplan: ${{ fromJSON(needs.init.outputs.codeception_matrix_testplan) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.codeception_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    env:
      MATRIX_PHP: ${{ matrix.php }}
      MATRIX_MYSQL: ${{ matrix.mysql }}
      MATRIX_TESTPLAN: ${{ matrix.testplan }}
    steps:
      - name: Load cached testplan
        id: load_testplan_cache
        uses: tespkg/actions-cache@v1
        with:
          path: |
            tests/github_actions/*
          key: ${{ needs.init.outputs.init_cache_name }}
          restore-keys: ${{ needs.init.outputs.init_cache_name }}
          endpoint: ${{ secrets.CACHE_ENDPOINT }}
          accessKey: ${{ secrets.CACHE_ACCESS_KEY }}
          secretKey: ${{ secrets.CACHE_SECRET_KEY }}
          bucket: ${{ needs.init.outputs.init_cache_bucket }}

      - name: Confirm successful restore
        shell: bash
        run: |
          if [ "${{ steps.load_testplan_cache.outputs.cache-hit }}" != "true" ]; then
            echo -e "\033[0;31m### Failed to load ${{ needs.init.outputs.init_cache_name }} from cache\033[0m"
            exit 1
          fi

      - name: 'Get testplan name'
        id: codeception_testplan_name
        run: |
          DEFAULT_TESTPLAN='tests/github_actions/defaults/defaults.yml,${{ inputs.testplan }}'
          if [ '${{ matrix.testplan}}' == '-' ]; then
            echo "testplan=${DEFAULT_TESTPLAN}" | tee -a "${GITHUB_OUTPUT}"
          else
            echo "testplan=${DEFAULT_TESTPLAN},${{matrix.testplan}}" | tee -a "${GITHUB_OUTPUT}"
          fi
          echo "matrix_suffix=PHP${{matrix.php}}-MYSQL${{matrix.mysql}}" | tee -a "${GITHUB_OUTPUT}"

      - name: 'Load Testplan'
        id: codeception_testplan
        uses: 'joernott/load_testplan@v1'
        with:
          files: '${{steps.codeception_testplan_name.outputs.testplan}}'
          set_output: true
          set_env: true
          set_print: true
          yaml: generated_testplan.yaml
          token: ${{ secrets.enterprise_github_token }}

      - name: Run pre-script
        id: pre_script
        shell: bash
        run: |
          ${{ steps.codeception_testplan.outputs.codeception_pre_script }}

      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v3'
        with:
          cached_shop: '${{ steps.codeception_testplan.outputs.codeception_load_shop}}_${{ steps.codeception_testplan_name.outputs.matrix_suffix }}'
          cache_bucket: ${{ steps.codeception_testplan.outputs.codeception_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}
          docker_login: ${{ steps.codeception_testplan.outputs.codeception_docker_login }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: 'Composer configure and require ${{ steps.codeception_testplan.outputs.codeception_composer_configure_install }}'
        if: ${{ steps.codeception_testplan.outputs.codeception_composer_configure_install != '' }}
        uses: 'OXID-eSales/github-actions/composer_configure@v3'
        with:
          container_name: ${{ steps.codeception_testplan.outputs.codeception_container_name }}
          container_options: '${{ steps.codeception_testplan.outputs.codeception_container_options }} ${{ steps.pre_script.outputs.container_options }}'
          container_method: 'exec'
          organisation: ${{ steps.codeception_testplan.outputs.codeception_composer_configure_organisation }}
          repositories: ${{ steps.codeception_testplan.outputs.codeception_composer_configure_install }}
          ref: ${{ steps.codeception_testplan.outputs.codeception_composer_configure_ref }}
          options: ${{ steps.codeception_testplan.outputs.codeception_composer_configure_options }}
          update: ${{ steps.codeception_testplan.outputs.codeception_composer_configure_update }}
          update_options: ${{ steps.codeception_testplan.outputs.codeception_composer_configure_update_options }}
          enterprise_github_token: ${{ secrets.enterprise_github_token }}

      - name: 'Composer require ${{ steps.codeception_testplan.outputs.codeception_composer_require_install }}'
        if: ${{ steps.codeception_testplan.outputs.codeception_composer_require_install != '' }}
        uses: 'OXID-eSales/github-actions/composer_require@v3'
        with:
          container_name: ${{ steps.codeception_testplan.outputs.codeception_container_name }}
          container_options: '${{ steps.codeception_testplan.outputs.codeception_container_options }} ${{ steps.pre_script.outputs.container_options }}'
          container_method: 'exec'
          organisation: ${{ steps.codeception_testplan.outputs.codeception_composer_require_organisation }}
          repositories: ${{ steps.codeception_testplan.outputs.codeception_composer_require_install }}
          ref: ${{ steps.codeception_testplan.outputs.codeception_composer_require_ref }}
          options: ${{ steps.codeception_testplan.outputs.codeception_composer_require_options }}
          update: ${{ steps.codeception_testplan.outputs.codeception_composer_require_update }}
          update_options: ${{ steps.codeception_testplan.outputs.codeception_composer_require_update_options }}

      - name: 'Run codeception tests'
        id: codeception_run
        uses: 'OXID-eSales/github-actions/codeception@v3'
        with:
          container_name: ${{ steps.codeception_testplan.outputs.codeception_container_name }}
          container_options: '${{ steps.codeception_testplan.outputs.codeception_container_options }} ${{ steps.pre_script.outputs.container_options }}'
          container_method: ${{ steps.codeception_testplan.outputs.codeception_container_method }}
          build: ${{ steps.codeception_testplan.outputs.codeception_build }}
          configuration: ${{ steps.codeception_testplan.outputs.codeception_configuration }}
          suite: ${{ steps.codeception_testplan.outputs.codeception_suite }}
          test: ${{ steps.codeception_testplan.outputs.codeception_test }}
          additional_options: ${{ steps.codeception_testplan.outputs.codeception_additional_options }}
          # yamllint disable-line rule:line-length
          logfile: ${{steps.codeception_testplan.outputs.codeception_logfile_prefix}}-${{steps.codeception_testplan.outputs.codeception_title}}-${{steps.codeception_testplan_name.outputs.matrix_suffix}}.txt
          logfile_artifact: ${{ steps.codeception_testplan.outputs.codeception_logfile_artifact }}
          output_files: ${{ steps.codeception_testplan.outputs.codeception_output_files }}
          output_artifact: ${{steps.codeception_testplan.outputs.codeception_output_prefix}}_${{steps.codeception_testplan_name.outputs.matrix_suffix}}
          coverage_path: ${{ steps.codeception_testplan.outputs.codeception_coverage_path }}
          coverage_artifact: ${{ steps.codeception_testplan.outputs.codeception_coverage_prefix }}_${{steps.codeception_testplan_name.outputs.matrix_suffix}}
          failure_pattern: ${{ steps.codeception_testplan.outputs.codeception_failure_pattern }}

      - name: 'Stop shop'
        uses: 'OXID-eSales/github-actions/stop_shop@v3'

      - name: 'Write Report'
        if: always()
        uses: OXID-eSales/github-actions/append_report@v3
        with:
          priority: '120'
          phase: test
          job: codeception
          title: ${{ steps.codeception_testplan.outputs.codeception_title }}
          php: ${{matrix.php}}
          mysql: ${{matrix.mysql}}
          testplan: ${{matrix.testplan}}
          status: ${{job.status}}

  runtest:
    needs: ['init', 'install_module', 'begin_test_phase']
    # yamllint disable-line rule:line-length
    if: ${{ always() && needs.init.outputs.runtest_matrix_testplan != '' && needs.init.outputs.runtest_matrix_testplan != 'none' && needs.init.outputs.runtest_matrix_testplan != 'skip' && needs.install_module.result == 'success' }}
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.runtest_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.runtest_matrix_mysql) }}
        testplan: ${{ fromJSON(needs.init.outputs.runtest_matrix_testplan) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.runtest_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    env:
      MATRIX_PHP: ${{ matrix.php }}
      MATRIX_MYSQL: ${{ matrix.mysql }}
      MATRIX_TESTPLAN: ${{ matrix.testplan }}
    steps:
      - name: Load cached testplan
        id: load_testplan_cache
        uses: tespkg/actions-cache@v1
        with:
          path: |
            tests/github_actions/*
          key: ${{ needs.init.outputs.init_cache_name }}
          restore-keys: ${{ needs.init.outputs.init_cache_name }}
          endpoint: ${{ secrets.CACHE_ENDPOINT }}
          accessKey: ${{ secrets.CACHE_ACCESS_KEY }}
          secretKey: ${{ secrets.CACHE_SECRET_KEY }}
          bucket: ${{ needs.init.outputs.init_cache_bucket }}

      - name: Confirm successful restore
        shell: bash
        run: |
          if [ "${{ steps.load_testplan_cache.outputs.cache-hit }}" != "true" ]; then
            echo -e "\033[0;31m### Failed to load ${{ needs.init.outputs.init_cache_name }} from cache\033[0m"
            exit 1
          fi

      - name: 'Get testplan name'
        id: runtest_testplan_name
        run: |
          DEFAULT_TESTPLAN='tests/github_actions/defaults/defaults.yml,${{ inputs.testplan }}'
          if [ '${{ matrix.testplan}}' == '-' ]; then
            echo "testplan=${DEFAULT_TESTPLAN}" | tee -a "${GITHUB_OUTPUT}"
          else
            echo "testplan=${DEFAULT_TESTPLAN},${{matrix.testplan}}" | tee -a "${GITHUB_OUTPUT}"
          fi
          echo "matrix_suffix=PHP${{matrix.php}}-MYSQL${{matrix.mysql}}" | tee -a "${GITHUB_OUTPUT}"

      - name: 'Load Testplan'
        id: runtest_testplan
        uses: 'joernott/load_testplan@v1'
        with:
          files: '${{steps.runtest_testplan_name.outputs.testplan}}'
          set_output: true
          set_print: true
          yaml: generated_testplan.yaml
          token: ${{ secrets.enterprise_github_token }}

      - name: Set swap space
        if: ${{ inputs.runs_on == '"ubuntu-latest"' }}
        uses: actionhippie/swap-space@v1
        with:
          size: 10G
          path: swapfile

      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v3'
        with:
          cached_shop: '${{ steps.runtest_testplan.outputs.runtest_load_shop}}_${{ steps.runtest_testplan_name.outputs.matrix_suffix }}'
          cache_bucket: ${{ steps.runtest_testplan.outputs.runtest_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}
          docker_login: ${{ steps.runtest_testplan.outputs.runtest_docker_login }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: 'Composer configure and require ${{ steps.runtest_testplan.outputs.runtest_composer_configure_install }}'
        if: ${{ steps.runtest_testplan.outputs.runtest_composer_configure_install != '' }}
        uses: 'OXID-eSales/github-actions/composer_configure@v3'
        with:
          container_name: ${{ steps.runtest_testplan.outputs.runtest_container_name }}
          container_options: ${{ steps.runtest_testplan.outputs.runtest_container_options }}
          container_method: 'exec'
          organisation: ${{ steps.runtest_testplan.outputs.runtest_composer_configure_organisation }}
          repositories: ${{ steps.runtest_testplan.outputs.runtest_composer_configure_install }}
          ref: ${{ steps.runtest_testplan.outputs.runtest_composer_configure_ref }}
          options: ${{ steps.runtest_testplan.outputs.runtest_composer_configure_options }}
          update: ${{ steps.runtest_testplan.outputs.runtest_composer_configure_update }}
          update_options: ${{ steps.runtest_testplan.outputs.runtest_composer_configure_update_options }}
          enterprise_github_token: ${{ secrets.enterprise_github_token }}

      - name: 'Composer require ${{ steps.runtest_testplan.outputs.runtest_composer_require_install }}'
        if: ${{ steps.runtest_testplan.outputs.runtest_composer_require_install != '' }}
        uses: 'OXID-eSales/github-actions/composer_require@v3'
        with:
          container_name: ${{ steps.runtest_testplan.outputs.runtest_container_name }}
          container_options: ${{ steps.runtest_testplan.outputs.runtest_container_options }}
          container_method: 'exec'
          organisation: ${{ steps.runtest_testplan.outputs.runtest_composer_require_organisation }}
          repositories: ${{ steps.runtest_testplan.outputs.runtest_composer_require_install }}
          ref: ${{ steps.runtest_testplan.outputs.runtest_composer_require_ref }}
          options: ${{ steps.runtest_testplan.outputs.runtest_composer_require_options }}
          update: ${{ steps.runtest_testplan.outputs.runtest_composer_require_update }}
          update_options: ${{ steps.runtest_testplan.outputs.runtest_composer_require_update_options }}

      - name: Copy config file
        run: cp source/vendor/oxid-esales/testing-library/test_config.yml.dist source/test_config.yml

      - name: 'Run tests'
        id: runtest_run
        uses: 'OXID-eSales/github-actions/runtests@v3'
        with:
          container_name: ${{ steps.runtest_testplan.outputs.runtest_container_name }}
          container_options: ${{ steps.runtest_testplan.outputs.runtest_container_options }}
          container_method: ${{ steps.runtest_testplan.outputs.runtest_container_method }}
          test: ${{ steps.runtest_testplan.outputs.runtest_test }}
          additional_options: ${{ steps.runtest_testplan.outputs.runtest_additional_options }}
          # yamllint disable-line rule:line-length
          logfile: ${{ steps.runtest_testplan.outputs.runtest_logfile_prefix}}-${{ steps.runtest_testplan.outputs.runtest_title}}-${{ steps.runtest_testplan_name.outputs.matrix_suffix }}.txt
          logfile_artifact: ${{ steps.runtest_testplan.outputs.runtest_logfile_artifact }}
          output_files: ${{ steps.runtest_testplan.outputs.runtest_output_files }}
          output_artifact: ${{ steps.runtest_testplan.outputs.runtest_output_prefix }}_${{ steps.runtest_testplan_name.outputs.matrix_suffix }}
          coverage_path: ${{ steps.runtest_testplan.outputs.runtest_coverage_path }}
          coverage_artifact: ${{ steps.runtest_testplan.outputs.runtest_coverage_prefix }}_${{ steps.runtest_testplan_name.outputs.matrix_suffix }}
          failure_pattern: ${{ steps.runtest_testplan.outputs.runtest_failure_pattern }}

      - name: 'Stop shop'
        uses: 'OXID-eSales/github-actions/stop_shop@v3'

      - name: 'Write Report'
        if: always()
        uses: OXID-eSales/github-actions/append_report@v3
        with:
          priority: '130'
          phase: test
          job: runtest
          title: ${{ steps.runtest_testplan.outputs.runtest_title }}
          php: ${{matrix.php}}
          mysql: ${{matrix.mysql}}
          testplan: ${{matrix.testplan}}
          status: ${{job.status}}

  begin_report_phase:
    needs: ['install_module']
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Write Report'
        if: always()
        uses: OXID-eSales/github-actions/append_report@v3
        with:
          header: true
          priority: '200'
          phase: report

  sonarcloud:
    needs: ['init', 'install_module', 'phpunit', 'codeception', 'begin_report_phase']
    # yamllint disable-line rule:line-length
    if: ${{ always() && needs.init.outputs.sonarcloud_matrix_testplan != '' && needs.init.outputs.sonarcloud_matrix_testplan != 'none' && needs.init.outputs.sonarcloud_matrix_testplan != 'skip' && needs.install_module.result == 'success' }}
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.sonarcloud_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.sonarcloud_matrix_mysql) }}
        testplan: ${{ fromJSON(needs.init.outputs.sonarcloud_matrix_testplan) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.sonarcloud_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    env:
      MATRIX_PHP: ${{ matrix.php }}
      MATRIX_MYSQL: ${{ matrix.mysql }}
      MATRIX_TESTPLAN: ${{ matrix.testplan }}
    steps:
      - name: Load cached testplan
        id: load_testplan_cache
        uses: tespkg/actions-cache@v1
        with:
          path: |
            tests/github_actions/*
          key: ${{ needs.init.outputs.init_cache_name }}
          restore-keys: ${{ needs.init.outputs.init_cache_name }}
          endpoint: ${{ secrets.CACHE_ENDPOINT }}
          accessKey: ${{ secrets.CACHE_ACCESS_KEY }}
          secretKey: ${{ secrets.CACHE_SECRET_KEY }}
          bucket: ${{ needs.init.outputs.init_cache_bucket }}

      - name: Confirm successful restore
        shell: bash
        run: |
          if [ "${{ steps.load_testplan_cache.outputs.cache-hit }}" != "true" ]; then
            echo -e "\033[0;31m### Failed to load ${{ needs.init.outputs.init_cache_name }} from cache\033[0m"
            exit 1
          fi

      - name: 'Get testplan name'
        id: sonarcloud_testplan_name
        run: |
          DEFAULT_TESTPLAN='tests/github_actions/defaults/defaults.yml,${{ inputs.testplan }}'
          if [ '${{ matrix.testplan}}' == '-' ]; then
            echo "testplan=${DEFAULT_TESTPLAN}" | tee -a "${GITHUB_OUTPUT}"
          else
            echo "testplan=${DEFAULT_TESTPLAN},${{matrix.testplan}}" | tee -a "${GITHUB_OUTPUT}"
          fi
          echo "matrix_suffix=PHP${{matrix.php}}-MYSQL${{matrix.mysql}}" | tee -a "${GITHUB_OUTPUT}"

      - name: 'Load Testplan'
        id: sonarcloud_testplan
        uses: 'joernott/load_testplan@v1'
        with:
          files: '${{steps.sonarcloud_testplan_name.outputs.testplan}}'
          set_output: true
          set_print: true
          yaml: generated_testplan.yaml
          token: ${{ secrets.enterprise_github_token }}

      - name: Checkout shop
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'SonarCloud Scan'
        uses: 'OXID-eSales/github-actions/sonarcloud@v3'
        with:
          coverage_artifact: coverage-reports_${{ steps.sonarcloud_testplan_name.outputs.matrix_suffix }}
          target_branch: ${{ steps.sonarcloud_testplan.outputs.sonarcloud_target_branch }}
          github_ref_name: ${{ github.ref_name }}
          sonarcloud_organization: ${{ steps.sonarcloud_testplan.outputs.sonarcloud_organization }}
          sonarcloud_project_key: ${{ steps.sonarcloud_testplan.outputs.sonarcloud_project_key }}
          sonarcloud_project_name: ${{ steps.sonarcloud_testplan.outputs.sonarcloud_project_name }}
          sonarcloud_parameters: ${{ steps.sonarcloud_testplan.outputs.sonarcloud_parameters }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          github_token: ${{ github.token }}

      - name: 'Write Report'
        if: always()
        uses: OXID-eSales/github-actions/append_report@v3
        with:
          priority: '210'
          phase: report
          job: sonarcloud
          title: ${{ steps.sonarcloud_testplan.outputs.sonarcloud_title }}
          php: ${{matrix.php}}
          mysql: ${{matrix.mysql}}
          testplan: ${{matrix.testplan}}
          status: ${{job.status}}

  phpcs_tests:
    needs: ['init', 'install_module', 'begin_report_phase']
    if: ${{ always() && needs.init.outputs.phpcs_tests_skip != 'true' && needs.install_module.result == 'success' }}
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.phpcs_tests_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.phpcs_tests_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.phpcs_tests_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v3'
        with:
          cached_shop: '${{ needs.init.outputs.install_module_cache_prefix}}_PHP${{matrix.php}}-MYSQL${{matrix.mysql}}'
          cache_bucket: ${{ needs.init.outputs.phpcs_tests_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}
          docker_login: ${{ needs.init.outputs.phpcs_tests_docker_login }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: 'Run phpcs tests'
        uses: 'OXID-eSales/github-actions/phpcs@v3'
        with:
          container_name: ${{ needs.init.outputs.phpcs_tests_container_name }}
          container_options: ${{ needs.init.outputs.phpcs_tests_container_options }}
          container_method: ${{ needs.init.outputs.phpcs_tests_container_method }}
          git_ref: ${{ needs.init.outputs.phpcs_tests_git_ref }}
          diff_only: ${{ needs.init.outputs.phpcs_tests_diff_only}}
          filter: ${{ needs.init.outputs.phpcs_tests_filter}}
          additional_options: ${{ needs.init.outputs.phpcs_tests_additional_options }}
          logfile: phpcs-PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_codesniff_log.txt
          logfile_artifact: ${{ needs.init.outputs.phpcs_tests_logfile_artifact }}
          failure_pattern: ${{ needs.init.outputs.phpcs_tests_failure_pattern }}

      - name: 'Stop shop'
        uses: 'OXID-eSales/github-actions/stop_shop@v3'

      - name: 'Write Report'
        if: always()
        uses: OXID-eSales/github-actions/append_report@v3
        with:
          priority: '220'
          phase: report
          job: phpcs
          title: 'default'
          php: ${{matrix.php}}
          mysql: ${{matrix.mysql}}
          status: ${{job.status}}

  styles:
    needs: ['init', 'install_module', 'begin_report_phase']
    if: ${{ needs.init.outputs.styles_matrix_testplan != 'skip' }}
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.styles_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.styles_matrix_mysql) }}
        testplan: ${{ fromJSON(needs.init.outputs.styles_matrix_testplan) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.styles_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    env:
      MATRIX_PHP: ${{ matrix.php }}
      MATRIX_MYSQL: ${{ matrix.mysql }}
      MATRIX_TESTPLAN: ${{ matrix.testplan }}
    steps:
      - name: Load cached testplan
        id: load_testplan_cache
        uses: tespkg/actions-cache@v1
        with:
          path: |
            tests/github_actions/*
          key: ${{ needs.init.outputs.init_cache_name }}
          restore-keys: ${{ needs.init.outputs.init_cache_name }}
          endpoint: ${{ secrets.CACHE_ENDPOINT }}
          accessKey: ${{ secrets.CACHE_ACCESS_KEY }}
          secretKey: ${{ secrets.CACHE_SECRET_KEY }}
          bucket: ${{ needs.init.outputs.init_cache_bucket }}

      - name: Confirm successful restore
        shell: bash
        run: |
          if [ "${{ steps.load_testplan_cache.outputs.cache-hit }}" != "true" ]; then
            echo -e "\033[0;31m### Failed to load ${{ needs.init.outputs.init_cache_name }} from cache\033[0m"
            exit 1
          fi

      - name: 'Get testplan name'
        id: styles_testplan_name
        run: |
          DEFAULT_TESTPLAN='tests/github_actions/defaults/defaults.yml,${{ inputs.testplan }}'
          if [ '${{ matrix.testplan}}' == '-' ]; then
            echo "testplan=${DEFAULT_TESTPLAN}" | tee -a "${GITHUB_OUTPUT}"
          else
            echo "testplan=${DEFAULT_TESTPLAN},${{matrix.testplan}}" | tee -a "${GITHUB_OUTPUT}"
          fi
          echo "matrix_suffix=PHP${{matrix.php}}-MYSQL${{matrix.mysql}}" | tee -a "${GITHUB_OUTPUT}"

      - name: 'Load Testplan'
        id: styles_testplan
        uses: 'joernott/load_testplan@v1'
        with:
          files: '${{steps.styles_testplan_name.outputs.testplan}}'
          set_output: true
          set_print: true
          yaml: generated_testplan.yaml
          token: ${{ secrets.enterprise_github_token }}

      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v3'
        with:
          cached_shop: '${{ steps.styles_testplan.outputs.styles_load_shop}}_PHP${{matrix.php}}-MYSQL${{matrix.mysql}}'
          cache_bucket: ${{ steps.styles_testplan.outputs.styles_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}
          docker_login: ${{ steps.styles_testplan.outputs.styles_docker_login }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: 'Run styles check'
        uses: 'OXID-eSales/github-actions/styles@v3'
        with:
          path: ${{ steps.styles_testplan.outputs.styles_path }}
          module_ids: ${{ steps.styles_testplan.outputs.styles_module_ids }}
          install_options: ${{ steps.styles_testplan.outputs.styles_install_options }}
          container_name: ${{ steps.styles_testplan.outputs.styles_container_name }}
          container_options: ${{ steps.styles_testplan.outputs.styles_container_options }}
          container_method: ${{ steps.styles_testplan.outputs.styles_container_method }}
          output_files: ${{ steps.styles_testplan.outputs.styles_output_files }}
          output_artifact: ${{ steps.styles_testplan.outputs.styles_output_prefix}}_PHP${{ matrix.php }}

      - name: 'Stop shop'
        uses: 'OXID-eSales/github-actions/stop_shop@v3'

      - name: 'Write Report'
        if: always()
        uses: OXID-eSales/github-actions/append_report@v3
        with:
          priority: '230'
          phase: report
          job: styles
          title: 'default'
          php: ${{matrix.php}}
          mysql: ${{matrix.mysql}}
          status: ${{job.status}}

  finish:
    if: ${{ always() && needs.init.outputs.finish_skip != 'true' }}
    needs:
      - init
      - prepare_shop
      - install_shop
      - install_module
      - phpunit
      - codeception
      - runtest
      - sonarcloud
      - phpcs_tests
      - styles
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    env:
      SLACK_WEBHOOK: "${{ secrets.SLACK_WEBHOOK_URL }}"
    steps:
      - name: 'Download job results'
        uses: actions/download-artifact@v4
        with:
          name: testplan

      - name: 'Generate report'
        id: generate_report
        uses: 'OXID-eSales/github-actions/generate_report@v3'
        with:
          slack_webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          title: '${{ needs.init.outputs.finish_slack_title }}'

      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Install s3cmd and gh
        run: |
          GH=$(type -p 'gh'||true)
          if [ -z "${GH}" ]; then
            echo -e "\033[0;35m###  Installing gh ###\033[0m"
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo DEBIAN_FRONTEND=noninteractive apt-get -qq update
            sudo apt-get -qq install gh
          fi
          sudo DEBIAN_FRONTEND=noninteractive apt-get -qq install s3cmd
          RUNS_ON='${{ inputs.runs_on }}'
          if [[ "${RUNS_ON}" != *"ubuntu" ]]; then
            cat >/home/runner/.s3cfg <<EOF
            [default]
            check_ssl_certificate = False
            check_ssl_hostname = False
            host_base = ${{secrets.CACHE_ENDPOINT}}
            host_bucket = %(bucket)s.${{secrets.CACHE_ENDPOINT}}
            access_key = ${{ secrets.CACHE_ACCESS_KEY}}
            secret_key = ${{ secrets.CACHE_SECRET_KEY }}
          EOF
            chmod 0600 /home/runner/.s3cfg
          fi

      - name: Cleanup cached github objects
        if: ${{ steps.generate_report.outputs.overall_status == 'success' }}
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        # yamllint disable rule:line-length
        run: |
          GH=$(type -p 'gh'||true)
          if [ -n "${GH}" ]; then
            ${GH} extension install actions/gh-actions-cache
            # yamllint disable-line rule:line-length
            for CACHE in '${{ needs.init.outputs.init_cache_name }}' '${{ needs.init.outputs.prepare_shop_cache_prefix }}' '${{ needs.init.outputs.install_shop_cache_prefix }}' '${{ needs.init.outputs.install_module_cache_prefix }}'; do
              ID_LIST="$(${GH} actions-cache list --key ${CACHE}|awk '{print $1}')"
              for ID in ${ID_LIST}; do
              echo -e "\033[0;35m###  Cleaning cached object '${ID}' from github ###\033[0m"
                ${GH} actions-cache delete "${ID}" --confirm
              done
            done
          fi

      - name: s3cmd ls
        if: ${{ inputs.runs_on != '"ubuntu-latest"' }}
        run: |
          # yamllint disable-line rule:line-length
          OUTPUT=$(s3cmd ls -r s3://oxideshop-ee|grep '${{ needs.init.outputs.init_cache_name }}|${{ needs.init.outputs.prepare_shop_cache_prefix }}|${{ needs.init.outputs.install_shop_cache_prefix }}|${{ needs.init.outputs.install_module_cache_prefix }}')
          export IFS=''
          echo "${OUTPUT}" | while read -r LINE ; do
            FILE=$(echo "${LINE}"|awk '{print $4}')
            echo -e "\033[0;35m###  Cleaning cached object '${FILE}' from s3 cache ###\033[0m"
            s3cmd del "${FILE}"
          done
