name: call-test_matrix
# Full test matrix for oxidshop_ce and oxidshop_ee
# This matrix runs the following jobs:
# - output parameters
# - prepare shop and cache it as preparedShop_<edition>-<ref>-<php_version>-<mysql_version>-<commit_sha>-<run>-<attempt>
# - install shop based on the prepared shop and cache it as shopInstallation_<edition>-<ref>-<php_version>-<mysql_version>-<commit_sha>-<run>-<attempt>
# - run unit tests using the cached shopInstallation
# - run integration tests  using the cached shopInstallation
# - run codeception tests  using the cached shopInstallation
# - run shop setup tests using the cached preparedShop
#
on:
  workflow_call:
    inputs:
      runs_on:
        type: string
        description: 'Runner for this workflow'
        required: false
        default: 'ubuntu-latest'
      git_sdk_url:
        type: string
        description: 'URL for the docker-eshop sdk repo to clone'
        required: false
        default: 'https://github.com/OXID-eSales/docker-eshop-sdk.git'
      git_sdk_ref:
        type: string
        description: 'Branch, tag or hash of the commit to check out'
        required: false
        default: 'master'
      git_shop_url:
        type: string
        description: 'URL for the oxidshop_ce repository'
        required: false
        default: 'https://github.com/OXID-eSales/oxideshop_ce.git'
      git_shop_ref:
        type: string
        description: 'Branch, tag or hash of the commit to check out'
        required: true
        default: ${{ github.ref_name }}
      git_enterprise_ref:
        type: string
        description: 'Branch to check out for the enterprise repos'
        required: false
      github_event_name:
        type: string
        description: 'Name of the github event (github.event_name), used to handle pull requests'
        required: false
        default: ${{ github.event_name }}
      github_event_number:
        type: string
        description: 'Number of the github event (github.event_number), used to handle pull requests'
        required: false
      github_base_ref:
        type: string
        description: 'Base reference (github.base_ref) for testing the github pull request'
        required: false
        default: ${{ github.base_ref }}
      github_sha:
        type: string
        required: false
        description: 'github.sha is used in generating the cache id'
        default: ${{ github.sha }}
      github_run_number:
        type: string
        required: false
        description: 'github.run_number and github.run_attempts are used in generating the cache id (tbd)'
      github_run_attempt:
        type: string
        required: false
        description: 'github.run_number and github.run_attempts are used in generating the cache id (tbd)'
      php:
        type: string
        required: false
        description: 'Version of PHP for this instance'
        default: '["8.1","8.2"]'
      mysql:
        type: string
        required: false
        description: 'Version of MySQL for this instance'
        default: '["5.7","8.0"]'
      is_enterprise:
        type: boolean
        required: false
        description: 'This action can be used on the community edition (ce) and enterprise edition (ee) of the shop. On top of setting this to true, a few extra variables/secrets must be provided for using the action on ee.'
        default: false
      enterprise_github_token:
        type: string
        required: false
        description: 'OAuth token to access enterprise repos'
        default: ''
    secrets:
      DOCKER_HUB_USER:
        description: 'user for the docker login'
        required: false
      DOCKER_HUB_TOKEN:
        description: 'Token for the docker login'
        required: false
      CACHE_ENDPOINT:
        description: 'Endpoint for tespkg/actions-cache@v1'
        required: false # only for ee
      CACHE_ACCESS_KEY:
        description: 'Access key for tespkg/actions-cache@v1'
        required: false # only for ee
      CACHE_SECRET_KEY:
        description: 'Secret key for tespkg/actions-cache@v1'
        required: false # only for ee
      enterprise_github_token:
        required: false
        description: 'OAuth token to access enterprise repos'
  
jobs:
  init:
    runs-on: ${{ inputs.runs_on }}
    steps:
      - name: 'Initialize'
        run: |
          DOCKER_LOGIN="false"
          [ -n "${{ secrets.DOCKER_HUB_TOKEN }}" ] && DOCKER_LOGIN="true"

          cat <<EOF
          Running matrix with the following inputs:
          ************************************************************
          git_sdk_url=${{ inputs.git_sdk_url }}
          git_sdk_ref=${{ inputs.git_sdk_ref }}
          git_shop_url=${{ inputs.git_shop_url }}
          git_shop_ref=${{ inputs.git_shop_ref }}|${{ github.ref_name }}
          git_enterprise_ref=${{ inputs.git_enterprise_ref }}
          github_event_name=${{ inputs.github_event_name }}|${{ github.event_name }}
          github_event_number=${{ inputs.github_event_number }}|${{ github.event_number }}
          github_base_ref=${{ inputs.github_base_ref }}|${{ github.base_ref }}
          github_sha=${{ inputs.github_sha }}|${{ github.sha }}
          github_run_number=${{ inputs.github_run_number }}|${{ github.run_number }}
          github_run_attempt=${{ inputs.github_run_attempt }}|${{ github.run_attempt }}
          php=${{ inputs.php }}
          mysql=${{ inputs.mysql }}
          is_enterprise=${{ inputs.is_enterprise }}
          docker_hub_user=${{ secrets.DOCKER_HUB_USER }}
          docker_hub_token=${{ secrets.DOCKER_HUB_TOKEN }}
          enterprise_github_token=${{ secrets.enterprise_github_token }}
          cache_endpoint=${{ secrets.CACHE_ENDPOINT }}
          cache_access_key=${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key=${{ secrets.CACHE_SECRET_KEY }}
          DOCKER_LOGIN=$DOCKER_LOGIN
          ************************************************************
          EOF
          echo "DOCKER_LOGIN=$DOCKER_LOGIN" >>$GITHUB_ENV

      - name: Login to Docker Hub
        if: ${{ env.DOCKER_LOGIN == 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

  prepare_shop:
    strategy:
      matrix:
        php: ${{ fromJSON(inputs.php) }}
        mysql: ${{ fromJSON(inputs.mysql) }}
      fail-fast: false
    needs: init
    runs-on: ${{ inputs.runs_on }}
    outputs:
      prepared_shop: ${{ steps.prepare_shop.outputs.prepared_shop }}
    steps:
      - name: 'Cleanup (pre)'
        uses: 'OXID-eSales/github-actions/cleanup_workspace@v0'

      - name: 'Prepare Shop'
        id: prepare_shop
        uses: 'OXID-eSales/github-actions/prepare_shop@v0'
        with:
          git_sdk_url: ${{ inputs.git_sdk_url }}
          git_sdk_ref: ${{ inputs.git_sdk_ref }}
          git_shop_url: ${{ inputs.git_shop_url }}
          git_shop_ref: ${{ inputs.git_shop_ref }}
          git_enterprise_ref: ${{ inputs.git_enterprise_ref }}
          github_event_name: ${{ github.event_name }}
          github_event_number: ${{ inputs.github_event_number }}
          github_base_ref: ${{ inputs.github_base_ref }}
          github_sha: ${{ inputs.github_sha }}
          github_run_number: ${{ inputs.github_run_number }}
          github_run_attempt: ${{ inputs.github_run_attempt }}
          php: ${{ matrix.php }}
          mysql: ${{ matrix.mysql }}
          is_enterprise: ${{ inputs.is_enterprise }}
          enterprise_github_token: ${{ secrets.enterprise_github_token }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}

  install_shop:
    strategy:
      matrix:
        php: ${{ fromJSON(inputs.php) }}
        mysql: ${{ fromJSON(inputs.mysql) }}
      fail-fast: false
    needs: [ prepare_shop ]
    runs-on: ${{ inputs.runs_on }}
    outputs:
      installed_shop: ${{ steps.install_shop.outputs.installed_shop }}
    steps:
      - name: 'Cleanup (pre)'
        uses: 'OXID-eSales/github-actions/cleanup_workspace@v0'

      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v0'
        with:
          cached_shop: ${{ needs.prepare_shop.outputs.prepared_shop }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}        

      - name: 'Install shop'
        id: install_shop
        uses: 'OXID-eSales/github-actions/install_shop@v0'
        with:
          git_shop_ref: ${{ inputs.git_shop_ref }}
          git_enterprise_ref: ${{ inputs.git_enterprise_ref }}
          github_sha: ${{ inputs.github_sha }}
          github_run_number: ${{ inputs.github_run_number }}
          github_run_attempt: ${{ inputs.github_run_attempt }}
          php: ${{ matrix.php }}
          mysql: ${{ matrix.mysql }}
          is_enterprise: ${{ inputs.is_enterprise }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}

      - name: 'Debug cached name'
        run: |
          echo "is: ${{ steps.install_shop.outputs.installed_shop }}"

  unit_tests:
    strategy:
      matrix:
        php: ${{ fromJSON(inputs.php) }}
        mysql: ${{ fromJSON(inputs.mysql) }}
      fail-fast: false
    needs: [ install_shop ]
    runs-on: ${{ inputs.runs_on }}
    steps:
      - name: 'Debug cached name'
        run: |
          echo "is2: ${{ needs.install_shop.outputs.installed_shop }}"

      - name: 'Cleanup (pre)'
        uses: 'OXID-eSales/github-actions/cleanup_workspace@v0'

      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v0'
        with:
          cached_shop: ${{ needs.install_shop.outputs.installed_shop }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}

      - name: 'Run unit tests (ce)'
        if: inputs.is_enterprise == false
        uses: 'OXID-eSales/github-actions/phpunit@v0'
        with:
          test: 'tests/Unit'
          logfile: unit_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt

      - name: 'Run unit tests (ee)'
        if: inputs.is_enterprise == true
        uses: 'OXID-eSales/github-actions/phpunit@v0'
        with:
          test: 'vendor/oxid-esales/oxideshop-ee/Tests/Unit'
          logfile: 'unit_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt'

  integration_tests:
    strategy:
      matrix:
        php: ${{ fromJSON(inputs.php) }}
        mysql: ${{ fromJSON(inputs.mysql) }}
      fail-fast: false
    needs: [ install_shop ]
    runs-on: ${{ inputs.runs_on }}
    steps:
      - name: 'Cleanup (pre)'
        uses: 'OXID-eSales/github-actions/cleanup_workspace@v0'

      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v0'
        with:
          cached_shop: ${{ needs.install_shop.outputs.installed_shop }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}

      - name: 'Run integration tests (ce)'
        if: inputs.is_enterprise == false
        uses: 'OXID-eSales/github-actions/phpunit@v0'
        with:
          test: 'tests/Integration'
          additional_options: '--bootstrap tests/bootstrap.php'
          logfile: integration_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt

      - name: 'Run integration tests (ee)'
        if: inputs.is_enterprise == true
        uses: 'OXID-eSales/github-actions/phpunit@v0'
        with:
          test: 'vendor/oxid-esales/oxideshop-ee/Tests/Integration'
          additional_options: '--bootstrap tests/bootstrap.php'
          logfile: 'integration_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt'
  
  codeception_tests:
    strategy:
      matrix:
        php: ${{ fromJSON(inputs.php) }}
        mysql: ${{ fromJSON(inputs.mysql) }}
      fail-fast: false
    needs: [ install_shop ]
    runs-on: ${{ inputs.runs_on }}
    steps:
      - name: 'Cleanup (pre)'
        uses: 'OXID-eSales/github-actions/cleanup_workspace@v0'

      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v0'
        with:
          cached_shop: ${{ needs.install_shop.outputs.installed_shop }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}        

      - name: Install admin theme and template engine and APEX theme
        uses: 'OXID-eSales/github-actions/install_themes@v0'
        with:
          themes: 'oxid-esales/twig-admin-theme:dev-b-8.0.x oxid-esales/apex-theme:dev-b-7.1.x'

      - name: 'Run codeception tests (ce)'
        if: inputs.is_enterprise == false
        uses: 'OXID-eSales/github-actions/codeception@v0'
        with:
          additional_options: '--skip-group flow_theme'
          logfile: codeception_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt

      - name: 'Run codeception tests (ee)'
        if: inputs.is_enterprise == true
        uses: 'OXID-eSales/github-actions/codeception@v0'
        with:
          configuration: 'vendor/oxid-esales/oxideshop-ee/Tests/codeception.yml'
          build: true
          logfile: codeception_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt
          output_folder: 'source/vendor/oxid-esales/oxideshop-ee/Tests/Codeception/_output'
 
  shop_setup_tests:
    strategy:
      matrix:
        php: ${{ fromJSON(inputs.php) }}
        mysql: ${{ fromJSON(inputs.mysql) }}
      fail-fast: false
    needs: [ prepare_shop ]
    runs-on: ${{ inputs.runs_on }}
    steps:
      - name: 'Cleanup (pre)'
        uses: 'OXID-eSales/github-actions/cleanup_workspace@v0'

      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v0'
        with:
          cached_shop: ${{ needs.prepare_shop.outputs.prepared_shop }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}        


      - name: 'Run codeception tests (ce)'
        if: inputs.is_enterprise == false
        uses: 'OXID-eSales/github-actions/codeception@v0'
        with:
          container_options: '-e SELENIUM_SERVER_HOST=selenium -e BROWSER_NAME=chrome -e DB_NAME=setup_test -e DB_USERNAME=root -e DB_PASSWORD=root -e DB_HOST=mysql -e DB_PORT=3306 -e SHOP_URL=http://localhost.local/ -e SHOP_SOURCE_PATH=/var/www/source/'
          suite: 'acceptanceSetup'
          additional_options: '--skip-group flow_theme'
          logfile: shop_setup_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt
          output_artifact: shop_setup-artifacts
        
      - name: 'Run codeception tests (ee)'
        if: inputs.is_enterprise == true
        uses: 'OXID-eSales/github-actions/codeception@v0'
        with:
          container_options: '-e SELENIUM_SERVER_HOST=selenium -e BROWSER_NAME=chrome -e DB_NAME=setup_test -e DB_USERNAME=root -e DB_PASSWORD=root -e DB_HOST=mysql -e DB_PORT=3306 -e SHOP_URL=http://localhost.local/ -e SHOP_SOURCE_PATH=/var/www/source/'
          configuration: 'vendor/oxid-esales/oxideshop-ee/Tests/codeception.yml'
          build: true
          suite: 'acceptanceSetup'
          logfile: shop_setup_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt
          output_folder: 'source/vendor/oxid-esales/oxideshop-ee/Tests/Codeception/_output'
          output_artifact: shop_setup-artifacts
