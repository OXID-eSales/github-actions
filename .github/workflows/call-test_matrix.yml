name: call-test_matrix
# Full test matrix for oxidshop_ce and oxidshop_ee
# This matrix runs the following jobs:
# - output parameters
# - prepare shop and cache it as preparedShop_<edition>-<ref>-<php_version>-<mysql_version>-<commit_sha>-<run>-<attempt>
# - install shop based on the prepared shop and cache it as shopInstallation_<edition>-<ref>-<php_version>-<mysql_version>-<commit_sha>-<run>-<attempt>
# - run unit tests using the cached shopInstallation
# - run integration tests  using the cached shopInstallation
# - run codeception tests  using the cached shopInstallation
# - run shop setup tests using the cached preparedShop
# - run sonarcloud scan
#
# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      testplan:
        type: string
        description: 'Testplan to run'
        required: true
      runs_on:
        type: string
        description: 'JSON string/array describing the runner'
        required: true
    secrets:
      DOCKER_HUB_USER:
        # description: 'user for the docker login'
        required: false
      DOCKER_HUB_TOKEN:
        # description: 'Token for the docker login'
        required: false
      CACHE_ENDPOINT:
        # description: 'Endpoint for tespkg/actions-cache@v1'
        required: false    # only for ee
      CACHE_ACCESS_KEY:
        # description: 'Access key for tespkg/actions-cache@v1'
        required: false    # only for ee
      CACHE_SECRET_KEY:
        # description: 'Secret key for tespkg/actions-cache@v1'
        required: false    # only for ee
      enterprise_github_token:
        # description: 'OAuth token to access enterprise repos'
        required: false
      SONAR_TOKEN:
        # description: Token for sonarcloud access
        required: false
      SLACK_WEBHOOK_URL:
        required: false
        # description: Webhook for posting to SLACK

jobs:
  init:
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Load Testplan'
        id: ltp
        uses: 'joernott/load_testplan@v1'
        with:
          files: 'https://raw.githubusercontent.com/OXID-eSales/github-actions/v0/testplans/defaults.yml,${{ inputs.testplan }}'
          set_output: true
          set_print: true
          # loglevel: trace
          # logfile: load_testplan.log
          yaml: generated_testplan.yaml

      - name: 'Prepare artifact'
        if: always()
        run: |
          echo "prepare_shop_matrix_php: ${{ steps.ltp.outputs.prepare_shop_matrix_php }}"
          cp "${GITHUB_OUTPUT}" generated_output.txt
          cp "${GITHUB_ENV}" generated_env.txt

      - name: 'Upload generated test plan'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 'testplan'
          path: |
            generated_testplan.yaml
            generated_output.txt
            generated_env.txt
            load_testplan.log
          retention-days: 7

    outputs:
      # prepare_shop variables
      prepare_shop_add_services: ${{ steps.ltp.outputs.prepare_shop_add_services }}
      prepare_shop_cache_bucket: ${{ steps.ltp.outputs.prepare_shop_cache_bucket }}
      prepare_shop_cache_prefix: ${{ steps.ltp.outputs.prepare_shop_cache_prefix }}
      prepare_shop_composer_allow_plugins_repositories: ${{ steps.ltp.outputs.prepare_shop_composer_allow_plugins_repositories }}
      prepare_shop_composer_rm_parameters: ${{ steps.ltp.outputs.prepare_shop_composer_rm_parameters }}
      prepare_shop_composer_rm_options: ${{ steps.ltp.outputs.prepare_shop_composer_rm_options }}
      prepare_shop_composer_rm_update: ${{ steps.ltp.outputs.prepare_shop_composer_rm_update }}
      prepare_shop_composer_rm_update_options: ${{ steps.ltp.outputs.prepare_shop_composer_rm_update_options }}
      prepare_shop_composer_configure_install: ${{ steps.ltp.outputs.prepare_shop_composer_configure_install }}
      prepare_shop_composer_configure_options: ${{ steps.ltp.outputs.prepare_shop_composer_configure_options }}
      prepare_shop_composer_configure_organisation: ${{ steps.ltp.outputs.prepare_shop_composer_configure_organisation }}
      prepare_shop_composer_configure_ref: ${{ steps.ltp.outputs.prepare_shop_composer_configure_ref }}
      prepare_shop_composer_configure_update: ${{ steps.ltp.outputs.prepare_shop_composer_configure_update }}
      prepare_shop_composer_configure_update_options: ${{ steps.ltp.outputs.prepare_shop_composer_configure_update_options }}
      prepare_shop_composer_require_install: ${{ steps.ltp.outputs.prepare_shop_composer_require_install }}
      prepare_shop_composer_require_options: ${{ steps.ltp.outputs.prepare_shop_composer_require_options }}
      prepare_shop_composer_require_organisation: ${{ steps.ltp.outputs.prepare_shop_composer_require_organisation }}
      prepare_shop_composer_require_ref: ${{ steps.ltp.outputs.prepare_shop_composer_require_ref }}
      prepare_shop_composer_require_update: ${{ steps.ltp.outputs.prepare_shop_composer_require_update }}
      prepare_shop_composer_require_update_options: ${{ steps.ltp.outputs.prepare_shop_composer_require_update_options }}
      prepare_shop_container_method: ${{ steps.ltp.outputs.prepare_shop_container_method }}
      prepare_shop_container_name: ${{ steps.ltp.outputs.prepare_shop_container_name }}
      prepare_shop_container_options: ${{ steps.ltp.outputs.prepare_shop_container_options }}
      prepare_shop_custom_ini_error_reporting: ${{ steps.ltp.outputs.prepare_shop_custom_ini_error_reporting }}
      prepare_shop_custom_ini_xdebug: ${{ steps.ltp.outputs.prepare_shop_custom_ini_xdebug }}
      prepare_shop_docker_login: ${{ steps.ltp.outputs.prepare_shop_docker_login }}
      prepare_shop_git_enterprise_ref: ${{ steps.ltp.outputs.prepare_shop_git_enterprise_ref }}
      prepare_shop_git_sdk_ref: ${{ steps.ltp.outputs.prepare_shop_git_sdk_ref }}
      prepare_shop_git_sdk_url: ${{ steps.ltp.outputs.prepare_shop_git_sdk_url }}
      prepare_shop_git_shop_ref: ${{ steps.ltp.outputs.prepare_shop_git_shop_ref }}
      prepare_shop_git_shop_url: ${{ steps.ltp.outputs.prepare_shop_git_shop_url }}
      prepare_shop_is_enterprise: ${{ steps.ltp.outputs.prepare_shop_is_enterprise }}
      prepare_shop_matrix_mysql: ${{ steps.ltp.outputs.prepare_shop_matrix_mysql }}
      prepare_shop_matrix_php: ${{ steps.ltp.outputs.prepare_shop_matrix_php }}
      prepare_shop_matrix_template_engine: ${{ steps.ltp.outputs.prepare_shop_matrix_template_engine }}
      prepare_shop_max_parallel: ${{ steps.ltp.outputs.prepare_shop_max_parallel }}
      # install_shop variables
      install_shop_cache_bucket: ${{ steps.ltp.outputs.install_shop_cache_bucket }}
      install_shop_cache_prefix: ${{ steps.ltp.outputs.install_shop_cache_prefix }}
      install_shop_config_idebug: ${{ steps.ltp.outputs.install_shop_config_idebug }}
      install_shop_container_method: ${{ steps.ltp.outputs.install_shop_container_method }}
      install_shop_container_name: ${{ steps.ltp.outputs.install_shop_container_name }}
      install_shop_container_options: ${{ steps.ltp.outputs.install_shop_container_options }}
      install_shop_docker_login: ${{ steps.ltp.outputs.install_shop_docker_login }}
      install_shop_git_enterprise_ref: ${{ steps.ltp.outputs.install_shop_git_enterprise_ref }}
      install_shop_git_shop_ref: ${{ steps.ltp.outputs.install_shop_git_shop_ref }}
      install_shop_is_enterprise: ${{ steps.ltp.outputs.install_shop_is_enterprise }}
      install_shop_matrix_mysql: ${{ steps.ltp.outputs.install_shop_matrix_mysql }}
      install_shop_matrix_php: ${{ steps.ltp.outputs.install_shop_matrix_php }}
      install_shop_matrix_template_engine: ${{ steps.ltp.outputs.install_shop_matrix_template_engine }}
      install_shop_max_parallel: ${{ steps.ltp.outputs.install_shop_max_parallel }}
      install_shop_output_artifact_prefix: ${{ steps.ltp.outputs.install_shop_output_artifact_prefix }}
      install_shop_output_files: ${{ steps.ltp.outputs.install_shop_output_files }}
      # install_module variables
      install_module_cache_bucket: ${{ steps.ltp.outputs.install_module_cache_bucket }}
      install_module_cache_prefix: ${{ steps.ltp.outputs.install_module_cache_prefix }}
      install_module_container_method: ${{ steps.ltp.outputs.install_module_container_method }}
      install_module_container_name: ${{ steps.ltp.outputs.install_module_container_name }}
      install_module_container_options: ${{ steps.ltp.outputs.install_module_container_options }}
      install_module_docker_login: ${{ steps.ltp.outputs.install_module_docker_login }}
      install_module_git_module_ref: ${{ steps.ltp.outputs.install_module_git_module_ref }}
      install_module_git_module_url: ${{ steps.ltp.outputs.install_module_git_module_url }}
      install_module_ids: ${{ steps.ltp.outputs.install_module_ids }}
      install_module_matrix_mysql: ${{ steps.ltp.outputs.install_module_matrix_mysql }}
      install_module_matrix_php: ${{ steps.ltp.outputs.install_module_matrix_php }}
      install_module_matrix_template_engine: ${{ steps.ltp.outputs.install_module_matrix_template_engine }}
      install_module_max_parallel: ${{ steps.ltp.outputs.install_module_max_parallel }}
      install_module_output_artifact_prefix: ${{ steps.ltp.outputs.install_module_output_artifact_prefix }}
      install_module_output_files: ${{ steps.ltp.outputs.install_module_output_files }}
      install_module_package_name: ${{ steps.ltp.outputs.install_module_package_name }}
      # unit_test variables
      unit_tests_additional_options: ${{ steps.ltp.outputs.unit_tests_additional_options }}
      unit_tests_cache_bucket: ${{ steps.ltp.outputs.unit_tests_cache_bucket }}
      unit_tests_configuration: ${{ steps.ltp.outputs.unit_tests_configuration }}
      unit_tests_container_method: ${{ steps.ltp.outputs.unit_tests_container_method }}
      unit_tests_container_name: ${{ steps.ltp.outputs.unit_tests_container_name }}
      unit_tests_container_options: ${{ steps.ltp.outputs.unit_tests_container_options }}
      unit_tests_coverage_path: ${{ steps.ltp.outputs.unit_tests_coverage_path }}
      unit_tests_coverage_prefix: ${{ steps.ltp.outputs.unit_tests_coverage_prefix }}
      unit_tests_docker_login: ${{ steps.ltp.outputs.unit_tests_docker_login }}
      unit_tests_failure_pattern: ${{ steps.ltp.outputs.unit_tests_failure_pattern }}
      unit_tests_logfile_artifact: ${{ steps.ltp.outputs.unit_tests_logfile_artifact }}
      unit_tests_logfile_prefix: ${{ steps.ltp.outputs.unit_tests_logfile_prefix }}
      unit_tests_matrix_mysql: ${{ steps.ltp.outputs.unit_tests_matrix_mysql }}
      unit_tests_matrix_php: ${{ steps.ltp.outputs.unit_tests_matrix_php }}
      unit_tests_matrix_template_engine: ${{ steps.ltp.outputs.unit_tests_matrix_template_engine }}
      unit_tests_max_parallel: ${{ steps.ltp.outputs.unit_tests_max_parallel }}
      unit_tests_output_files: ${{ steps.ltp.outputs.unit_tests_output_files }}
      unit_tests_output_prefix: ${{ steps.ltp.outputs.unit_tests_output_prefix }}
      unit_tests_skip: ${{ steps.ltp.outputs.unit_tests_skip }}
      unit_tests_test: ${{ steps.ltp.outputs.unit_tests_test }}
      # integration_tests variables
      integration_tests_additional_options: ${{ steps.ltp.outputs.integration_tests_additional_options }}
      integration_tests_cache_bucket: ${{ steps.ltp.outputs.integration_tests_cache_bucket }}
      integration_tests_configuration: ${{ steps.ltp.outputs.integration_tests_configuration }}
      integration_tests_container_method: ${{ steps.ltp.outputs.integration_tests_container_method }}
      integration_tests_container_name: ${{ steps.ltp.outputs.integration_tests_container_name }}
      integration_tests_container_options: ${{ steps.ltp.outputs.integration_tests_container_options }}
      integration_tests_coverage_path: ${{ steps.ltp.outputs.integration_tests_coverage_path }}
      integration_tests_coverage_prefix: ${{ steps.ltp.outputs.integration_tests_coverage_prefix }}
      integration_tests_docker_login: ${{ steps.ltp.outputs.integration_tests_docker_login }}
      integration_tests_failure_pattern: ${{ steps.ltp.outputs.integration_tests_failure_pattern }}
      integration_tests_logfile_artifact: ${{ steps.ltp.outputs.integration_tests_logfile_artifact }}
      integration_tests_logfile_prefix: ${{ steps.ltp.outputs.integration_tests_logfile_prefix }}
      integration_tests_matrix_mysql: ${{ steps.ltp.outputs.integration_tests_matrix_mysql }}
      integration_tests_matrix_php: ${{ steps.ltp.outputs.integration_tests_matrix_php }}
      integration_tests_matrix_template_engine: ${{ steps.ltp.outputs.integration_tests_matrix_template_engine }}
      integration_tests_max_parallel: ${{ steps.ltp.outputs.integration_tests_max_parallel }}
      integration_tests_output_files: ${{ steps.ltp.outputs.integration_tests_output_files }}
      integration_tests_output_prefix: ${{ steps.ltp.outputs.integration_tests_output_prefix }}
      integration_tests_skip: ${{ steps.ltp.outputs.integration_tests_skip }}
      integration_tests_test: ${{ steps.ltp.outputs.integration_tests_test }}
      # codeception_tests variables
      codeception_tests_additional_options: ${{ steps.ltp.outputs.codeception_tests_additional_options }}
      codeception_tests_build: ${{ steps.ltp.outputs.codeception_tests_build }}
      codeception_tests_cache_bucket: ${{ steps.ltp.outputs.codeception_tests_cache_bucket }}
      codeception_tests_composer_configure_install: ${{ steps.ltp.outputs.codeception_tests_composer_configure_install }}
      codeception_tests_composer_configure_options: ${{ steps.ltp.outputs.codeception_tests_composer_configure_options }}
      codeception_tests_composer_configure_organisation: ${{ steps.ltp.outputs.codeception_tests_composer_configure_organisation }}
      codeception_tests_composer_configure_ref: ${{ steps.ltp.outputs.codeception_tests_composer_configure_ref }}
      codeception_tests_composer_configure_update: ${{ steps.ltp.outputs.codeception_tests_composer_configure_update }}
      codeception_tests_composer_configure_update_options: ${{ steps.ltp.outputs.codeception_tests_composer_configure_update_options }}
      codeception_tests_composer_require_install: ${{ steps.ltp.outputs.codeception_tests_composer_require_install }}
      codeception_tests_composer_require_options: ${{ steps.ltp.outputs.codeception_tests_composer_require_options }}
      codeception_tests_composer_require_organisation: ${{ steps.ltp.outputs.codeception_tests_composer_require_organisation }}
      codeception_tests_composer_require_ref: ${{ steps.ltp.outputs.codeception_tests_composer_require_ref }}
      codeception_tests_composer_require_update: ${{ steps.ltp.outputs.codeception_tests_composer_require_update }}
      codeception_tests_composer_require_update_options: ${{ steps.ltp.outputs.codeception_tests_composer_require_update_options }}
      codeception_tests_configuration: ${{ steps.ltp.outputs.codeception_tests_configuration }}
      codeception_tests_container_method: ${{ steps.ltp.outputs.codeception_tests_container_method }}
      codeception_tests_container_name: ${{ steps.ltp.outputs.codeception_tests_container_name }}
      codeception_tests_container_options: ${{ steps.ltp.outputs.codeception_tests_container_options }}
      codeception_tests_coverage_path: ${{ steps.ltp.outputs.codeception_tests_coverage_path }}
      codeception_tests_coverage_prefix: ${{ steps.ltp.outputs.codeception_tests_coverage_prefix }}
      codeception_tests_docker_login: ${{ steps.ltp.outputs.codeception_tests_docker_login }}
      codeception_tests_failure_pattern: ${{ steps.ltp.outputs.codeception_tests_failure_pattern }}
      codeception_tests_logfile_artifact: ${{ steps.ltp.outputs.codeception_tests_logfile_artifact }}
      codeception_tests_logfile_prefix: ${{ steps.ltp.outputs.codeception_tests_logfile_prefix }}
      codeception_tests_matrix_mysql: ${{ steps.ltp.outputs.codeception_tests_matrix_mysql }}
      codeception_tests_matrix_php: ${{ steps.ltp.outputs.codeception_tests_matrix_php }}
      codeception_tests_matrix_template_engine: ${{ steps.ltp.outputs.codeception_tests_matrix_template_engine }}
      codeception_tests_max_parallel: ${{ steps.ltp.outputs.codeception_tests_max_parallel }}
      codeception_tests_output_files: ${{ steps.ltp.outputs.codeception_tests_output_files }}
      codeception_tests_output_prefix: ${{ steps.ltp.outputs.codeception_tests_output_prefix }}
      codeception_tests_skip: ${{ steps.ltp.outputs.codeception_tests_skip }}
      codeception_tests_suite: ${{ steps.ltp.outputs.codeception_tests_suite }}
      codeception_tests_test: ${{ steps.ltp.outputs.codeception_tests_test }}
      # shop_setup_tests variables
      shop_setup_tests_additional_options: ${{ steps.ltp.outputs.shop_setup_tests_additional_options }}
      shop_setup_tests_build: ${{ steps.ltp.outputs.shop_setup_tests_build }}
      shop_setup_tests_cache_bucket: ${{ steps.ltp.outputs.shop_setup_tests_cache_bucket }}
      shop_setup_tests_composer_configure_install: ${{ steps.ltp.outputs.shop_setup_tests_composer_configure_install }}
      shop_setup_tests_composer_configure_options: ${{ steps.ltp.outputs.shop_setup_tests_composer_configure_options }}
      shop_setup_tests_composer_configure_organisation: ${{ steps.ltp.outputs.shop_setup_tests_composer_configure_organisation }}
      shop_setup_tests_composer_configure_ref: ${{ steps.ltp.outputs.shop_setup_tests_composer_configure_ref }}
      shop_setup_tests_composer_configure_update: ${{ steps.ltp.outputs.shop_setup_tests_composer_configure_update }}
      shop_setup_tests_composer_configure_update_options: ${{ steps.ltp.outputs.shop_setup_tests_composer_configure_update_options }}
      shop_setup_tests_composer_require_install: ${{ steps.ltp.outputs.shop_setup_tests_composer_require_install }}
      shop_setup_tests_composer_require_options: ${{ steps.ltp.outputs.shop_setup_tests_composer_require_options }}
      shop_setup_tests_composer_require_organisation: ${{ steps.ltp.outputs.shop_setup_tests_composer_require_organisation }}
      shop_setup_tests_composer_require_ref: ${{ steps.ltp.outputs.shop_setup_tests_composer_require_ref }}
      shop_setup_tests_composer_require_update: ${{ steps.ltp.outputs.shop_setup_tests_composer_require_update }}
      shop_setup_tests_composer_require_update_options: ${{ steps.ltp.outputs.shop_setup_tests_composer_require_update_options }}
      shop_setup_tests_configuration: ${{ steps.ltp.outputs.shop_setup_tests_configuration }}
      shop_setup_tests_container_method: ${{ steps.ltp.outputs.shop_setup_tests_container_method }}
      shop_setup_tests_container_name: ${{ steps.ltp.outputs.shop_setup_tests_container_name }}
      shop_setup_tests_container_options: ${{ steps.ltp.outputs.shop_setup_tests_container_options }}
      shop_setup_tests_coverage_path: ${{ steps.ltp.outputs.shop_setup_tests_coverage_path }}
      shop_setup_tests_coverage_prefix: ${{ steps.ltp.outputs.shop_setup_tests_coverage_prefix }}
      shop_setup_tests_docker_login: ${{ steps.ltp.outputs.shop_setup_tests_docker_login }}
      shop_setup_tests_failure_pattern: ${{ steps.ltp.outputs.shop_setup_tests_failure_pattern }}
      shop_setup_tests_logfile_artifact: ${{ steps.ltp.outputs.shop_setup_tests_logfile_artifact }}
      shop_setup_tests_logfile_prefix: ${{ steps.ltp.outputs.shop_setup_tests_logfile_prefix }}
      shop_setup_tests_matrix_mysql: ${{ steps.ltp.outputs.shop_setup_tests_matrix_mysql }}
      shop_setup_tests_matrix_php: ${{ steps.ltp.outputs.shop_setup_tests_matrix_php }}
      shop_setup_tests_matrix_template_engine: ${{ steps.ltp.outputs.shop_setup_tests_matrix_template_engine }}
      shop_setup_tests_max_parallel: ${{ steps.ltp.outputs.shop_setup_tests_max_parallel }}
      shop_setup_tests_output_files: ${{ steps.ltp.outputs.shop_setup_tests_output_files }}
      shop_setup_tests_output_prefix: ${{ steps.ltp.outputs.shop_setup_tests_output_prefix }}
      shop_setup_tests_skip: ${{ steps.ltp.outputs.shop_setup_tests_skip }}
      shop_setup_tests_suite: ${{ steps.ltp.outputs.shop_setup_tests_suite }}
      shop_setup_tests_test: ${{ steps.ltp.outputs.shop_setup_tests_test }}
      # deprecated_tests variables
      deprecated_tests_additional_options: ${{ steps.ltp.outputs.deprecated_tests_additional_options }}
      deprecated_tests_cache_bucket: ${{ steps.ltp.outputs.deprecated_tests_cache_bucket }}
      deprecated_tests_composer_configure_install: ${{ steps.ltp.outputs.deprecated_tests_composer_configure_install }}
      deprecated_tests_composer_configure_options: ${{ steps.ltp.outputs.deprecated_tests_composer_configure_options }}
      deprecated_tests_composer_configure_organisation: ${{ steps.ltp.outputs.deprecated_tests_composer_configure_organisation }}
      deprecated_tests_composer_configure_ref: ${{ steps.ltp.outputs.deprecated_tests_composer_configure_ref }}
      deprecated_tests_composer_configure_update: ${{ steps.ltp.outputs.deprecated_tests_composer_configure_update }}
      deprecated_tests_composer_configure_update_options: ${{ steps.ltp.outputs.deprecated_tests_composer_configure_update_options }}
      deprecated_tests_composer_require_install: ${{ steps.ltp.outputs.deprecated_tests_composer_require_install }}
      deprecated_tests_composer_require_options: ${{ steps.ltp.outputs.deprecated_tests_composer_require_options }}
      deprecated_tests_composer_require_organisation: ${{ steps.ltp.outputs.deprecated_tests_composer_require_organisation }}
      deprecated_tests_composer_require_ref: ${{ steps.ltp.outputs.deprecated_tests_composer_require_ref }}
      deprecated_tests_composer_require_update: ${{ steps.ltp.outputs.deprecated_tests_composer_require_update }}
      deprecated_tests_composer_require_update_options: ${{ steps.ltp.outputs.deprecated_tests_composer_require_update_options }}
      deprecated_tests_config_file: ${{ steps.ltp.outputs.deprecated_tests_config_file }}
      deprecated_tests_container_method: ${{ steps.ltp.outputs.deprecated_tests_container_method }}
      deprecated_tests_container_name: ${{ steps.ltp.outputs.deprecated_tests_container_name }}
      deprecated_tests_container_options: ${{ steps.ltp.outputs.deprecated_tests_container_options }}
      deprecated_tests_coverage_path: ${{ steps.ltp.outputs.deprecated_tests_coverage_path }}
      deprecated_tests_coverage_prefix: ${{ steps.ltp.outputs.deprecated_tests_coverage_prefix }}
      deprecated_tests_docker_login: ${{ steps.ltp.outputs.deprecated_tests_docker_login }}
      deprecated_tests_failure_pattern: ${{ steps.ltp.outputs.deprecated_tests_failure_pattern }}
      deprecated_tests_logfile_artifact: ${{ steps.ltp.outputs.deprecated_tests_logfile_artifact }}
      deprecated_tests_logfile_prefix: ${{ steps.ltp.outputs.deprecated_tests_logfile_prefix }}
      deprecated_tests_matrix_mysql: ${{ steps.ltp.outputs.deprecated_tests_matrix_mysql }}
      deprecated_tests_matrix_php: ${{ steps.ltp.outputs.deprecated_tests_matrix_php }}
      deprecated_tests_matrix_template_engine: ${{ steps.ltp.outputs.deprecated_tests_matrix_template_engine }}
      deprecated_tests_max_parallel: ${{ steps.ltp.outputs.deprecated_tests_max_parallel }}
      deprecated_tests_output_files: ${{ steps.ltp.outputs.deprecated_tests_output_files }}
      deprecated_tests_output_prefix: ${{ steps.ltp.outputs.deprecated_tests_output_prefix }}
      deprecated_tests_skip: ${{ steps.ltp.outputs.deprecated_tests_skip }}
      deprecated_tests_test: ${{ steps.ltp.outputs.deprecated_tests_test }}
      # sonarcloud variables
      sonarcloud_coverage_prefix: ${{ steps.ltp.outputs.sonarcloud_coverage_prefix }}
      sonarcloud_docker_login: ${{ steps.ltp.outputs.sonarcloud_docker_login }}
      sonarcloud_internal_parameters: ${{ steps.ltp.outputs.sonarcloud_internal_parameters }}
      sonarcloud_internal_project_key: ${{ steps.ltp.outputs.sonarcloud_internal_project_key }}
      sonarcloud_internal_project_name: ${{ steps.ltp.outputs.sonarcloud_internal_project_name }}
      sonarcloud_matrix_mysql: ${{ steps.ltp.outputs.sonarcloud_matrix_mysql }}
      sonarcloud_matrix_php: ${{ steps.ltp.outputs.sonarcloud_matrix_php }}
      sonarcloud_max_parallel: ${{ steps.ltp.outputs.sonarcloud_max_parallel }}
      sonarcloud_organization: ${{ steps.ltp.outputs.sonarcloud_organization }}
      sonarcloud_parameters: ${{ steps.ltp.outputs.sonarcloud_parameters }}
      sonarcloud_project_key: ${{ steps.ltp.outputs.sonarcloud_project_key }}
      sonarcloud_project_name: ${{ steps.ltp.outputs.sonarcloud_project_name }}
      sonarcloud_skip: ${{ steps.ltp.outputs.sonarcloud_skip }}
      sonarcloud_target_branch: ${{ steps.ltp.outputs.sonarcloud_target_branch }}
      # phpcs_tests variables
      phpcs_tests_additional_options: ${{ steps.ltp.outputs.phpcs_tests_additional_options }}
      phpcs_tests_cache_bucket: ${{ steps.ltp.outputs.phpcs_tests_cache_bucket }}
      phpcs_tests_container_method: ${{ steps.ltp.outputs.phpcs_tests_container_method }}
      phpcs_tests_container_name: ${{ steps.ltp.outputs.phpcs_tests_container_name }}
      phpcs_tests_container_options: ${{ steps.ltp.outputs.phpcs_tests_container_options }}
      phpcs_tests_docker_login: ${{ steps.ltp.outputs.phpcs_tests_docker_login }}
      phpcs_tests_diff_only: ${{ steps.ltp.outputs.phpcs_tests_diff_only }}
      phpcs_tests_failure_pattern: ${{ steps.ltp.outputs.phpcs_tests_failure_pattern }}
      phpcs_tests_filter: ${{ steps.ltp.outputs.phpcs_tests_filter }}
      phpcs_tests_git_ref: ${{ steps.ltp.outputs.phpcs_tests_git_ref }}
      phpcs_tests_logfile_artifact: ${{ steps.ltp.outputs.phpcs_tests_logfile_artifact }}
      phpcs_tests_logfile_prefix: ${{ steps.ltp.outputs.phpcs_tests_logfile_prefix }}
      phpcs_tests_matrix_mysql: ${{ steps.ltp.outputs.phpcs_tests_matrix_mysql }}
      phpcs_tests_matrix_php: ${{ steps.ltp.outputs.phpcs_tests_matrix_php }}
      phpcs_tests_matrix_template_engine: ${{ steps.ltp.outputs.phpcs_tests_matrix_template_engine }}
      phpcs_tests_max_parallel: ${{ steps.ltp.outputs.phpcs_tests_max_parallel }}
      phpcs_tests_skip: ${{ steps.ltp.outputs.phpcs_tests_skip }}
      # styles variables
      styles_cache_bucket: ${{ steps.ltp.outputs.styles_cache_bucket }}
      styles_container_method: ${{ steps.ltp.outputs.styles_container_method }}
      styles_container_name: ${{ steps.ltp.outputs.styles_container_name }}
      styles_container_options: ${{ steps.ltp.outputs.styles_container_options }}
      styles_docker_login: ${{ steps.ltp.outputs.styles_docker_login }}
      styles_matrix_mysql: ${{ steps.ltp.outputs.styles_matrix_mysql }}
      styles_matrix_php: ${{ steps.ltp.outputs.styles_matrix_php }}
      styles_max_parallel: ${{ steps.ltp.outputs.styles_max_parallel }}
      styles_output_files: ${{ steps.ltp.outputs.styles_output_files }}
      styles_output_prefix: ${{ steps.ltp.outputs.styles_output_prefix }}
      styles_skip: ${{ steps.ltp.outputs.styles_skip }}
      # finish variables
      finish_matrix_mysql: ${{ steps.ltp.outputs.finish_matrix_mysql }}
      finish_matrix_php: ${{ steps.ltp.outputs.finish_matrix_php }}
      finish_skip: ${{ steps.ltp.outputs.finish_skip }}
      finish_slack_title: ${{ steps.ltp.outputs.finish_slack_title }}

  prepare_shop:
    needs: init
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.prepare_shop_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.prepare_shop_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.prepare_shop_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Prepare Shop'
        id: prepare_shop
        uses: 'OXID-eSales/github-actions/prepare_shop@v3'
        with:
          container_name: ${{ needs.init.outputs.prepare_shop_container_name }}
          container_options: ${{ needs.init.outputs.prepare_shop_container_options }}
          container_method: ${{ needs.init.outputs.prepare_shop_container_method }}
          docker_login: ${{ needs.init.outputs.prepare_shop_docker_login }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}
          git_sdk_url: ${{ needs.init.outputs.prepare_shop_git_sdk_url }}
          git_sdk_ref: ${{ needs.init.outputs.prepare_shop_git_sdk_ref }}
          git_shop_url: ${{ needs.init.outputs.prepare_shop_git_shop_url }}
          git_shop_ref: ${{ needs.init.outputs.prepare_shop_git_shop_ref }}
          git_enterprise_ref: ${{ needs.init.outputs.prepare_shop_git_enterprise_ref }}
          github_event_name: ${{ github.event_name }}
          github_event_number: ${{ github.event.number }}
          github_base_ref: ${{ github.base_ref }}
          github_sha: ${{ github.sha }}
          github_run_number: ${{ github.run_number }}
          github_run_attempt: ${{ github.run_attempt }}
          php: ${{ matrix.php }}
          mysql: ${{ matrix.mysql }}
          is_enterprise: ${{ needs.init.outputs.prepare_shop_is_enterprise }}
          custom_ini_error_reporting: ${{ needs.init.outputs.prepare_shop_custom_ini_error_reporting }}
          custom_ini_xdebug: ${{ needs.init.outputs.prepare_shop_custom_ini_xdebug }}
          add_services: ${{ needs.init.outputs.prepare_shop_add_services }}
          composer_allow_plugins_repositories: '${{ needs.init.outputs.prepare_shop_composer_allow_plugins_repositories }}'
          composer_rm_parameters: ${{ needs.init.outputs.prepare_shop_composer_rm_parameters}}
          composer_rm_options: ${{ needs.init.outputs.prepare_shop_composer_rm_options}}
          composer_rm_update: ${{ needs.init.outputs.prepare_shop_composer_rm_update}}
          composer_rm_update_options: ${{ needs.init.outputs.prepare_shop_composer_rm_update_options}}
          composer_configure_organisation: ${{ needs.init.outputs.prepare_shop_composer_configure_organisation}}
          composer_configure_install: '${{ needs.init.outputs.prepare_shop_composer_configure_install}}'
          composer_configure_ref: ${{ needs.init.outputs.prepare_shop_composer_configure_ref}}
          composer_configure_options: ${{ needs.init.outputs.prepare_shop_composer_configure_options}}
          composer_configure_update: ${{ needs.init.outputs.prepare_shop_composer_configure_update}}
          composer_configure_update_options: ${{ needs.init.outputs.prepare_shop_composer_configure_update_options}}
          composer_require_organisation: ${{ needs.init.outputs.prepare_shop_composer_require_organisation}}
          composer_require_install: '${{ needs.init.outputs.prepare_shop_composer_require_install}}'
          composer_require_ref: ${{ needs.init.outputs.prepare_shop_composer_require_ref}}
          composer_require_options: ${{ needs.init.outputs.prepare_shop_composer_require_options}}
          composer_require_update: ${{ needs.init.outputs.prepare_shop_composer_require_update}}
          composer_require_update_options: ${{ needs.init.outputs.prepare_shop_composer_require_update_options}}
          enterprise_github_token: ${{ secrets.enterprise_github_token }}
          cache_name: '${{ needs.init.outputs.prepare_shop_cache_prefix}}_PHP${{matrix.php}}-MYSQL${{matrix.mysql}}'
          cache_bucket: ${{ needs.init.outputs.prepare_shop_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}

      - name: 'List files'
        run: |
          find . |sort

  install_shop:
    needs: ['init', 'prepare_shop']
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.install_shop_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.install_shop_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.install_shop_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v3'
        with:
          cached_shop: '${{ needs.init.outputs.prepare_shop_cache_prefix}}_PHP${{matrix.php}}-MYSQL${{matrix.mysql}}'
          cache_bucket: ${{ needs.init.outputs.install_shop_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}
          docker_login: ${{ needs.init.outputs.install_shop_docker_login }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: 'Install shop'
        id: install_shop
        uses: 'OXID-eSales/github-actions/install_shop@v3'
        with:
          container_name: ${{ needs.init.outputs.install_shop_container_name }}
          container_options: ${{ needs.init.outputs.install_shop_container_options }}
          container_method: ${{ needs.init.outputs.install_shop_container_method }}
          git_shop_ref: ${{ needs.init.outputs.install_shop_git_shop_ref }}
          git_enterprise_ref: ${{ needs.init.outputs.install_shop_git_enterprise_ref }}
          github_sha: ${{ github.sha }}
          github_run_number: ${{ github.run_number }}
          github_run_attempt: ${{ github.run_attempt }}
          php: ${{ matrix.php }}
          mysql: ${{ matrix.mysql }}
          is_enterprise: ${{ needs.init.outputs.install_shop_is_enterprise }}
          config_idebug: ${{ needs.init.outputs.install_shop_config_idebug }}
          output_artifact: 'Configs-${{ matrix.php }}-${{ matrix.mysql }}_install_shop'
          cache_name: '${{ needs.init.outputs.install_shop_cache_prefix}}_PHP${{matrix.php}}-MYSQL${{matrix.mysql}}'
          cache_bucket: ${{ needs.init.outputs.install_shop_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}

  install_module:
    needs: ['init', 'install_shop']
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.install_module_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.install_module_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.install_module_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Start shop'
        if: ${{ needs.init.outputs.install_module_ids != '' }}
        uses: 'OXID-eSales/github-actions/start_shop@v3'
        with:
          cached_shop: '${{ needs.init.outputs.install_shop_cache_prefix}}_PHP${{matrix.php}}-MYSQL${{matrix.mysql}}'
          cache_bucket: ${{ needs.init.outputs.install_module_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}
          docker_login: ${{ needs.init.outputs.install_module_docker_login }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Checkout module
        if: ${{ needs.init.outputs.install_module_ids != '' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.init.outputs.install_module_git_module_url }}
          ref: ${{ needs.init.outputs.install_module_git_module_ref }}
          path: source/test-module

      - name: Install module
        id: install_module
        if: ${{ needs.init.outputs.install_module_ids != '' }}
        uses: 'OXID-eSales/github-actions/install_module@v3'
        with:
          container_name: ${{ needs.init.outputs.install_module_container_name }}
          container_options: ${{ needs.init.outputs.install_module_container_options }}
          container_method: ${{ needs.init.outputs.install_module_container_method }}
          package_name: ${{ needs.init.outputs.install_module_package_name }}
          module_ids: ${{ needs.init.outputs.install_module_ids }}
          git_module_url: ${{ needs.init.outputs.install_module_git_module_url }}
          git_module_ref: ${{ needs.init.outputs.install_module_git_module_ref }}
          output_files: ${{ needs.init.outputs.install_module_output_files }}
          output_artifact: '${{needs.init.outputs.install_module_output_artifact_prefix}}_PHP${{matrix.php}}-MYSQL${{matrix.mysql}}'
          cache_name: '${{ needs.init.outputs.install_module_cache_prefix}}_PHP${{matrix.php}}-MYSQL${{matrix.mysql}}'
          cache_bucket: ${{ needs.init.outputs.install_module_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}

  unit_tests:
    needs: ['init', 'install_module']
    if: ${{ needs.init.outputs.unit_tests_skip != 'true' }}
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.unit_tests_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.unit_tests_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.unit_tests_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v3'
        with:
          cached_shop: '${{ needs.init.outputs.install_module_cache_prefix}}_PHP${{matrix.php}}-MYSQL${{matrix.mysql}}'
          cache_bucket: ${{ needs.init.outputs.unit_tests_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}
          docker_login: ${{ needs.init.outputs.unit_tests_docker_login }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: 'Run unit tests'
        uses: 'OXID-eSales/github-actions/phpunit@v3'
        with:
          container_name: ${{ needs.init.outputs.unit_tests_container_name }}
          container_options: ${{ needs.init.outputs.unit_tests_container_options }}
          container_method: ${{ needs.init.outputs.unit_tests_container_method }}
          configuration: ${{ needs.init.outputs.unit_tests_configuration }}
          test: ${{ needs.init.outputs.unit_tests_test }}
          additional_options: ${{ needs.init.outputs.unit_tests_additional_options }}
          logfile: unit_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt
          logfile_artifact: ${{ needs.init.outputs.unit_tests_logfile_artifact }}
          output_files: ${{ needs.init.outputs.unit_tests_output_files }}
          output_artifact: unit-artifacts_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          coverage_path: ${{ needs.init.outputs.unit_tests_coverage_path }}
          coverage_artifact: ${{ needs.init.outputs.unit_tests_coverage_prefix }}_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          failure_pattern: ${{ needs.init.outputs.unit_tests_failure_pattern }}

      - name: 'Stop shop'
        uses: 'OXID-eSales/github-actions/stop_shop@v3'

  integration_tests:
    needs: ['init', 'install_module']
    if: ${{ needs.init.outputs.unit_tests_skip != 'true' }}
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.integration_tests_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.integration_tests_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.integration_tests_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v3'
        with:
          cached_shop: '${{ needs.init.outputs.install_module_cache_prefix}}_PHP${{matrix.php}}-MYSQL${{matrix.mysql}}'
          cache_bucket: ${{ needs.init.outputs.integration_tests_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}
          docker_login: ${{ needs.init.outputs.integration_tests_docker_login }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: 'Run integration tests'
        uses: 'OXID-eSales/github-actions/phpunit@v3'
        with:
          container_name: ${{ needs.init.outputs.integration_tests_container_name }}
          container_options: ${{ needs.init.outputs.integration_tests_container_options }}
          container_method: ${{ needs.init.outputs.integration_tests_container_method }}
          configuration: ${{ needs.init.outputs.integration_tests_configuration }}
          test: ${{ needs.init.outputs.integration_tests_test }}
          additional_options: ${{ needs.init.outputs.integration_tests_additional_options }}
          logfile: integration_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt
          logfile_artifact: ${{ needs.init.outputs.integration_tests_logfile_artifact }}
          output_files: ${{ needs.init.outputs.integration_tests_output_files }}
          output_artifact: integration-artifacts_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          coverage_path: ${{ needs.init.outputs.integration_tests_coverage_path }}
          coverage_artifact: ${{ needs.init.outputs.integration_tests_coverage_prefix }}_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          failure_pattern: ${{ needs.init.outputs.integration_tests_failure_pattern }}

      - name: 'Stop shop'
        uses: 'OXID-eSales/github-actions/stop_shop@v3'

  codeception_tests:
    needs: ['init', 'install_module', 'unit_tests', 'integration_tests']
    if: ${{ always() && needs.init.outputs.codeception_tests_skip != 'true' && needs.install_module.result == 'success' }}
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.codeception_tests_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.codeception_tests_matrix_mysql) }}
        template_engine: ${{ fromJSON(needs.init.outputs.codeception_tests_matrix_template_engine) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.codeception_tests_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Set options for smarty'
        if: ${{ matrix.template_engine == 'smarty' }}
        run: |
          MODULE_OPTIONS=""
          if [ "${{ needs.init.outputs.install_module_ids }}" != "" ]; then
            MODULE_OPTIONS="-e MODULE_IDS=${{ needs.init.outputs.install_module_ids }}"
          fi
          echo "CODECEPTION_CONTAINER_OPTIONS=-e THEME_ID=flow ${MODULE_OPTIONS}" | tee -a "$GITHUB_ENV"

      - name: 'Set options for twig'
        if: ${{ matrix.template_engine == 'twig' }}
        run: |
          MODULE_OPTIONS=""
          if [ "${{ needs.init.outputs.install_module_ids }}" != "" ]; then
            MODULE_OPTIONS="-e MODULE_IDS=${{ needs.init.outputs.install_module_ids }}"
          fi
          echo "CODECEPTION_CONTAINER_OPTIONS=-e THEME_ID=apex ${MODULE_OPTIONS}" | tee -a "$GITHUB_ENV"

      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v3'
        with:
          cached_shop: '${{ needs.init.outputs.install_module_cache_prefix}}_PHP${{matrix.php}}-MYSQL${{matrix.mysql}}'
          cache_bucket: ${{ needs.init.outputs.codeception_tests_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}
          docker_login: ${{ needs.init.outputs.codeception_tests_docker_login }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: 'Reconfigure codeception for smarty themes'
        if: ${{ matrix.template_engine == 'smarty' }}
        run: |
          perl -pi \
            -e 's#admin_twig#admin_smarty#g;' \
            -e 's#views/apex#views/flow/translations#g;' \
            'source/test-module/tests/Codeception/acceptance.suite.yml'

      - name: 'Install twig template engine and twig theme'
        if: ${{ matrix.template_engine == 'twig' }}
        uses: 'OXID-eSales/github-actions/composer_require@v3'
        with:
          container_name: ${{ needs.init.outputs.codeception_tests_container_name }}
          container_options: '${{ needs.init.outputs.codeception_tests_container_options }} ${{ env.CODECEPTION_CONTAINER_OPTIONS }}'
          container_method: 'exec'
          organisation: ${{ needs.init.outputs.codeception_tests_composer_require_organisation }}
          repositories: 'twig-component twig-admin-theme apex-theme'
          ref: ${{ needs.init.outputs.codeception_tests_composer_require_ref }}
          options: ${{ needs.init.outputs.codeception_tests_composer_require_options }}
          update: ${{ needs.init.outputs.codeception_tests_composer_require_update }}
          update_options: ${{ needs.init.outputs.codeception_tests_composer_require_update_options }}

      - name: 'Install smarty template engine and flow theme'
        if: ${{ matrix.template_engine == 'smarty' }}
        uses: 'OXID-eSales/github-actions/composer_require@v3'
        with:
          container_name: ${{ needs.init.outputs.codeception_tests_container_name }}
          container_options: '${{ needs.init.outputs.codeception_tests_container_options }} ${{ env.CODECEPTION_CONTAINER_OPTIONS }}'
          container_method: 'exec'
          organisation: ${{ needs.init.outputs.codeception_tests_composer_require_organisation }}
          repositories: 'smarty-component smarty-admin-theme flow-theme codeception-page-objects codeception-modules'
          ref: ${{ needs.init.outputs.codeception_tests_composer_require_ref }}
          options: ${{ needs.init.outputs.codeception_tests_composer_require_options }}
          update: ${{ needs.init.outputs.codeception_tests_composer_require_update }}
          update_options: ${{ needs.init.outputs.codeception_tests_composer_require_update_options }}

      - name: 'Composer configure and require ${{ needs.init.outputs.codeception_tests_composer_configure_install }}'
        if: ${{ needs.init.outputs.codeception_tests_composer_configure_install != '' }}
        uses: 'OXID-eSales/github-actions/composer_configure@v3'
        with:
          container_name: ${{ needs.init.outputs.codeception_tests_container_name }}
          container_options: '${{ needs.init.outputs.codeception_tests_container_options }} ${{ env.CODECEPTION_CONTAINER_OPTIONS }}'
          container_method: 'exec'
          organisation: ${{ needs.init.outputs.codeception_tests_composer_configure_organisation }}
          repositories: ${{ needs.init.outputs.codeception_tests_composer_configure_install }}
          ref: ${{ needs.init.outputs.codeception_tests_composer_configure_ref }}
          options: ${{ needs.init.outputs.codeception_tests_composer_configure_options }}
          update: ${{ needs.init.outputs.codeception_tests_composer_configure_update }}
          update_options: ${{ needs.init.outputs.codeception_tests_composer_configure_update_options }}
          enterprise_github_token: ${{ secrets.enterprise_github_token }}

      - name: 'Composer require ${{ needs.init.outputs.codeception_tests_composer_require_install }}'
        if: ${{ needs.init.outputs.codeception_tests_composer_require_install != '' }}
        uses: 'OXID-eSales/github-actions/composer_require@v3'
        with:
          container_name: ${{ needs.init.outputs.codeception_tests_container_name }}
          container_options: '${{ needs.init.outputs.codeception_tests_container_options }} ${{ env.CODECEPTION_CONTAINER_OPTIONS }}'
          container_method: 'exec'
          organisation: ${{ needs.init.outputs.codeception_tests_composer_require_organisation }}
          repositories: ${{ needs.init.outputs.codeception_tests_composer_require_install }}
          ref: ${{ needs.init.outputs.codeception_tests_composer_require_ref }}
          options: ${{ needs.init.outputs.codeception_tests_composer_require_options }}
          update: ${{ needs.init.outputs.codeception_tests_composer_require_update }}
          update_options: ${{ needs.init.outputs.codeception_tests_composer_require_update_options }}

      - name: 'Run codeception tests'
        uses: 'OXID-eSales/github-actions/codeception@v3'
        with:
          container_name: ${{ needs.init.outputs.codeception_tests_container_name }}
          container_options: '${{ needs.init.outputs.codeception_tests_container_options }} ${{ env.CODECEPTION_CONTAINER_OPTIONS }}'
          container_method: ${{ needs.init.outputs.codeception_tests_container_method }}
          build: ${{ needs.init.outputs.codeception_tests_build }}
          configuration: ${{ needs.init.outputs.codeception_tests_configuration }}
          suite: ${{ needs.init.outputs.codeception_tests_suite }}
          test: ${{ needs.init.outputs.codeception_tests_test }}
          additional_options: ${{ needs.init.outputs.codeception_tests_additional_options }}
          logfile: codeception_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_TE${{ matrix.template_engine}}_phpunit_log.txt
          logfile_artifact: ${{ needs.init.outputs.codeception_tests_logfile_artifact }}
          output_files: ${{ needs.init.outputs.codeception_tests_output_files }}
          output_artifact: codeception-artifacts_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_TE${{ matrix.template_engine}}
          coverage_path: ${{ needs.init.outputs.codeception_tests_coverage_path }}
          coverage_artifact: ${{ needs.init.outputs.codeception_tests_coverage_prefix }}_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          failure_pattern: ${{ needs.init.outputs.codeception_tests_failure_pattern }}

      - name: 'Stop shop'
        uses: 'OXID-eSales/github-actions/stop_shop@v3'

  shop_setup_tests:
    needs: ['init', 'prepare_shop', 'codeception_tests']
    if: ${{ always() && needs.init.outputs.shop_setup_tests_skip != 'true' && needs.prepare_shop.result == 'success' }}
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.shop_setup_tests_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.shop_setup_tests_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.shop_setup_tests_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v3'
        with:
          cached_shop: '${{ needs.init.outputs.prepare_shop_cache_prefix}}_PHP${{matrix.php}}-MYSQL${{matrix.mysql}}'
          cache_bucket: ${{ needs.init.outputs.shop_setup_tests_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}
          docker_login: ${{ needs.init.outputs.shop_setup_tests_docker_login }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: 'Composer configure and require ${{ needs.init.outputs.shop_setup_tests_composer_configure_install }}'
        if: ${{ needs.init.outputs.shop_setup_tests_composer_configure_install != '' }}
        uses: 'OXID-eSales/github-actions/composer_configure@v3'
        with:
          container_name: ${{ needs.init.outputs.shop_setup_tests_container_name }}
          container_options: ${{ needs.init.outputs.shop_setup_tests_container_options }}
          container_method: 'exec'
          organisation: ${{ needs.init.outputs.shop_setup_tests_composer_configure_organisation }}
          repositories: ${{ needs.init.outputs.shop_setup_tests_composer_configure_install }}
          ref: ${{ needs.init.outputs.shop_setup_tests_composer_configure_ref }}
          options: ${{ needs.init.outputs.shop_setup_tests_composer_configure_options }}
          update: ${{ needs.init.outputs.shop_setup_tests_composer_configure_update }}
          update_options: ${{ needs.init.outputs.shop_setup_tests_composer_configure_update_options }}
          enterprise_github_token: ${{ secrets.enterprise_github_token }}

      - name: 'Composer require ${{ needs.init.outputs.shop_setup_tests_composer_require_install }}'
        if: ${{ needs.init.outputs.shop_setup_tests_composer_require_install != '' }}
        uses: 'OXID-eSales/github-actions/composer_require@v3'
        with:
          container_name: ${{ needs.init.outputs.shop_setup_tests_container_name }}
          container_options: ${{ needs.init.outputs.shop_setup_tests_container_options }}
          container_method: 'exec'
          organisation: ${{ needs.init.outputs.shop_setup_tests_composer_require_organisation }}
          repositories: ${{ needs.init.outputs.shop_setup_tests_composer_require_install }}
          ref: ${{ needs.init.outputs.shop_setup_tests_composer_require_ref }}
          options: ${{ needs.init.outputs.shop_setup_tests_composer_require_options }}
          update: ${{ needs.init.outputs.shop_setup_tests_composer_require_update }}
          update_options: ${{ needs.init.outputs.shop_setup_tests_composer_require_update_options }}

      - name: 'Run codeception tests'
        uses: 'OXID-eSales/github-actions/codeception@v3'
        with:
          container_name: ${{ needs.init.outputs.shop_setup_tests_container_name }}
          container_options: ${{ needs.init.outputs.shop_setup_tests_container_options }}
          container_method: ${{ needs.init.outputs.shop_setup_tests_container_method }}
          build: ${{ needs.init.outputs.shop_setup_tests_build }}
          configuration: ${{ needs.init.outputs.shop_setup_tests_configuration }}
          suite: ${{ needs.init.outputs.shop_setup_tests_suite }}
          test: ${{ needs.init.outputs.shop_setup_tests_test }}
          additional_options: ${{ needs.init.outputs.shop_setup_tests_additional_options }}
          logfile: shop_setup_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt
          logfile_artifact: ${{ needs.init.outputs.shop_setup_tests_logfile_artifact }}
          output_files: ${{ needs.init.outputs.shop_setup_tests_output_files }}
          output_artifact: shop_setup-artifacts_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          coverage_path: ${{ needs.init.outputs.shop_setup_tests_coverage_path }}
          coverage_artifact: ${{ needs.init.outputs.shop_setup_tests_coverage_prefix }}_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          failure_pattern: ${{ needs.init.outputs.shop_setup_tests_failure_pattern }}

      - name: 'Stop shop'
        uses: 'OXID-eSales/github-actions/stop_shop@v3'

  deprecated_tests:
    needs: ['init', 'install_module', 'shop_setup_tests']
    if: ${{ always() && needs.init.outputs.deprecated_tests_skip != 'true' && needs.install_module.result == 'success' }}
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.deprecated_tests_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.deprecated_tests_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.deprecated_tests_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: Set swap space
        if: ${{ inputs.runs_on == '"ubuntu-latest"' }}
        uses: actionhippie/swap-space@v1
        with:
          size: 10G
          path: swapfile

      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v3'
        with:
          cached_shop: '${{ needs.init.outputs.install_module_cache_prefix}}_PHP${{matrix.php}}-MYSQL${{matrix.mysql}}'
          cache_bucket: ${{ needs.init.outputs.deprecated_tests_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}
          docker_login: ${{ needs.init.outputs.deprecated_tests_docker_login }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: 'Composer configure and require ${{ needs.init.outputs.deprecated_tests_composer_configure_install }}'
        if: ${{ needs.init.outputs.deprecated_tests_composer_configure_install != '' }}
        uses: 'OXID-eSales/github-actions/composer_configure@v3'
        with:
          container_name: ${{ needs.init.outputs.deprecated_tests_container_name }}
          container_options: ${{ needs.init.outputs.deprecated_tests_container_options }}
          container_method: 'exec'
          organisation: ${{ needs.init.outputs.deprecated_tests_composer_configure_organisation }}
          repositories: ${{ needs.init.outputs.deprecated_tests_composer_configure_install }}
          ref: ${{ needs.init.outputs.deprecated_tests_composer_configure_ref }}
          options: ${{ needs.init.outputs.deprecated_tests_composer_configure_options }}
          update: ${{ needs.init.outputs.deprecated_tests_composer_configure_update }}
          update_options: ${{ needs.init.outputs.deprecated_tests_composer_configure_update_options }}
          enterprise_github_token: ${{ secrets.enterprise_github_token }}

      - name: 'Composer require ${{ needs.init.outputs.deprecated_tests_composer_require_install }}'
        if: ${{ needs.init.outputs.deprecated_tests_composer_require_install != '' }}
        uses: 'OXID-eSales/github-actions/composer_require@v3'
        with:
          container_name: ${{ needs.init.outputs.deprecated_tests_container_name }}
          container_options: ${{ needs.init.outputs.deprecated_tests_container_options }}
          container_method: 'exec'
          organisation: ${{ needs.init.outputs.deprecated_tests_composer_require_organisation }}
          repositories: ${{ needs.init.outputs.deprecated_tests_composer_require_install }}
          ref: ${{ needs.init.outputs.deprecated_tests_composer_require_ref }}
          options: ${{ needs.init.outputs.deprecated_tests_composer_require_options }}
          update: ${{ needs.init.outputs.deprecated_tests_composer_require_update }}
          update_options: ${{ needs.init.outputs.deprecated_tests_composer_require_update_options }}

      - name: Copy config file
        run: cp source/vendor/oxid-esales/testing-library/test_config.yml.dist source/test_config.yml

      - name: 'Run deprecated tests'
        uses: 'OXID-eSales/github-actions/runtests@v3'
        with:
          container_name: ${{ needs.init.outputs.deprecated_tests_container_name }}
          container_options: ${{ needs.init.outputs.deprecated_tests_container_options }}
          container_method: ${{ needs.init.outputs.deprecated_tests_container_method }}
          test: ${{ needs.init.outputs.deprecated_tests_test }}
          additional_options: ${{ needs.init.outputs.deprecated_tests_additional_options }}
          logfile: deprecated_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt
          logfile_artifact: ${{ needs.init.outputs.deprecated_tests_logfile_artifact }}
          output_files: ${{ needs.init.outputs.deprecated_tests_output_files }}
          output_artifact: deprecated-artifacts_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          coverage_path: ${{ needs.init.outputs.deprecated_tests_coverage_path }}
          coverage_artifact: ${{ needs.init.outputs.deprecated_tests_coverage_prefix }}_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          failure_pattern: ${{ needs.init.outputs.deprecated_tests_failure_pattern }}

      - name: 'Stop shop'
        uses: 'OXID-eSales/github-actions/stop_shop@v3'

  sonarcloud:
    if: ${{ always() && needs.init.outputs.sonarcloud_skip != 'true' && needs.install_shop.result == 'success' }}
    needs:
      - init
      - prepare_shop
      - install_shop
      - install_module
      - unit_tests
      - integration_tests
      - codeception_tests
      - shop_setup_tests
      - deprecated_tests
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.sonarcloud_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.sonarcloud_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.sonarcloud_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: Checkout shop
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'SonarCloud Scan'
        uses: 'OXID-eSales/github-actions/sonarcloud@v3'
        with:
          coverage_artifact: coverage-reports_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          target_branch: ${{ needs.init.outputs.sonarcloud_target_branch }}
          github_ref_name: ${{ github.ref_name }}
          sonarcloud_organization: ${{ needs.init.outputs.sonarcloud_organization }}
          sonarcloud_project_key: ${{ needs.init.outputs.sonarcloud_project_key }}
          sonarcloud_project_name: ${{ needs.init.outputs.sonarcloud_project_name }}
          sonarcloud_parameters: ${{ needs.init.outputs.sonarcloud_parameters }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          github_token: ${{ github.token }}

      - name: 'SonarCloud Scan (internal)'
        if: ${{ needs.init.outputs.sonarcloud_internal_project_name != '' }}
        uses: 'OXID-eSales/github-actions/sonarcloud@v3'
        with:
          coverage_artifact: ${{ needs.init.outputs.sonarcloud_coverage_prefix }}_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          target_branch: ${{ needs.init.outputs.sonarcloud_target_branch }}
          github_ref_name: ${{ github.ref_name }}
          sonarcloud_organization: ${{ needs.init.outputs.sonarcloud_organization }}
          sonarcloud_project_key: ${{ needs.init.outputs.sonarcloud_internal_project_key }}
          sonarcloud_project_name: ${{ needs.init.outputs.sonarcloud_internal_project_name }}
          sonarcloud_parameters: ${{ needs.init.outputs.sonarcloud_internal_parameters }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          github_token: ${{ github.token }}

  phpcs_tests:
    needs: ['init', 'install_module', 'sonarcloud']
    if: ${{ always() && needs.init.outputs.phpcs_tests_skip != 'true' && needs.install_module.result == 'success' }}
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.phpcs_tests_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.phpcs_tests_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.phpcs_tests_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v3'
        with:
          cached_shop: '${{ needs.init.outputs.install_module_cache_prefix}}_PHP${{matrix.php}}-MYSQL${{matrix.mysql}}'
          cache_bucket: ${{ needs.init.outputs.phpcs_tests_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}
          docker_login: ${{ needs.init.outputs.phpcs_tests_docker_login }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: 'Run phpcs tests'
        uses: 'OXID-eSales/github-actions/phpcs@v3'
        with:
          container_name: ${{ needs.init.outputs.phpcs_tests_container_name }}
          container_options: ${{ needs.init.outputs.phpcs_tests_container_options }}
          container_method: ${{ needs.init.outputs.phpcs_tests_container_method }}
          git_ref: ${{ needs.init.outputs.phpcs_tests_git_ref }}
          diff_only: ${{ needs.init.outputs.phpcs_tests_diff_only}}
          filter: ${{ needs.init.outputs.phpcs_tests_filter}}
          additional_options: ${{ needs.init.outputs.phpcs_tests_additional_options }}
          logfile: phpcs_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_codesniff_log.txt
          logfile_artifact: ${{ needs.init.outputs.phpcs_tests_logfile_artifact }}
          failure_pattern: ${{ needs.init.outputs.phpcs_tests_failure_pattern }}

      - name: 'Stop shop'
        uses: 'OXID-eSales/github-actions/stop_shop@v3'

  styles:
    needs: ['init', 'install_module', 'sonarcloud']
    if: ${{ needs.init.outputs.styles_skip != 'true' }}
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.styles_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.styles_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.styles_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v3'
        with:
          cached_shop: '${{ needs.init.outputs.install_module_cache_prefix}}_PHP${{matrix.php}}-MYSQL${{matrix.mysql}}'
          cache_bucket: ${{ needs.init.outputs.styles_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}
          docker_login: ${{ needs.init.outputs.styles_docker_login }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: 'Run styles check'
        uses: 'OXID-eSales/github-actions/styles@v3'
        with:
          container_name: ${{ needs.init.outputs.styles_container_name }}
          container_options: ${{ needs.init.outputs.styles_container_options }}
          container_method: ${{ needs.init.outputs.styles_container_method }}
          output_files: ${{ needs.init.outputs.styles_output_files }}
          output_artifact: ${{ needs.init.outputs.styles_output_prefix}}_PHP${{ matrix.php }}

      - name: 'Stop shop'
        uses: 'OXID-eSales/github-actions/stop_shop@v3'

  finish:
    if: ${{ always() && needs.init.outputs.finish_skip != 'true' }}
    needs:
      - init
      - prepare_shop
      - install_shop
      - install_module
      - unit_tests
      - integration_tests
      - codeception_tests
      - shop_setup_tests
      - deprecated_tests
      - sonarcloud
      - phpcs_tests
      - styles
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    env:
      SLACK_WEBHOOK: "${{ secrets.SLACK_WEBHOOK_URL }}"
    steps:
      - name: Send custom JSON data to Slack workflow
        if: ${{ always() && env.SLACK_WEBHOOK != '' }}
        uses: 'OXID-eSales/github-actions/slack_status@v3'
        with:
          slack_webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          title: '${{ needs.init.outputs.finish_slack_title }}'
          summary_list: |
            Repository%${{ github.server_url }}/${{ github.repository }}
            Job%${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            Testplan%${{ inputs.testplan }}
          install_list: |
            prepare_shop%${{ needs.prepare_shop.result }}
            install_shop%${{ needs.install_shop.result }}
            install_module%${{ needs.install_module.result }}
          test_list: |
            unit_tests%${{ needs.unit_tests.result }}
            integration_tests%${{ needs.integration_tests.result }}
            codeception_tests%${{ needs.codeception_tests.result }}
            shop_setup_tests%${{ needs.shop_setup_tests.result }}
            deprecated_tests%${{ needs.deprecated_tests.result }}
          report_list: |
            sonarcloud%${{ needs.sonarcloud.result }}
            phpcs_tests%${{ needs.phpcs_tests.result }}
            styles%${{ needs.styles.result }}
