name: call-test_matrix
# Full test matrix for oxidshop_ce and oxidshop_ee
# This matrix runs the following jobs:
# - output parameters
# - prepare shop and cache it as preparedShop_<edition>-<ref>-<php_version>-<mysql_version>-<commit_sha>-<run>-<attempt>
# - install shop based on the prepared shop and cache it as shopInstallation_<edition>-<ref>-<php_version>-<mysql_version>-<commit_sha>-<run>-<attempt>
# - run unit tests using the cached shopInstallation
# - run integration tests  using the cached shopInstallation
# - run codeception tests  using the cached shopInstallation
# - run shop setup tests using the cached preparedShop
#
on:
  workflow_call:
    inputs:
      testplan:
        type: string
        description: 'Testplan to run'
        required: true
    secrets:
      enterprise_github_token:
        description: 'OAuth token to access enterprise repos'
        required: false
      DOCKER_HUB_USER:
        description: 'user for the docker login'
        required: false
      DOCKER_HUB_TOKEN:
        description: 'Token for the docker login'
        required: false
      CACHE_ENDPOINT:
        description: 'Endpoint for tespkg/actions-cache@v1'
        required: false # only for ee
      CACHE_ACCESS_KEY:
        description: 'Access key for tespkg/actions-cache@v1'
        required: false # only for ee
      CACHE_SECRET_KEY:
        description: 'Secret key for tespkg/actions-cache@v1'
        required: false # only for ee
      enterprise_github_token:
        required: false
        description: 'OAuth token to access enterprise repos'
  
jobs:
  init:
    runs-on: ${{ fromJSON(env.workflow_runs_on) }}
    steps:
      - name: 'Load Testplan'
        uses: 'OXID-eSales/github-actions/load_testplan@v0'
        with:
          testplan: ${{ inputs.testplan }}
      - name: Login to Docker Hub
        if: ${{ env.init_docker_login == 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          logout: false

  prepare_shop:
    needs: [ init ]
    strategy:
      matrix:
        php: ${{ fromJSON(env.workflow_matrix_php) }}
        mysql: ${{ fromJSON(env.workflow_matrix_mysql) }}
      fail-fast: false
    runs-on: ${{ fromJSON(env.workflow_runs_on) }}
    outputs:
      prepared_shop: ${{ steps.prepare_shop.outputs.prepared_shop }}
    steps:
      - name: 'Cleanup (pre)'
        if: ${{ env.prepare_shop_pre_cleanup_run }}
        uses: 'OXID-eSales/github-actions/cleanup_workspace@v0'
        with:
          clean_workspace: ${{ env.prepare_shop_pre_cleanup_clean_workspace }}
          kill_containers: ${{ env.prepare_shop_pre_cleanup_kill_containers }}
          prune_docker: ${{ env.prepare_shop_pre_cleanup_prune_docker }}

      - name: 'Prepare Shop'
        id: prepare_shop
        uses: 'OXID-eSales/github-actions/prepare_shop@v0'
        with:
          container: ${{ env.prepare_shop_container }}
          container_options: ${{ env.prepare_shop_container_options }}
          git_sdk_url: ${{ env.prepare_shop_git_sdk_url }}
          git_sdk_ref: ${{ env.prepare_shop_git_sdk_ref }}
          git_shop_url: ${{ env.prepare_shop_git_shop_url }}
          git_shop_ref: ${{ env.prepare_shop_git_shop_ref }}
          git_enterprise_ref: ${{ env.prepare_shop_git_enterprise_ref }}
          github_event_name: ${{ github.event_name }}
          github_event_number: ${{ github.event_number }}
          github_base_ref: ${{ github.base_ref }}
          github_sha: ${{ github.sha }}
          github_run_number: ${{ github.run_number }}
          github_run_attempt: ${{ github.run_attempt }}
          php: ${{ matrix.php }}
          mysql: ${{ matrix.mysql }}
          is_enterprise: ${{ env.prepare_shop_is_enterprise }}
          custom_ini_error_reporting: ${{ env.prepare_shop_custom_ini_error_reporting }}
          custom_ini_xdebug: ${{ env.prepare_shop_custom_ini_xdebug }}
          add_services: ${{ env.prepare_shop_add_services }}
          enterprise_github_token: ${{ secrets.enterprise_github_token }}
          cache_bucket: ${{ env.prepare_shop_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}

  install_shop:
    needs: [ prepare_shop ]
    strategy:
      matrix:
        php: ${{ fromJSON(env.workflow_matrix_php) }}
        mysql: ${{ fromJSON(env.workflow_matrix_mysql) }}
      fail-fast: false
    runs-on: ${{ fromJSON(env.workflow_runs_on) }}
    outputs:
      installed_shop: ${{ steps.install_shop.outputs.installed_shop }}
    steps:
      - name: 'Cleanup (pre)'
        if: ${{ env.install_shop_pre_cleanup_run }}
        uses: 'OXID-eSales/github-actions/cleanup_workspace@v0'
        with:
          clean_workspace: ${{ env.install_shop_pre_cleanup_clean_workspace }}
          kill_containers: ${{ env.install_shop_pre_cleanup_kill_containers }}
          prune_docker: ${{ env.install_shop_pre_cleanup_prune_docker }}

      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v0'
        with:
          cached_shop: ${{ needs.prepare_shop.outputs.prepared_shop }}
          cache_bucket: ${{ env.install_shop_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}        

      - name: 'Install shop'
        id: install_shop
        uses: 'OXID-eSales/github-actions/install_shop@v0'
        with:
          container: ${{ env.install_shop_container }}
          container_options: ${{ env.install_shop_container_options }}
          git_shop_ref: ${{ env.install_shop_git_shop_ref }}
          git_enterprise_ref: ${{ env.install_shop_git_enterprise_ref }}
          github_sha: ${{ github.sha }}
          github_run_number: ${{ github.run_number }}
          github_run_attempt: ${{ github.run_attempt }}
          php: ${{ matrix.php }}
          mysql: ${{ matrix.mysql }}
          is_enterprise: ${{ env.install_shop_is_enterprise }}
          config_idebug: ${{ env.install_shop_config_idebug }}
          output_artifact: 'Configs-${{ matrix.php }}-${{ matrix.mysql }}_install_shop'
          cache_bucket: ${{ env.install_shop_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}

  unit_tests:
    needs: [ install_shop ]
    strategy:
      matrix:
        php: ${{ fromJSON(env.workflow_matrix_php) }}
        mysql: ${{ fromJSON(env.workflow_matrix_mysql) }}
      fail-fast: false
    runs-on: ${{ fromJSON(env.workflow_runs_on) }}
    steps:
      - name: 'Cleanup (pre)'
        if: ${{ env.unit_tests_pre_cleanup_run }}
        uses: 'OXID-eSales/github-actions/cleanup_workspace@v0'
        with:
          clean_workspace: ${{ env.unit_tests_pre_cleanup_clean_workspace }}
          kill_containers: ${{ env.unit_tests_pre_cleanup_kill_containers }}
          prune_docker: ${{ env.unit_tests_pre_cleanup_prune_docker }}

      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v0'
        with:
          cached_shop: ${{ needs.install_shop.outputs.installed_shop }}
          cache_bucket: ${{ env.unit_tests_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}

      - name: 'Run unit tests'
        uses: 'OXID-eSales/github-actions/phpunit@v0'
        with:
          container: ${{ env.unit_tests_container }}
          container_options: ${{ env.unit_tests_container_options }}
          configuration: ${{ env.unit_tests_configuration }}
          test: ${{ env.unit_tests_test }}
          additional_options: ${{ env.unit_tests_additional_options }}
          logfile: unit_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt
          logfile_artifact: ${{ env.unit_tests_logfile_artifact }}
          output_files: ${{ env.unit_tests_output_files }}
          output_artifact: unit-artifacts_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          coverage_path: ${{ env.unit_tests_coverage_path }}
          coverage_artifact: unit-coverage-reports _PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          failure_pattern: ${{ env.unit_tests_failure_pattern }}

  integration_tests:
    needs: [ install_shop ]
    strategy:
      matrix:
        php: ${{ fromJSON(env.workflow_matrix_php) }}
        mysql: ${{ fromJSON(env.workflow_matrix_mysql) }}
      fail-fast: false
    runs-on: ${{ fromJSON(env.workflow_runs_on) }}
    steps:
      - name: 'Cleanup (pre)'
        if: ${{ env.integration_tests_pre_cleanup_run }}
        uses: 'OXID-eSales/github-actions/cleanup_workspace@v0'
        with:
          clean_workspace: ${{ env.integration_tests_pre_cleanup_clean_workspace }}
          kill_containers: ${{ env.integration_tests_pre_cleanup_kill_containers }}
          prune_docker: ${{ env.integration_tests_pre_cleanup_prune_docker }}

      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v0'
        with:
          cached_shop: ${{ needs.install_shop.outputs.installed_shop }}
          cache_bucket: ${{ env.integration_tests_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}

      - name: 'Run integration tests'
        if: inputs.is_enterprise == false
        uses: 'OXID-eSales/github-actions/phpunit@v0'
        with:
          container: ${{ env.integration_tests_container }}
          container_options: ${{ env.integration_tests_container_options }}
          configuration: ${{ env.integration_tests_configuration }}
          test: ${{ env.integration_tests_test }}
          additional_options: ${{ env.integration_tests_additional_options }}
          logfile: integration_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt
          logfile_artifact: ${{ env.integration_tests_logfile_artifact }}
          output_files: ${{ env.integration_tests_output_files }}
          output_artifact: integration-artifacts_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          coverage_path: ${{ env.integration_tests_coverage_path }}
          coverage_artifact: integration-coverage-reports _PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          failure_pattern: ${{ env.integration_tests_failure_pattern }}

  codeception_tests:
    needs: [ install_shop ]
    strategy:
      matrix:
        php: ${{ fromJSON(env.workflow_matrix_php) }}
        mysql: ${{ fromJSON(env.workflow_matrix_mysql) }}
      fail-fast: false
    runs-on: ${{ fromJSON(env.workflow_runs_on) }}
    steps:
      - name: 'Cleanup (pre)'
        if: ${{ env.codeception_tests_pre_cleanup_run }}
        uses: 'OXID-eSales/github-actions/cleanup_workspace@v0'
        with:
          clean_workspace: ${{ env.codeception_tests_pre_cleanup_clean_workspace }}
          kill_containers: ${{ env.codeception_tests_pre_cleanup_kill_containers }}
          prune_docker: ${{ env.codeception_tests_pre_cleanup_prune_docker }}

      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v0'
        with:
          cached_shop: ${{ needs.install_shop.outputs.installed_shop }}
          cache_bucket: ${{ env.codeception_tests_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}        

      - name: Install admin theme and template engine and APEX theme
        uses: 'OXID-eSales/github-actions/install_themes@v0'
        with:
          themes: 'oxid-esales/twig-admin-theme:dev-b-8.0.x oxid-esales/apex-theme:dev-b-7.1.x'

      - name: 'Run codeception tests'
        if: inputs.is_enterprise == false
        uses: 'OXID-eSales/github-actions/codeception@v0'
        with:
          container: ${{ env.codeception_tests_container }}
          container_options: ${{ env.codeception_tests_container_options }}
          configuration: ${{ env.codeception_tests_configuration }}
          test: ${{ env.codeception_tests_test }}
          additional_options: ${{ env.codeception_tests_additional_options }}
          logfile: codeception_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt
          logfile_artifact: ${{ env.codeception_tests_logfile_artifact }}
          output_files: ${{ env.codeception_tests_output_files }}
          output_artifact: codeception-artifacts_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          coverage_path: ${{ env.codeception_tests_coverage_path }}
          coverage_artifact: codeception-coverage-reports_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          failure_pattern: ${{ env.codeception_tests_failure_pattern }}
 
  shop_setup_tests:
    needs: [ prepare_shop ]
    strategy:
      matrix:
        php: ${{ fromJSON(env.workflow_matrix_php) }}
        mysql: ${{ fromJSON(env.workflow_matrix_mysql) }}
      fail-fast: false
    runs-on: ${{ fromJSON(env.workflow_runs_on) }}
    steps:
      - name: 'Cleanup (pre)'
        if: ${{ env.shop_setup_tests_pre_cleanup_run }}
        uses: 'OXID-eSales/github-actions/cleanup_workspace@v0'
        with:
          clean_workspace: ${{ env.shop_setup_tests_pre_cleanup_clean_workspace }}
          kill_containers: ${{ env.shop_setup_tests_pre_cleanup_kill_containers }}
          prune_docker: ${{ env.shop_setup_tests_pre_cleanup_prune_docker }}

      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v0'
        with:
          cached_shop: ${{ needs.prepare_shop.outputs.prepared_shop }}
          cache_bucket: ${{ env.shop_setup_tests_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}        

      - name: Install admin theme and template engine and APEX theme
        if: inputs.is_enterprise == false
        uses: 'OXID-eSales/github-actions/install_themes@v0'
        with:
          container: ${{ env.shop_setup_tests_container }}
          container_options: ${{ env.shop_setup_tests_container_options }}
          themes: ${{ env.shop_setup_tests_themes_install }}
          options: ${{ env.shop_setup_tests_themes_options }}
          update: ${{ env.shop_setup_tests_themes_update }}
          update_options: ${{ env.shop_setup_tests_themes_update_options }}

      - name: 'Run codeception tests'
        if: inputs.is_enterprise == false
        uses: 'OXID-eSales/github-actions/codeception@v0'
        with:
          container: ${{ env.shop_setup_tests_container }}
          container_options: ${{ env.shop_setup_tests_container_options }}
          configuration: ${{ env.shop_setup_tests_configuration }}
          test: ${{ env.shop_setup_tests_test }}
          additional_options: ${{ env.shop_setup_tests_additional_options }}
          logfile: shop_setup_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt
          logfile_artifact: ${{ env.shop_setup_tests_logfile_artifact }}
          output_files: ${{ env.shop_setup_tests_output_files }}
          output_artifact: shop_setup-artifacts_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          coverage_path: ${{ env.shop_setup_tests_coverage_path }}
          coverage_artifact: shop_setup-coverage-reports_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          failure_pattern: ${{ env.shop_setup_tests_failure_pattern }}

  finish:
    if: ${{ always() }}
    needs:
      - prepare_shop
      - install_shop
      - unit_tests
      - integration_tests
      - codeception_tests
      - shop_setup_tests
    runs-on: ${{ fromJSON(env.workflow_runs_on) }}
    steps:
      - name: 'Docker logout'
        if: ${{ env.finish_docker_logout }}
        shell: bash
        run: docker logout
