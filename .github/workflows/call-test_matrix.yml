name: call-test_matrix
# Full test matrix for oxidshop_ce and oxidshop_ee
# This matrix runs the following jobs:
# - output parameters
# - prepare shop and cache it as preparedShop_<edition>-<ref>-<php_version>-<mysql_version>-<commit_sha>-<run>-<attempt>
# - install shop based on the prepared shop and cache it as shopInstallation_<edition>-<ref>-<php_version>-<mysql_version>-<commit_sha>-<run>-<attempt>
# - run unit tests using the cached shopInstallation
# - run integration tests  using the cached shopInstallation
# - run codeception tests  using the cached shopInstallation
# - run shop setup tests using the cached preparedShop
# - run sonarcloud scan
#
on:
  workflow_call:
    inputs:
      testplan:
        type: string
        description: 'Testplan to run'
        required: true
      runs_on:
        type: string
        description: 'JSON string/array describing the runner'
        required: true
        default: '"ubuntu-latest"'
    secrets:
      DOCKER_HUB_USER:
        #description: 'user for the docker login'
        required: false
      DOCKER_HUB_TOKEN:
        #description: 'Token for the docker login'
        required: false
      CACHE_ENDPOINT:
        #description: 'Endpoint for tespkg/actions-cache@v1'
        required: false # only for ee
      CACHE_ACCESS_KEY:
        #description: 'Access key for tespkg/actions-cache@v1'
        required: false # only for ee
      CACHE_SECRET_KEY:
        #description: 'Secret key for tespkg/actions-cache@v1'
        required: false # only for ee
      enterprise_github_token:
        #description: 'OAuth token to access enterprise repos'
        required: false
      SONAR_TOKEN:
        #description: Token for sonarcloud access
        required: false
      SLACK_WEBHOOK_URL:
        required: false
        # description: Webhook for posting to SLACK
 
jobs:
  init:
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Load Testplan'
        id: yaml
        uses: 'OXID-eSales/github-actions/load_testplan@v0'
        with:
          testplan: ${{ inputs.testplan }}
      - name: 'Print Testplan'
        run: |
          PURPLE=$(echo -e "\033[0;35m")
          NO_COLOR=$(echo -e "\033[0m")
          cat <<EOF
            ${PURPLE}### workflow variables${NO_COLOR}
            workflow_matrix_mysql: ${{ steps.yaml.outputs.workflow_matrix_mysql}}
            workflow_matrix_php: ${{ steps.yaml.outputs.workflow_matrix_php}}
            ${PURPLE}### global variables${NO_COLOR}
            global_git_sdk_url: ${{ steps.yaml.outputs.global_git_sdk_url}}
            global_git_sdk_ref: ${{ steps.yaml.outputs.global_git_sdk_ref}}
            global_git_shop_url: ${{ steps.yaml.outputs.global_git_shop_url}}
            global_git_shop_ref: ${{ steps.yaml.outputs.global_git_shop_ref}}
            global_is_enterprise: ${{ steps.yaml.outputs.global_is_enterprise}}
            global_git_enterprise_ref: ${{ steps.yaml.outputs.global_git_enterprise_ref}}
            global_cache_bucket: ${{ steps.yaml.outputs.global_cache_bucket}}
            global_container: ${{ steps.yaml.outputs.global_container}}
            global_container_options: ${{ steps.yaml.outputs.global_container_options}}
            global_container_method: ${{ steps.yaml.outputs.global_container_method}}
            ${PURPLE}### init variables${NO_COLOR}
            init_docker_login: ${{ steps.yaml.outputs.init_docker_login}}
            ${PURPLE}### prepare_shop variables${NO_COLOR}
            prepare_shop_matrix_mysql: ${{ steps.yaml.outputs.prepare_shop_matrix_mysql}}
            prepare_shop_matrix_php: ${{ steps.yaml.outputs.prepare_shop_matrix_php}}
            prepare_shop_max_parallel: ${{ steps.yaml.outputs.prepare_shop_max_parallel}}
            prepare_shop_container: ${{ steps.yaml.outputs.prepare_shop_container}}
            prepare_shop_container_options: ${{ steps.yaml.outputs.prepare_shop_container_options}}
            prepare_shop_container_method: ${{ steps.yaml.outputs.prepare_shop_container_method}}
            prepare_shop_git_sdk_url: ${{ steps.yaml.outputs.prepare_shop_git_sdk_url}}
            prepare_shop_git_sdk_ref: ${{ steps.yaml.outputs.prepare_shop_git_sdk_ref}}
            prepare_shop_git_shop_url: ${{ steps.yaml.outputs.prepare_shop_git_shop_url}}
            prepare_shop_git_shop_ref: ${{ steps.yaml.outputs.prepare_shop_git_shop_ref}}
            prepare_shop_git_enterprise_ref: ${{ steps.yaml.outputs.prepare_shop_git_enterprise_ref}}
            prepare_shop_is_enterprise: ${{ steps.yaml.outputs.prepare_shop_is_enterprise}}
            prepare_shop_cache_bucket: ${{ steps.yaml.outputs.prepare_shop_cache_bucket}}
            prepare_shop_custom_ini_error_reporting: ${{ steps.yaml.outputs.prepare_shop_custom_ini_error_reporting}}
            prepare_shop_custom_ini_xdebug: ${{ steps.yaml.outputs.prepare_shop_custom_ini_xdebug}}
            prepare_shop_add_services: ${{ steps.yaml.outputs.prepare_shop_add_services}}
            prepare_shop_themes_install: ${{ steps.yaml.outputs.shop_setup_tests_themes_install}}
            prepare_shop_themes_options: ${{ steps.yaml.outputs.shop_setup_tests_themes_options}}
            prepare_shop_themes_update: ${{ steps.yaml.outputs.shop_setup_tests_themes_update}}
            prepare_shop_themes_update_options: ${{ steps.yaml.outputs.shop_setup_tests_themes_update_options}}      
            ${PURPLE}### install_shop variables${NO_COLOR}
            install_shop_matrix_mysql: ${{ steps.yaml.outputs.install_shop_matrix_mysql}}
            install_shop_matrix_php: ${{ steps.yaml.outputs.install_shop_matrix_php}}
            install_shop_max_parallel: ${{ steps.yaml.outputs.install_shop_max_parallel}}
            install_shop_container: ${{ steps.yaml.outputs.install_shop_container}}
            install_shop_container_options: ${{ steps.yaml.outputs.install_shop_container_options}}
            install_shop_container_method: ${{ steps.yaml.outputs.install_shop_container_method}}
            install_shop_git_shop_ref: ${{ steps.yaml.outputs.install_shop_git_shop_ref}}
            install_shop_git_enterprise_ref: ${{ steps.yaml.outputs.install_shop_git_enterprise_ref}}
            install_shop_is_enterprise: ${{ steps.yaml.outputs.install_shop_is_enterprise}}
            install_shop_cache_bucket: ${{ steps.yaml.outputs.install_shop_cache_bucket}}
            install_shop_config_idebug: ${{ steps.yaml.outputs.install_shop_config_idebug}}
            install_shop_output_files: ${{ steps.yaml.outputs.install_shop_output_files}}
            ${PURPLE}### unit_test variables${NO_COLOR}
            unit_tests_skip: ${{ steps.yaml.outputs.unit_tests_skip}}
            unit_tests_matrix_mysql: ${{ steps.yaml.outputs.unit_tests_matrix_mysql}}
            unit_tests_matrix_php: ${{ steps.yaml.outputs.unit_tests_matrix_php}}
            unit_tests_max_parallel: ${{ steps.yaml.outputs.unit_tests_max_parallel}}
            unit_tests_container: ${{ steps.yaml.outputs.unit_tests_container}}
            unit_tests_container_options: ${{ steps.yaml.outputs.unit_tests_container_options}}
            unit_tests_container_method: ${{ steps.yaml.outputs.unit_tests_container_method}}
            unit_tests_cache_bucket: ${{ steps.yaml.outputs.unit_tests_cache_bucket}}
            unit_tests_configuration: ${{ steps.yaml.outputs.unit_tests_configuration}}
            unit_tests_test: ${{ steps.yaml.outputs.unit_tests_test}}
            unit_tests_additional_options: ${{ steps.yaml.outputs.unit_tests_additional_options}}
            unit_tests_logfile_artifact: ${{ steps.yaml.outputs.unit_tests_logfile_artifact}}
            unit_tests_output_files: ${{ steps.yaml.outputs.unit_tests_output_files}}
            unit_tests_coverage_path: ${{ steps.yaml.outputs.unit_tests_coverage_path}}
            unit_tests_failure_pattern: ${{ steps.yaml.outputs.unit_tests_failure_pattern}}
            ${PURPLE}### integration_tests variables${NO_COLOR}
            integration_tests_skip: ${{ steps.yaml.outputs.integration_tests_skip}}
            integration_tests_matrix_mysql: ${{ steps.yaml.outputs.integration_tests_matrix_mysql}}
            integration_tests_matrix_php: ${{ steps.yaml.outputs.integration_tests_matrix_php}}
            integration_tests_max_parallel: ${{ steps.yaml.outputs.integration_tests_max_parallel}}
            integration_tests_container: ${{ steps.yaml.outputs.integration_tests_container}}
            integration_tests_container_options: ${{ steps.yaml.outputs.integration_tests_container_options}}
            integration_tests_container_method: ${{ steps.yaml.outputs.integration_tests_container_method}}
            integration_tests_cache_bucket: ${{ steps.yaml.outputs.integration_tests_cache_bucket}}
            integration_tests_configuration: ${{ steps.yaml.outputs.integration_tests_configuration}}
            integration_tests_test: ${{ steps.yaml.outputs.integration_tests_test}}
            integration_tests_additional_options: ${{ steps.yaml.outputs.integration_tests_additional_options}}
            integration_tests_logfile_artifact: ${{ steps.yaml.outputs.integration_tests_logfile_artifact}}
            integration_tests_output_files: ${{ steps.yaml.outputs.integration_tests_output_files}}
            integration_tests_coverage_path: ${{ steps.yaml.outputs.integration_tests_coverage_path}}
            integration_tests_failure_pattern: ${{ steps.yaml.outputs.integration_tests_failure_pattern}}
            ${PURPLE}### codeception_tests variables${NO_COLOR}
            codeception_tests_skip: ${{ steps.yaml.outputs.codeception_tests_skip}}
            codeception_tests_matrix_mysql: ${{ steps.yaml.outputs.codeception_tests_matrix_mysql}}
            codeception_tests_matrix_php: ${{ steps.yaml.outputs.codeception_tests_matrix_php}}
            codeception_tests_max_parallel: ${{ steps.yaml.outputs.codeception_tests_max_parallel}}
            codeception_tests_container: ${{ steps.yaml.outputs.codeception_tests_container}}
            codeception_tests_container_options: ${{ steps.yaml.outputs.codeception_tests_container_options}}
            codeception_tests_container_method: ${{ steps.yaml.outputs.codeception_tests_container_method}}
            codeception_tests_cache_bucket: ${{ steps.yaml.outputs.codeception_tests_cache_bucket}}
            codeception_tests_themes_install: ${{ steps.yaml.outputs.shop_setup_tests_themes_install}}
            codeception_tests_themes_options: ${{ steps.yaml.outputs.shop_setup_tests_themes_options}}
            codeception_tests_themes_update: ${{ steps.yaml.outputs.shop_setup_tests_themes_update}}
            codeception_tests_themes_update_options: ${{ steps.yaml.outputs.shop_setup_tests_themes_update_options}}
            codeception_tests_configuration: ${{ steps.yaml.outputs.codeception_tests_configuration}}
            codeception_tests_build: ${{ steps.yaml.outputs.codeception_tests_build}}
            codeception_tests_suite: ${{ steps.yaml.outputs.codeception_tests_suite}}
            codeception_tests_test: ${{ steps.yaml.outputs.codeception_tests_test}}
            codeception_tests_additional_options: ${{ steps.yaml.outputs.codeception_tests_additional_options}}
            codeception_tests_logfile_artifact: ${{ steps.yaml.outputs.codeception_tests_logfile_artifact}}
            codeception_tests_output_files: ${{ steps.yaml.outputs.codeception_tests_output_files}}
            codeception_tests_coverage_path: ${{ steps.yaml.outputs.codeception_tests_coverage_path}}
            codeception_tests_failure_pattern: ${{ steps.yaml.outputs.codeception_tests_failure_pattern}}
            ${PURPLE}### shop_setup_tests variables${NO_COLOR}
            shop_setup_tests_skip: ${{ steps.yaml.outputs.shop_setup_tests_skip}}
            shop_setup_tests_matrix_mysql: ${{ steps.yaml.outputs.shop_setup_tests_matrix_mysql}}
            shop_setup_tests_matrix_php: ${{ steps.yaml.outputs.shop_setup_tests_matrix_php}}
            shop_setup_tests_max_parallel: ${{ steps.yaml.outputs.shop_setup_tests_max_parallel}}
            shop_setup_tests_container: ${{ steps.yaml.outputs.shop_setup_tests_container}}
            shop_setup_tests_container_options: ${{ steps.yaml.outputs.shop_setup_tests_container_options}}
            shop_setup_tests_container_method: ${{ steps.yaml.outputs.shop_setup_tests_container_method}}
            shop_setup_tests_cache_bucket: ${{ steps.yaml.outputs.shop_setup_tests_cache_bucket}}
            shop_setup_tests_themes_install: ${{ steps.yaml.outputs.shop_setup_tests_themes_install}}
            shop_setup_tests_themes_options: ${{ steps.yaml.outputs.shop_setup_tests_themes_options}}
            shop_setup_tests_themes_update: ${{ steps.yaml.outputs.shop_setup_tests_themes_update}}
            shop_setup_tests_themes_update_options: ${{ steps.yaml.outputs.shop_setup_tests_themes_update_options}}
            shop_setup_tests_configuration: ${{ steps.yaml.outputs.shop_setup_tests_configuration}}
            shop_setup_tests_build: ${{ steps.yaml.outputs.shop_setup_tests_build}}
            shop_setup_tests_suite: ${{ steps.yaml.outputs.shop_setup_tests_suite}}
            shop_setup_tests_test: ${{ steps.yaml.outputs.shop_setup_tests_test}}
            shop_setup_tests_additional_options: ${{ steps.yaml.outputs.shop_setup_tests_additional_options}}
            shop_setup_tests_logfile_artifact: ${{ steps.yaml.outputs.shop_setup_tests_logfile_artifact}}
            shop_setup_tests_output_files: ${{ steps.yaml.outputs.shop_setup_tests_output_files}}
            shop_setup_tests_coverage_path: ${{ steps.yaml.outputs.shop_setup_tests_coverage_path}}
            shop_setup_tests_failure_pattern: ${{ steps.yaml.outputs.shop_setup_tests_failure_pattern}}
            ${PURPLE}### deprecated_test variables${NO_COLOR}
            deprecated_tests_skip: ${{ steps.yaml.outputs.deprecated_tests_skip}}
            deprecated_tests_matrix_mysql: ${{ steps.yaml.outputs.deprecated_tests_matrix_mysql}}
            deprecated_tests_matrix_php: ${{ steps.yaml.outputs.deprecated_tests_matrix_php}}
            deprecated_tests_max_parallel: ${{ steps.yaml.outputs.deprecated_tests_max_parallel}}
            deprecated_tests_container: ${{ steps.yaml.outputs.deprecated_tests_container}}
            deprecated_tests_container_options: ${{ steps.yaml.outputs.deprecated_tests_container_options}}
            deprecated_tests_container_method: ${{ steps.yaml.outputs.deprecated_tests_container_method}}
            deprecated_tests_cache_bucket: ${{ steps.yaml.outputs.deprecated_tests_cache_bucket}}
            deprecated_tests_themes_install: ${{ steps.yaml.outputs.deprecated_tests_themes_install}}
            deprecated_tests_themes_options: ${{ steps.yaml.outputs.deprecated_tests_themes_options}}
            deprecated_tests_themes_update: ${{ steps.yaml.outputs.deprecated_tests_themes_update}}
            deprecated_tests_themes_update_options: ${{ steps.yaml.outputs.deprecated_tests_themes_update_options}}
            deprecated_tests_test: ${{ steps.yaml.outputs.deprecated_tests_test}}
            deprecated_tests_additional_options: ${{ steps.yaml.outputs.deprecated_tests_additional_options}}
            deprecated_tests_logfile_artifact: ${{ steps.yaml.outputs.deprecated_tests_logfile_artifact}}
            deprecated_tests_output_files: ${{ steps.yaml.outputs.deprecated_tests_output_files}}
            deprecated_tests_coverage_path: ${{ steps.yaml.outputs.deprecated_tests_coverage_path}}
            deprecated_tests_failure_pattern: ${{ steps.yaml.outputs.deprecated_tests_failure_pattern}}
            ${PURPLE}### sonarcloud variables${NO_COLOR}
            sonarcloud_skip: ${{ steps.yaml.outputs.sonarcloud_skip}}
            sonarcloud_matrix_mysql: ${{ steps.yaml.outputs.sonarcloud_matrix_mysql}}
            sonarcloud_matrix_php: ${{ steps.yaml.outputs.sonarcloud_matrix_php}}
            sonarcloud_max_parallel: ${{ steps.yaml.outputs.sonarcloud_max_parallel}}
            sonarcloud_target_branch: ${{ steps.yaml.outputs.sonarcloud_target_branch}}
            sonarcloud_organization: ${{ steps.yaml.outputs.sonarcloud_organization}}
            sonarcloud_project_key: ${{ steps.yaml.outputs.sonarcloud_project_key}}
            sonarcloud_project_name: ${{ steps.yaml.outputs.sonarcloud_project_name}}
            sonarcloud_parameters: ${{ steps.yaml.outputs.sonarcloud_parameters}}
            sonarcloud_internal_project_name: ${{ steps.yaml.outputs.sonarcloud_internal_project_name}}
            sonarcloud_internal_parameters: ${{ steps.yaml.outputs.sonarcloud_internal_parameters}}
            ${PURPLE}### finish variables${NO_COLOR}
            finish_skip: ${{ steps.yaml.outputs.finish_skip}}
            finish_matrix_mysql: ${{ steps.yaml.outputs.finish_matrix_mysql}}
            finish_matrix_php: ${{ steps.yaml.outputs.finish_matrix_php}}
            finish_docker_logout: ${{ steps.yaml.outputs.finish_docker_logout}}
            EOF
      - name: Login to Docker Hub
        if: ${{ steps.yaml.outputs.init_docker_login == 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          logout: false
    outputs:
      # workflow variables
      workflow_matrix_mysql: ${{ steps.yaml.outputs.workflow_matrix_mysql}}
      workflow_matrix_php: ${{ steps.yaml.outputs.workflow_matrix_php}}
      # global variables
      global_git_sdk_url: ${{ steps.yaml.outputs.global_git_sdk_url}}
      global_git_sdk_ref: ${{ steps.yaml.outputs.global_git_sdk_ref}}
      global_git_shop_url: ${{ steps.yaml.outputs.global_git_shop_url}}
      global_git_shop_ref: ${{ steps.yaml.outputs.global_git_shop_ref}}
      global_is_enterprise: ${{ steps.yaml.outputs.global_is_enterprise}}
      global_git_enterprise_ref: ${{ steps.yaml.outputs.global_git_enterprise_ref}}
      global_cache_bucket: ${{ steps.yaml.outputs.global_cache_bucket}}
      global_container: ${{ steps.yaml.outputs.global_container}}
      global_container_options: ${{ steps.yaml.outputs.global_container_options}}
      global_container_method: ${{ steps.yaml.outputs.global_container_method}}
      # init variables
      init_docker_login: ${{ steps.yaml.outputs.init_docker_login}}
      # prepare_shop variables
      prepare_shop_matrix_mysql: ${{ steps.yaml.outputs.prepare_shop_matrix_mysql}}
      prepare_shop_matrix_php: ${{ steps.yaml.outputs.prepare_shop_matrix_php}}
      prepare_shop_max_parallel: ${{ steps.yaml.outputs.prepare_shop_max_parallel}}
      prepare_shop_container: ${{ steps.yaml.outputs.prepare_shop_container}}
      prepare_shop_container_options: ${{ steps.yaml.outputs.prepare_shop_container_options}}
      prepare_shop_container_method: ${{ steps.yaml.outputs.prepare_shop_container_method}}
      prepare_shop_git_sdk_url: ${{ steps.yaml.outputs.prepare_shop_git_sdk_url}}
      prepare_shop_git_sdk_ref: ${{ steps.yaml.outputs.prepare_shop_git_sdk_ref}}
      prepare_shop_git_shop_url: ${{ steps.yaml.outputs.prepare_shop_git_shop_url}}
      prepare_shop_git_shop_ref: ${{ steps.yaml.outputs.prepare_shop_git_shop_ref}}
      prepare_shop_git_enterprise_ref: ${{ steps.yaml.outputs.prepare_shop_git_enterprise_ref}}
      prepare_shop_is_enterprise: ${{ steps.yaml.outputs.prepare_shop_is_enterprise}}
      prepare_shop_cache_bucket: ${{ steps.yaml.outputs.prepare_shop_cache_bucket}}
      prepare_shop_custom_ini_error_reporting: ${{ steps.yaml.outputs.prepare_shop_custom_ini_error_reporting}}
      prepare_shop_custom_ini_xdebug: ${{ steps.yaml.outputs.prepare_shop_custom_ini_xdebug}}
      prepare_shop_add_services: ${{ steps.yaml.outputs.prepare_shop_add_services}}
      prepare_shop_themes_install: ${{ steps.yaml.outputs.shop_setup_tests_themes_install}}
      prepare_shop_themes_options: ${{ steps.yaml.outputs.shop_setup_tests_themes_options}}
      prepare_shop_themes_update: ${{ steps.yaml.outputs.shop_setup_tests_themes_update}}
      prepare_shop_themes_update_options: ${{ steps.yaml.outputs.shop_setup_tests_themes_update_options}}    
      # install_shop variables
      install_shop_matrix_mysql: ${{ steps.yaml.outputs.install_shop_matrix_mysql}}
      install_shop_matrix_php: ${{ steps.yaml.outputs.install_shop_matrix_php}}
      install_shop_max_parallel: ${{ steps.yaml.outputs.install_shop_max_parallel}}
      install_shop_container: ${{ steps.yaml.outputs.install_shop_container}}
      install_shop_container_options: ${{ steps.yaml.outputs.install_shop_container_options}}
      install_shop_container_method: ${{ steps.yaml.outputs.install_shop_container_method}}
      install_shop_git_shop_ref: ${{ steps.yaml.outputs.install_shop_git_shop_ref}}
      install_shop_git_enterprise_ref: ${{ steps.yaml.outputs.install_shop_git_enterprise_ref}}
      install_shop_is_enterprise: ${{ steps.yaml.outputs.install_shop_is_enterprise}}
      install_shop_cache_bucket: ${{ steps.yaml.outputs.install_shop_cache_bucket}}
      install_shop_config_idebug: ${{ steps.yaml.outputs.install_shop_config_idebug}}
      install_shop_output_files: ${{ steps.yaml.outputs.install_shop_output_files}}
      # unit_test variables
      unit_tests_skip: ${{ steps.yaml.outputs.unit_tests_skip}}
      unit_tests_matrix_mysql: ${{ steps.yaml.outputs.unit_tests_matrix_mysql}}
      unit_tests_matrix_php: ${{ steps.yaml.outputs.unit_tests_matrix_php}}
      unit_tests_max_parallel: ${{ steps.yaml.outputs.unit_tests_max_parallel}}
      unit_tests_container: ${{ steps.yaml.outputs.unit_tests_container}}
      unit_tests_container_options: ${{ steps.yaml.outputs.unit_tests_container_options}}
      unit_tests_container_method: ${{ steps.yaml.outputs.unit_tests_container_method}}
      unit_tests_cache_bucket: ${{ steps.yaml.outputs.unit_tests_cache_bucket}}
      unit_tests_configuration: ${{ steps.yaml.outputs.unit_tests_configuration}}
      unit_tests_test: ${{ steps.yaml.outputs.unit_tests_test}}
      unit_tests_additional_options: ${{ steps.yaml.outputs.unit_tests_additional_options}}
      unit_tests_logfile_artifact: ${{ steps.yaml.outputs.unit_tests_logfile_artifact}}
      unit_tests_output_files: ${{ steps.yaml.outputs.unit_tests_output_files}}
      unit_tests_coverage_path: ${{ steps.yaml.outputs.unit_tests_coverage_path}}
      unit_tests_failure_pattern: ${{ steps.yaml.outputs.unit_tests_failure_pattern}}
      # integration_tests variables
      integration_tests_skip: ${{ steps.yaml.outputs.integration_tests_skip}}
      integration_tests_matrix_mysql: ${{ steps.yaml.outputs.integration_tests_matrix_mysql}}
      integration_tests_matrix_php: ${{ steps.yaml.outputs.integration_tests_matrix_php}}
      integration_tests_max_parallel: ${{ steps.yaml.outputs.integration_tests_max_parallel}}
      integration_tests_container: ${{ steps.yaml.outputs.integration_tests_container}}
      integration_tests_container_options: ${{ steps.yaml.outputs.integration_tests_container_options}}
      integration_tests_container_method: ${{ steps.yaml.outputs.integration_tests_container_method}}
      integration_tests_cache_bucket: ${{ steps.yaml.outputs.integration_tests_cache_bucket}}
      integration_tests_configuration: ${{ steps.yaml.outputs.integration_tests_configuration}}
      integration_tests_test: ${{ steps.yaml.outputs.integration_tests_test}}
      integration_tests_additional_options: ${{ steps.yaml.outputs.integration_tests_additional_options}}
      integration_tests_logfile_artifact: ${{ steps.yaml.outputs.integration_tests_logfile_artifact}}
      integration_tests_output_files: ${{ steps.yaml.outputs.integration_tests_output_files}}
      integration_tests_coverage_path: ${{ steps.yaml.outputs.integration_tests_coverage_path}}
      integration_tests_failure_pattern: ${{ steps.yaml.outputs.integration_tests_failure_pattern}}
      # codeception_tests variables
      codeception_tests_skip: ${{ steps.yaml.outputs.codeception_tests_skip}}
      codeception_tests_matrix_mysql: ${{ steps.yaml.outputs.codeception_tests_matrix_mysql}}
      codeception_tests_matrix_php: ${{ steps.yaml.outputs.codeception_tests_matrix_php}}
      codeception_tests_max_parallel: ${{ steps.yaml.outputs.codeception_tests_max_parallel}}
      codeception_tests_container: ${{ steps.yaml.outputs.codeception_tests_container}}
      codeception_tests_container_options: ${{ steps.yaml.outputs.codeception_tests_container_options}}
      codeception_tests_container_method: ${{ steps.yaml.outputs.codeception_tests_container_method}}
      codeception_tests_cache_bucket: ${{ steps.yaml.outputs.codeception_tests_cache_bucket}}
      codeception_tests_themes_install: ${{ steps.yaml.outputs.shop_setup_tests_themes_install}}
      codeception_tests_themes_options: ${{ steps.yaml.outputs.shop_setup_tests_themes_options}}
      codeception_tests_themes_update: ${{ steps.yaml.outputs.shop_setup_tests_themes_update}}
      codeception_tests_themes_update_options: ${{ steps.yaml.outputs.shop_setup_tests_themes_update_options}}
      codeception_tests_configuration: ${{ steps.yaml.outputs.codeception_tests_configuration}}
      codeception_tests_build: ${{ steps.yaml.outputs.codeception_tests_build}}
      codeception_tests_suite: ${{ steps.yaml.outputs.codeception_tests_suite}}
      codeception_tests_test: ${{ steps.yaml.outputs.codeception_tests_test}}
      codeception_tests_additional_options: ${{ steps.yaml.outputs.codeception_tests_additional_options}}
      codeception_tests_logfile_artifact: ${{ steps.yaml.outputs.codeception_tests_logfile_artifact}}
      codeception_tests_output_files: ${{ steps.yaml.outputs.codeception_tests_output_files}}
      codeception_tests_coverage_path: ${{ steps.yaml.outputs.codeception_tests_coverage_path}}
      codeception_tests_failure_pattern: ${{ steps.yaml.outputs.codeception_tests_failure_pattern}}
      # shop_setup_tests variables
      shop_setup_tests_skip: ${{ steps.yaml.outputs.shop_setup_tests_skip}}
      shop_setup_tests_matrix_mysql: ${{ steps.yaml.outputs.shop_setup_tests_matrix_mysql}}
      shop_setup_tests_matrix_php: ${{ steps.yaml.outputs.shop_setup_tests_matrix_php}}
      shop_setup_tests_max_parallel: ${{ steps.yaml.outputs.shop_setup_tests_max_parallel}}
      shop_setup_tests_container: ${{ steps.yaml.outputs.shop_setup_tests_container}}
      shop_setup_tests_container_options: ${{ steps.yaml.outputs.shop_setup_tests_container_options}}
      shop_setup_tests_container_method: ${{ steps.yaml.outputs.shop_setup_tests_container_method}}
      shop_setup_tests_cache_bucket: ${{ steps.yaml.outputs.shop_setup_tests_cache_bucket}}
      shop_setup_tests_themes_install: ${{ steps.yaml.outputs.shop_setup_tests_themes_install}}
      shop_setup_tests_themes_options: ${{ steps.yaml.outputs.shop_setup_tests_themes_options}}
      shop_setup_tests_themes_update: ${{ steps.yaml.outputs.shop_setup_tests_themes_update}}
      shop_setup_tests_themes_update_options: ${{ steps.yaml.outputs.shop_setup_tests_themes_update_options}}
      shop_setup_tests_configuration: ${{ steps.yaml.outputs.shop_setup_tests_configuration}}
      shop_setup_tests_build: ${{ steps.yaml.outputs.shop_setup_tests_build}}
      shop_setup_tests_suite: ${{ steps.yaml.outputs.shop_setup_tests_suite}}
      shop_setup_tests_test: ${{ steps.yaml.outputs.shop_setup_tests_test}}
      shop_setup_tests_additional_options: ${{ steps.yaml.outputs.shop_setup_tests_additional_options}}
      shop_setup_tests_logfile_artifact: ${{ steps.yaml.outputs.shop_setup_tests_logfile_artifact}}
      shop_setup_tests_output_files: ${{ steps.yaml.outputs.shop_setup_tests_output_files}}
      shop_setup_tests_coverage_path: ${{ steps.yaml.outputs.shop_setup_tests_coverage_path}}
      shop_setup_tests_failure_pattern: ${{ steps.yaml.outputs.shop_setup_tests_failure_pattern}}
      # deprecated_test variables
      deprecated_tests_skip: ${{ steps.yaml.outputs.deprecated_tests_skip}}
      deprecated_tests_matrix_mysql: ${{ steps.yaml.outputs.deprecated_tests_matrix_mysql}}
      deprecated_tests_matrix_php: ${{ steps.yaml.outputs.deprecated_tests_matrix_php}}
      deprecated_tests_max_parallel: ${{ steps.yaml.outputs.deprecated_tests_max_parallel}}
      deprecated_tests_container: ${{ steps.yaml.outputs.deprecated_tests_container}}
      deprecated_tests_container_options: ${{ steps.yaml.outputs.deprecated_tests_container_options}}
      deprecated_tests_container_method: ${{ steps.yaml.outputs.deprecated_tests_container_method}}
      deprecated_tests_cache_bucket: ${{ steps.yaml.outputs.deprecated_tests_cache_bucket}}
      deprecated_tests_themes_install: ${{ steps.yaml.outputs.deprecated_tests_themes_install}}
      deprecated_tests_themes_options: ${{ steps.yaml.outputs.deprecated_tests_themes_options}}
      deprecated_tests_themes_update: ${{ steps.yaml.outputs.deprecated_tests_themes_update}}
      deprecated_tests_themes_update_options: ${{ steps.yaml.outputs.deprecated_tests_themes_update_options}}
      deprecated_tests_test: ${{ steps.yaml.outputs.deprecated_tests_test}}
      deprecated_tests_additional_options: ${{ steps.yaml.outputs.deprecated_tests_additional_options}}
      deprecated_tests_logfile_artifact: ${{ steps.yaml.outputs.deprecated_tests_logfile_artifact}}
      deprecated_tests_output_files: ${{ steps.yaml.outputs.deprecated_tests_output_files}}
      deprecated_tests_coverage_path: ${{ steps.yaml.outputs.deprecated_tests_coverage_path}}
      deprecated_tests_failure_pattern: ${{ steps.yaml.outputs.deprecated_tests_failure_pattern}}
      # sonarcloud variables
      sonarcloud_skip: ${{ steps.yaml.outputs.sonarcloud_skip}}
      sonarcloud_matrix_mysql: ${{ steps.yaml.outputs.sonarcloud_matrix_mysql}}
      sonarcloud_matrix_php: ${{ steps.yaml.outputs.sonarcloud_matrix_php}}
      sonarcloud_max_parallel: ${{ steps.yaml.outputs.sonarcloud_max_parallel}}
      sonarcloud_target_branch: ${{ steps.yaml.outputs.sonarcloud_target_branch}}
      sonarcloud_organization: ${{ steps.yaml.outputs.sonarcloud_organization}}
      sonarcloud_project_key: ${{ steps.yaml.outputs.sonarcloud_project_key}}
      sonarcloud_project_name: ${{ steps.yaml.outputs.sonarcloud_project_name}}
      sonarcloud_parameters: ${{ steps.yaml.outputs.sonarcloud_parameters}}
      sonarcloud_internal_project_name: ${{ steps.yaml.outputs.sonarcloud_internal_project_name}}
      sonarcloud_internal_parameters: ${{ steps.yaml.outputs.sonarcloud_internal_parameters}}
      
      # finish variables
      finish_skip: ${{ steps.yaml.outputs.finish_skip}}
      finish_matrix_mysql: ${{ steps.yaml.outputs.finish_matrix_mysql}}
      finish_matrix_php: ${{ steps.yaml.outputs.finish_matrix_php}}
      finish_docker_logout: ${{ steps.yaml.outputs.finish_docker_logout}}

  prepare_shop:
    needs: init
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.prepare_shop_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.prepare_shop_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.prepare_shop_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    outputs:
      prepared_shop: ${{ steps.prepare_shop.outputs.prepared_shop }}
    steps:
      - name: 'Prepare Shop'
        id: prepare_shop
        uses: 'OXID-eSales/github-actions/prepare_shop@v1'
        with:
          container: ${{ needs.init.outputs.prepare_shop_container }}
          container_options: ${{ needs.init.outputs.prepare_shop_container_options }}
          container_method: ${{ needs.init.outputs.prepare_shop_container_method }}
          git_sdk_url: ${{ needs.init.outputs.prepare_shop_git_sdk_url }}
          git_sdk_ref: ${{ needs.init.outputs.prepare_shop_git_sdk_ref }}
          git_shop_url: ${{ needs.init.outputs.prepare_shop_git_shop_url }}
          git_shop_ref: ${{ needs.init.outputs.prepare_shop_git_shop_ref }}
          git_enterprise_ref: ${{ needs.init.outputs.prepare_shop_git_enterprise_ref }}
          github_event_name: ${{ github.event_name }}
          github_event_number: ${{ github.event_number }}
          github_base_ref: ${{ github.base_ref }}
          github_sha: ${{ github.sha }}
          github_run_number: ${{ github.run_number }}
          github_run_attempt: ${{ github.run_attempt }}
          php: ${{ matrix.php }}
          mysql: ${{ matrix.mysql }}
          is_enterprise: ${{ needs.init.outputs.prepare_shop_is_enterprise }}
          custom_ini_error_reporting: ${{ needs.init.outputs.prepare_shop_custom_ini_error_reporting }}
          custom_ini_xdebug: ${{ needs.init.outputs.prepare_shop_custom_ini_xdebug }}
          add_services: ${{ needs.init.outputs.prepare_shop_add_services }}
          themes_install: ${{ needs.init.outputs.shop_setup_tests_themes_install}}
          themes_options: ${{ needs.init.outputs.shop_setup_tests_themes_options}}
          themes_update: ${{ needs.init.outputs.shop_setup_tests_themes_update}}
          themes_update_options: ${{ needs.init.outputs.shop_setup_tests_themes_update_options}}
          enterprise_github_token: ${{ secrets.enterprise_github_token }}
          cache_bucket: ${{ needs.init.outputs.prepare_shop_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}
          

  install_shop:
    needs: ['init','prepare_shop']
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.install_shop_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.install_shop_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.install_shop_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    outputs:
      installed_shop: ${{ steps.install_shop.outputs.installed_shop }}
    steps:
      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v1'
        with:
          cached_shop: ${{ needs.prepare_shop.outputs.prepared_shop }}
          cache_bucket: ${{ needs.init.outputs.install_shop_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}        

      - name: 'Install shop'
        id: install_shop
        uses: 'OXID-eSales/github-actions/install_shop@v1'
        with:
          container: ${{ needs.init.outputs.install_shop_container }}
          container_options: ${{ needs.init.outputs.install_shop_container_options }}
          container_method: ${{ needs.init.outputs.install_shop_container_method }}
          git_shop_ref: ${{ needs.init.outputs.install_shop_git_shop_ref }}
          git_enterprise_ref: ${{ needs.init.outputs.install_shop_git_enterprise_ref }}
          github_sha: ${{ github.sha }}
          github_run_number: ${{ github.run_number }}
          github_run_attempt: ${{ github.run_attempt }}
          php: ${{ matrix.php }}
          mysql: ${{ matrix.mysql }}
          is_enterprise: ${{ needs.init.outputs.install_shop_is_enterprise }}
          config_idebug: ${{ needs.init.outputs.install_shop_config_idebug }}
          output_artifact: 'Configs-${{ matrix.php }}-${{ matrix.mysql }}_install_shop'
          cache_bucket: ${{ needs.init.outputs.install_shop_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}

  unit_tests:
    needs: ['init', 'install_shop']
    if: ${{ needs.init.outputs.unit_tests_skip != 'true' }}
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.unit_tests_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.unit_tests_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.unit_tests_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v1'
        with:
          cached_shop: ${{ needs.install_shop.outputs.installed_shop }}
          cache_bucket: ${{ needs.init.outputs.unit_tests_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}

      - name: 'Run unit tests'
        uses: 'OXID-eSales/github-actions/phpunit@v1'
        with:
          container: ${{ needs.init.outputs.unit_tests_container }}
          container_options: ${{ needs.init.outputs.unit_tests_container_options }}
          container_method: ${{ needs.init.outputs.unit_tests_container_method }}
          configuration: ${{ needs.init.outputs.unit_tests_configuration }}
          test: ${{ needs.init.outputs.unit_tests_test }}
          additional_options: ${{ needs.init.outputs.unit_tests_additional_options }}
          logfile: unit_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt
          logfile_artifact: ${{ needs.init.outputs.unit_tests_logfile_artifact }}
          output_files: ${{ needs.init.outputs.unit_tests_output_files }}
          output_artifact: unit-artifacts_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          coverage_path: ${{ needs.init.outputs.unit_tests_coverage_path }}
          coverage_artifact: coverage-reports_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          failure_pattern: ${{ needs.init.outputs.unit_tests_failure_pattern }}

  integration_tests:
    needs: ['init','install_shop']
    if: ${{ needs.init.outputs.unit_tests_skip != 'true' }}
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.integration_tests_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.integration_tests_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.integration_tests_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v1'
        with:
          cached_shop: ${{ needs.install_shop.outputs.installed_shop }}
          cache_bucket: ${{ needs.init.outputs.integration_tests_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}

      - name: 'Run integration tests'
        uses: 'OXID-eSales/github-actions/phpunit@v1'
        with:
          container: ${{ needs.init.outputs.integration_tests_container }}
          container_options: ${{ needs.init.outputs.integration_tests_container_options }}
          container_method: ${{ needs.init.outputs.integration_tests_container_method }}
          configuration: ${{ needs.init.outputs.integration_tests_configuration }}
          test: ${{ needs.init.outputs.integration_tests_test }}
          additional_options: ${{ needs.init.outputs.integration_tests_additional_options }}
          logfile: integration_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt
          logfile_artifact: ${{ needs.init.outputs.integration_tests_logfile_artifact }}
          output_files: ${{ needs.init.outputs.integration_tests_output_files }}
          output_artifact: integration-artifacts_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          coverage_path: ${{ needs.init.outputs.integration_tests_coverage_path }}
          coverage_artifact: integration-coverage-reports _PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          failure_pattern: ${{ needs.init.outputs.integration_tests_failure_pattern }}

  codeception_tests:
    needs: ['init', 'install_shop', 'unit_tests', 'integration_tests']
    if: ${{ always() && needs.init.outputs.codeception_tests_skip != 'true' && needs.install_shop.result == 'success' }}  
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.codeception_tests_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.codeception_tests_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.codeception_tests_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v1'
        with:
          cached_shop: ${{ needs.install_shop.outputs.installed_shop }}
          cache_bucket: ${{ needs.init.outputs.codeception_tests_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}        


      - name: Install themes
        if: ${{ needs.init.outputs.global_is_enterprise == 'false' }}
        uses: 'OXID-eSales/github-actions/install_themes@v1'
        with:
          container: ${{ needs.init.outputs.codeception_tests_container }}
          container_options: ${{ needs.init.outputs.codeception_tests_container_options }}
          container_method: ${{ needs.init.outputs.codeception_tests_container_method }}
          themes: ${{ needs.init.outputs.codeception_tests_themes_install }}
          options: ${{ needs.init.outputs.codeception_tests_themes_options }}
          update: ${{ needs.init.outputs.codeception_tests_themes_update }}
          update_options: ${{ needs.init.outputs.codeception_tests_themes_update_options }}

      - name: 'Run codeception tests'
        uses: 'OXID-eSales/github-actions/codeception@v1'
        with:
          container: ${{ needs.init.outputs.codeception_tests_container }}
          container_options: ${{ needs.init.outputs.codeception_tests_container_options }}
          container_method: ${{ needs.init.outputs.codeception_tests_container_method }}
          build: ${{ needs.init.outputs.codeception_tests_build }}
          configuration: ${{ needs.init.outputs.codeception_tests_configuration }}
          suite: ${{ needs.init.outputs.codeception_tests_suite }}
          test: ${{ needs.init.outputs.codeception_tests_test }}
          additional_options: ${{ needs.init.outputs.codeception_tests_additional_options }}
          logfile: codeception_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt
          logfile_artifact: ${{ needs.init.outputs.codeception_tests_logfile_artifact }}
          output_files: ${{ needs.init.outputs.codeception_tests_output_files }}
          output_artifact: codeception-artifacts_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          coverage_path: ${{ needs.init.outputs.codeception_tests_coverage_path }}
          coverage_artifact: coverage-reports_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          failure_pattern: ${{ needs.init.outputs.codeception_tests_failure_pattern }}
 
  shop_setup_tests:
    needs: ['init','prepare_shop','codeception_tests']
    if: ${{ always() && needs.init.outputs.shop_setup_tests_skip != 'true' && needs.prepare_shop.result == 'success' }}  
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.shop_setup_tests_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.shop_setup_tests_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.shop_setup_tests_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v1'
        with:
          cached_shop: ${{ needs.prepare_shop.outputs.prepared_shop }}
          cache_bucket: ${{ needs.init.outputs.shop_setup_tests_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}        

      - name: Install themes
        if: ${{ needs.init.outputs.global_is_enterprise == 'false' }}
        uses: 'OXID-eSales/github-actions/install_themes@v1'
        with:
          container: ${{ needs.init.outputs.shop_setup_tests_container }}
          container_options: ${{ needs.init.outputs.shop_setup_tests_container_options }}
          container_method: ${{ needs.init.outputs.shop_setup_tests_container_method }}
          themes: ${{ needs.init.outputs.shop_setup_tests_themes_install }}
          options: ${{ needs.init.outputs.shop_setup_tests_themes_options }}
          update: ${{ needs.init.outputs.shop_setup_tests_themes_update }}
          update_options: ${{ needs.init.outputs.shop_setup_tests_themes_update_options }}

      - name: 'Run codeception tests'
        uses: 'OXID-eSales/github-actions/codeception@v1'
        with:
          container: ${{ needs.init.outputs.shop_setup_tests_container }}
          container_options: ${{ needs.init.outputs.shop_setup_tests_container_options }}
          container_method: ${{ needs.init.outputs.shop_setup_tests_container_method }}
          build: ${{ needs.init.outputs.shop_setup_tests_build }}
          configuration: ${{ needs.init.outputs.shop_setup_tests_configuration }}
          suite: ${{ needs.init.outputs.shop_setup_tests_suite }}
          test: ${{ needs.init.outputs.shop_setup_tests_test }}
          additional_options: ${{ needs.init.outputs.shop_setup_tests_additional_options }}
          logfile: shop_setup_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt
          logfile_artifact: ${{ needs.init.outputs.shop_setup_tests_logfile_artifact }}
          output_files: ${{ needs.init.outputs.shop_setup_tests_output_files }}
          output_artifact: shop_setup-artifacts_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          coverage_path: ${{ needs.init.outputs.shop_setup_tests_coverage_path }}
          coverage_artifact: coverage-reports_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          failure_pattern: ${{ needs.init.outputs.shop_setup_tests_failure_pattern }}

  deprecated_tests:
    needs: ['init', 'install_shop']
    if: ${{ needs.init.outputs.deprecated_tests_skip != 'true' }}
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.deprecated_tests_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.deprecated_tests_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.deprecated_tests_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Start shop'
        uses: 'OXID-eSales/github-actions/start_shop@v1'
        with:
          cached_shop: ${{ needs.install_shop.outputs.installed_shop }}
          cache_bucket: ${{ needs.init.outputs.deprecated_tests_cache_bucket }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}

      - name: Install themes
        uses: 'OXID-eSales/github-actions/install_themes@v1'
        with:
          container: ${{ needs.init.outputs.deprecated_tests_container }}
          container_options: ${{ needs.init.outputs.deprecated_tests_container_options }}
          container_method: ${{ needs.init.outputs.deprecated_tests_container_method }}
          themes: ${{ needs.init.outputs.deprecated_tests_themes_install }}
          options: ${{ needs.init.outputs.deprecated_tests_themes_options }}
          update: ${{ needs.init.outputs.deprecated_tests_themes_update }}
          update_options: ${{ needs.init.outputs.deprecated_tests_themes_update_options }}

      - name: 'Run deprecated tests'
        uses: 'OXID-eSales/github-actions/runtests@v0'
        with:
          container: ${{ needs.init.outputs.deprecated_tests_container }}
          container_options: ${{ needs.init.outputs.deprecated_tests_container_options }}
          container_method: ${{ needs.init.outputs.deprecated_tests_container_method }}
          test: ${{ needs.init.outputs.deprecated_tests_test }}
          additional_options: ${{ needs.init.outputs.deprecated_tests_additional_options }}
          logfile: deprecated_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}_phpunit_log.txt
          logfile_artifact: ${{ needs.init.outputs.deprecated_tests_logfile_artifact }}
          output_files: ${{ needs.init.outputs.deprecated_tests_output_files }}
          output_artifact: deprecated-artifacts_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          coverage_path: ${{ needs.init.outputs.deprecated_tests_coverage_path }}
          coverage_artifact: coverage-reports_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          failure_pattern: ${{ needs.init.outputs.deprecated_tests_failure_pattern }}

  sonarcloud:
    needs: ['init', 'unit_tests', 'codeception_tests', 'deprecated_tests']
    if: ${{ needs.init.outputs.sonarcloud_skip != 'true' }}
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.sonarcloud_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.sonarcloud_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.sonarcloud_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: Checkout shop
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'SonarCloud Scan (oxideshop_ce)'
        uses: 'OXID-eSales/github-actions/sonarcloud@v0'
        with:
          coverage_artifact: coverage-reports_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          target_branch: ${{ needs.init.outputs.sonarcloud_target_branch }}
          github_ref_name: ${{ github.ref_name }}
          sonarcloud_organization: ${{ needs.init.outputs.sonarcloud_organization }}
          sonarcloud_project_key: ${{ needs.init.outputs.sonarcloud_project_key }}
          sonarcloud_project_name: ${{ needs.init.outputs.sonarcloud_project_name }}
          sonarcloud_parameters: ${{ needs.init.outputs.sonarcloud_parameters }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 'SonarCloud Scan (oxideshop_ce_internal)'
        uses: 'OXID-eSales/github-actions/sonarcloud@v0'
        with:
          coverage_artifact: coverage-reports_PHP${{ matrix.php }}_MYSQL${{ matrix.mysql }}
          target_branch: ${{ needs.init.outputs.sonarcloud_target_branch }}
          github_ref_name: ${{ github.ref_name }}
          sonarcloud_organization: ${{ needs.init.outputs.sonarcloud_organization }}
          sonarcloud_project_key: ${{ needs.init.outputs.sonarcloud_project_key }}
          sonarcloud_project_name: ${{ needs.init.outputs.sonarcloud_internal_project_name }}
          sonarcloud_parameters: ${{ needs.init.outputs.sonarcloud_internal_parameters }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}


  finish:
    if: ${{ always() && needs.init.outputs.finish_skip != 'true' }}
    needs:
      - init
      - prepare_shop
      - install_shop
      - unit_tests
      - integration_tests
      - codeception_tests
      - shop_setup_tests
      - deprecated_tests
      - sonarcloud
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    env:
      SLACK_WEBHOOK: "${{ secrets.SLACK_WEBHOOK }}"
      overall_result: ${{ needs.prepare_shop.result=='success' && needs.install_shop.result=='success' && needs.unit_tests.result=='success' && needs.integration_tests.result=='success' && needs.codeception_tests.result=='success' && needs.shop_setup_tests.result=='success' }}
    steps:
      - name: 'Docker logout'
        if: ${{ needs.init.outputs.finish_docker_logout }}
        shell: bash
        run: docker logout

      - name: Send custom JSON data to Slack workflow
        if: ${{ env.SLACK_WEBHOOK != '' }}
        uses: slackapi/slack-github-action@v1
        with:
          payload: >
            {
              "text": "${{ github.workflow }} on ${{ github.repository }} with testplan ${{ inputs.testplan }} by ${{ github.actor }} ${{ env.overall_result=='success' && 'Successful' || 'Failed' }}",
              "blocks": [
                { "type": "header",
                  "text":
                    { "type": "plain_text",
                      "emoji": true,
                      "text": "${{ github.workflow }} on ${{ github.repository }}  with testplan ${{ inputs.testplan }} by ${{ github.actor }}"
                    }
                },
                { "type": "section",
                  "fields": [
                    { "type": "mrkdwn",
                      "text": "*Status:* ${{ env.overall_result && ':white_check_mark:' || ':x:' }}" 
                    },
                    { "type": "mrkdwn",
                      "text": "*Repository:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.repository }}/actions/runs/${{ github.run_id }}>"
                    },
                    { "type": "mrkdwn",
                      "text": "*Testplan:* <${{ inputs.testplan }}>"
                    }
                  ]
                },
                { "type": "section",
                  "text": 
                    { "type": "mrkdwn",
                      "text": "
                      \n* prepare_shop: ${{ needs.prepare_shop.result=='success' && ':white_check_mark:' || ':x:' }}
                      \n* install_shop: ${{ needs.install_shop.result=='success' && ':white_check_mark:' || ':x:' }}
                      \n* unit_tests: ${{ needs.unit_tests.result=='success' && ':white_check_mark:' || ':x:' }}
                      \n* integration_tests ${{ needs.integration_tests.result=='success' && ':white_check_mark:' || ':x:' }}
                      \n* codeception_tests ${{ needs.codeception_tests.result=='success' && ':white_check_mark:' || ':x:' }}
                      \n* shop_setup_tests ${{ needs.shop_setup_tests.result=='success' && ':white_check_mark:' || ':x:' }}"
                    }
                },
                { "type": "divider" }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK