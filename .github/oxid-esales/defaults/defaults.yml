# Purpose
# =======
# This file defines the default settings for the test workflow. It contains all
# variables. The variables can then be overridden in more specific yaml files
# to run different test scenarios.
#
# Variables used in multiple steps will be defined in the "workflow" and "global"
# sections and we use anchors to reference them in the specific sections. We use
# yamllint to validate the files, make sure to add linter exceptions, when you
# break the rules.
#
# We can use Golang templates in these test plans, see https://github.com/joernott/load_testplan/blob/main/README.md
# on how to reference environment variables and the github context.
#
# Sections
# ========
# The yaml hierarchy will be flattened to simple key=value settings. The
# various levels of the yaml file here will become prefixes to the variable
# names. For each step of the testplan, we use use a section to have the
# variables for that step contain the same prefix.
#
# The "workflow" section contains global definitions of matrix variables and
# settings used in the "strategy" parts of a job. They have anchors and every
# specific job has its own variables which reference these anchors if no
# job specific exceptions are needed.
#
# The "global" section is much the same. The variables here are defaults with
# anchors which will be used inside the steps of the various other sections.
#

# Global settings for a jobs strategy setting
workflow:

  # The variables "php" and "mysql" in the "matrix" subsection are used to run
  # a matrix of all combinations of these values for testing.
  matrix: &matrix
    # This string contains a json array of php versions to test against.
    php: &matrix_php '["8.1","8.2"]'

    # This json array are the mysql versions to test
    mysql: &matrix_mysql '["5.7","8.0"]'

  # This matrix definition is used, when we only want one analysis done
  # It covers the recommended combination of PHP and MySQL
  matrix_slim: &matrix_slim
    php: &matrix_php_slim '["8.2"]'
    mysql: &matrix_mysql_slim '["8.0"]'

  # How many matrix tests should run in parallel. When running on our private runners, we need to
  # reduce this to get consistent test results
  max_parallel: &max_parallel 4

# Global settings used in the actual steps in the jobs
global:
  # This action can be used on the community edition (ce) and enterprise
  # edition (ee) of the shop. On top of setting this to true, a few extra
  # variables/secrets must be provided for using the action on ee.
  # If is enterprise is set to true, you need to provide the following
  # - secrets.enterprise_github_token
  # - testplan entry global.git_enterprise_ref
  is_enterprise: &is_enterprise false
  # This template variable must be set to "ce" if is_enterprise is false or "ee"
  # if is_enterprise is true. It will be used for determining object names
  # {{ $shop_type := "ce" }}$shop_type: {{ printf "%q" $shop_type }}

  # Repository related settings
  git: &git

    # URL for the docker-eshop sdk repository to clone
    sdk_url: &git_sdk_url 'https://github.com/OXID-eSales/docker-eshop-sdk.git'

    # Branch to check out for the SDK
    sdk_ref: &git_sdk_ref 'master'

    # URL for the oxidshop_ce repository
    shop_url: &git_shop_url 'https://github.com/OXID-eSales/oxideshop_ce.git'

    # Branch, tag or hash of the commit to check out
    shop_ref: &git_shop_ref '{{ .Github.RefName }}'

    # URL for the oxidshop_pe repository
    enterprise_url: 'https://github.com/OXID-eSales/oxideshop_ee.git'

    # Branch to check out for the enterprise repos
    enterprise_ref: &git_enterprise_ref 'b-8.0.x'

    # Branch to check out for modules/plugins etc
    default_ref: &default_ref 'b-8.0.x'

  # When running on a self hosted runner with access to a local s3 cache:
  # Set the following secrets:
  # - secrets.CACHE_ENDPOINT
  # - secrets.CACHE_ACCESS_KEY
  # - secrets.CACHE_SECRET_KEY
  cache: &cache
    bucket: &cache_bucket 'oxideshop-ee'

  # Should we log in to docker? If set to "true", you need to set the following
  # secrets:
  # - secrets.DOCKER_HUB_USER
  # - secrets.DOCKER_HUB_TOKEN
  docker_login: &docker_login true

  # Settings related to the container we run tests in
  container: &container

    # Name of the container running php
    name: &container_name 'php'

    # Additional options passed to docker compose when running tests in
    # the the container
    options: &container_options ''

    # Method to execute the commands inside a container.
    # "run" spins up an entirely new container while "exec" runs inside the
    # already running container.
    method: &container_method 'exec'

  # These defaults are used when running the composer_configure and
  # composer_require actions
  composer: &composer
    # This is just a definition we can apply in later configs
    # It will be overwritten by the 7.0.x and 7.1.x templates
    # and can be used by referencing .Data.global.composer.dev_ref
    dev_ref: &dev_ref dev-b-8.0.x

    # Use these settings below to merge a json configuration with an existing
    # composer.json

    # Path to the composer.json folder on the runner (source/composer.json,
    # not /var/www/composer.json)
    file: 'source/composer.json'

    # Should a backup of the original composer.json be created?
    backup: true

    # Merge this json data with composer.json. If this is empty,
    # no transformation will be applied
    transform: ''

    # Should we run composer update
    update: true

    # Options for composer update
    update-options: '--no-interaction'

  # This grep pattern is applied to the generated phpunit, codeception and runtest log file. If we have
  # a hit matching the pattern below, the step will fail.
  failure_pattern: &failure_pattern |
    fail
    \\.\\=\\=
    Warning
    Notice
    Deprecated
    Fatal
    Error
    DID NOT FINISH
    Test file ".+" not found
    Cannot open file
    No tests executed
    Could not read
    Warnings: [1-9][0-9]*
    Errors: [1-9][0-9]*
    Failed: [1-9][0-9]*
    Deprecations: [1-9][0-9]*
    Risky: [1-9][0-9]*

# The init phase handles loading the testplans and creating report artifacts for the run
init:
  cache:
    bucket: *cache_bucket
    name: 'testplan-{{ .Env.GITHUB_REPOSITORY_ID }}-{{ .Github.SHA }}-{{ .Github.RunID }}'

# The prepare_shop step checks out the sdk and the shop. It is a prerequisite
# for the install_shop and shop_setup tests. It generates a cached object
# used in those steps.
# See docs/actions/prepare_shop.md for more information on the custom action.
prepare_shop:
  matrix: *matrix
  max_parallel: *max_parallel
  docker_login: *docker_login
  container: *container
  git: *git
  cache:
    bucket: *cache_bucket
    prefix: 'preparedShop-{{ $shop_type }}-{{ .Github.SHA }}-{{ .Github.RunID }}'
  composer:
    <<: *composer
    transform: |
      {
          "require": {
              "oxid-esales/twig-component": "dev-b-8.0.x",
              "oxid-esales/twig-admin-theme": "dev-b-8.0.x",
              "oxid-esales/apex-theme": "dev-b-8.0.x"
          }
      }

  # This contains a JSON hash of module repositories in the format
  # "organisation/package-name":{ "type": "git", "url": "https://github.com/organisation/package-name"},
  # This will be inserted directly into the "repositories" section of composer.json, together
  # with composer.transform.
  module_repositories: ''

  # These modify php "custom.ini"
  custom_ini:
    # Error reporting settings
    error_reporting: 'E_ALL & ~E_DEPRECATED & ~E_NOTICE & ~E_WARNING'

    # xdebug settings for php custom.ini
    xdebug: 'xdebug.max_nesting_level=1000'

  # Space separated list of extra services to add
  add_services: 'selenium-chrome'

# This is the second part of the shop installation. It uses the cached
# shop from prepare_shop and generates its own cached object used in the
# following steps. See docs/actions/start_shop.md and
# docs/actions/install_shop.md for more information on the custom actions.
install_shop:
  matrix: *matrix
  max_parallel: *max_parallel
  docker_login: *docker_login
  container: *container
  is_enterprise: *is_enterprise
  cache:
    bucket: *cache_bucket
    prefix: &install_shop_prefix 'shopInstallation-{{ $shop_type }}-{{ .Github.SHA }}-{{ .Github.RunID }}'

  # Modifying source/source/config.inc.php
  config:
    # Set iDebug in source/source/config.inc.php
    idebug: false
  # Run custom script outside the container
  custom_script: ''

  # Run custom script inside the container like 'bin/oe-console oe:setup:demodata'
  custom_script_container: ''

  # Exporting an artifact with Configuration files for the shop setup
  output:
    files: |
      docker-compose.yml
      source/composer.json*
      source/composer.lock
      source/source/config.inc.php
      data/php/logs/error_log.txt
      files.txt
    # The configuration file name is dynamic, the matrix variables will be appended
    artifact_prefix: 'configs_install_shop'

# This installs a single module for testing. If no module is defined, you need
# to ensure that the cache_prefix for this step is identical to the cache_prefix
# from install_shop
# steps will use the chached object from install_shop
# See docs/actions/start_shop.md and docs/actions/install_module.md for more information.
install_module:
  matrix:
    php: *matrix_php
    mysql: *matrix_mysql
    testplan: '["skip"]'
  max_parallel: *max_parallel
  docker_login: *docker_login
  load_shop: *install_shop_prefix
  container: *container
  container_options: *container_options
  container_method: *container_method
  composer: *composer
  cache:
    bucket: *cache_bucket
    # If we don't install a module, keep it the same as the prefix for
    # installed_shop. Otherwise set it to
    # 'moduleInstallation-{{ $shop_type }}-{{ .Github.SHA }}-{{ .Github.RunID }}'
    prefix: &install_module_prefix 'shopInstallation-{{ $shop_type }}-{{ .Github.SHA }}-{{ .Github.RunID }}'
  output:
    files: |
      docker-compose.yml
      source/composer.json*
      source/composer.lock
      source/source/config.inc.php
      files.txt
      generated_testplan.yaml
    artifact_prefix: 'configs-install_module'
  # Unique module id
  ids: &module_ids ''

  # Title is used in the reports and debugging, if we install multiple modules
  # debugging relies on sorting by titles, so prefixing it with numbers is
  # recommended
  title: *module_ids

  # Git repository related settings
  git:
    module:
      # URL for the module repository
      url: ''

      # Branch to check out/test
      ref: *default_ref

  # Name of the package on github (organization/repository)
  package_name: ''

  # Path to install the module under dev-packages, should be the same as module_ids
  path: &module_path ''

  # What modules should be activated
  activate: *module_ids

  # Run custom script outside the container'
  custom_script: ''

  # Run custom script inside the container like 'bin/oe-console oe:b2b:installdemodata --shop-id=1'
  custom_script_container: ''


# The unit tests we run on our code, this uses phpunit for the actual tests.
# See docs/actions/start_shop.md and docs/actions/phpunit.md for more information.
phpunit:
  matrix:
    php: *matrix_php
    mysql: *matrix_mysql

    # Providing a list of testplans to be executed with phpunit
    # by default, these are the unit and integration tests
    testplan: '["~/phpunit_unit.yml","~/phpunit_integration.yml"]'
  max_parallel: 8
  # The title is used in the matrix testplan runs to distinguish their output
  # Overwrite it with a unique name in each iteration
  title: 'phpunit_unit'
  docker_login: *docker_login
  # Which cached shop do we want to load.
  load_shop: *install_module_prefix
  container: *container
  cache: *cache
  composer: *composer

  # Run custom script outside the container'
  custom_script: ''

  # Run custom script inside the container like 'bin/oe-console oe:b2b:installdemodata --shop-id=1'
  custom_script_container: ''

  # Name of the configuration file
  configuration: 'phpunit.xml'
  # Name of the test or folder to run
  test: ''
  # Optional: Additional options to pass to phpunit
  additional_options: ''

  # log file related settings
  logfile:

    # The name of the output logfile starts with this. The rest is dynamic,
    # using the PHP and MySQL matrix parameters. So it will be something like
    # '<prefix>_PHP<matrix.php>_MYSQL<matrix.mysql>.txt'
    prefix: 'phpunit'

  # Output artifact for this step
  output:
    # Which files should be archived
    files: |
      source/source/log/oxideshop.log
      data/php/logs/error_log.txt
      job_status*.txt
      generated_testplan.yaml

  # Github run artifact for the phpunit output - This is dynamic, so we set it
  # in the workflow to '<prefix_PHP<matrix.php>_MYSQL<matrix.mysql>'
    prefix: 'phpunit_artifacts'

  # Settings for the coverage report
  coverage:
    # Name of the file produced in the coverage report. This must match
    # the value of '--coverage-clover' in the additional_options above.
    # If the name is empty, nothing will be added to the coverage reports
    # artifact.
    path: ''

    # Github run artifact for the coverage file - This is dynamic, so we set it
    # in the workflow to <prefix>_PHP<matrix.php>_MYSQL<matrix.mysql>.
    # Currently, we put all log files across all steps into one artifact per
    # matrix combination.
    prefix: coverage-reports-phpunit

  failure_pattern: *failure_pattern


# This step usesd the codeception custom action. Many inputs are similar to the
# ones in the unit tests.
# See docs/actions/start_shop.md and docs/actions/codeception.md for more information.
codeception:
  matrix:
    php: *matrix_php
    mysql: *matrix_mysql

    # Providing a list of testplans to be executed with codeception
    # by default, these are the regular Acceptance and shop setup tests
    testplan: '["~/codeception_Acceptance.yml","~/codeception_AcceptanceSetup.yml"]'

  # More parallelism causes instability on the private runners, so we reduce it here
  max_parallel: &codeception_max_parallel 1
  docker_login: *docker_login
  load_shop: *install_module_prefix

  # Should we wait until selenium is running
  wait_for_selenium: true

  container:
    <<: *container

    # For codeception, we need different options than the empty default
    options: '-e SELENIUM_SERVER_HOST=selenium -e BROWSER_NAME=chrome -e XDEBUG_MODE=coverage'

  cache: *cache
  composer: *composer

  # This script is used to determine container options depending on the module and
  # modifying the codeception config to handle smarty. You must create the
  # "container_options" output here
  pre_script: |
    MODULE_OPTIONS=""
    if [ "${install_module_ids}" != "" ]; then
      MODULE_OPTIONS="-e MODULE_IDS=${install_module_ids}"
    fi
    echo "CODECEPTION_CONTAINER_OPTIONS=-e THEME_ID=apex ${MODULE_OPTIONS}" | tee -a "${GITHUB_ENV}"
    echo "container_options=-e THEME_ID=apex ${MODULE_OPTIONS}" | tee -a "${GITHUB_OUTPUT}"

  # Run custom script outside the container'
  custom_script: ''

  # Run custom script inside the container like 'bin/oe-console oe:b2b:installdemodata --shop-id=1'
  custom_script_container: ''

  configuration: 'tests/codeception.yml'

  # Whether to run the codeception build step before running codeception itself
  build: true

  # Name of the codeception test suite to run
  suite: 'Acceptance'

  # Name of the test to run
  test: ''

  # Additional options to pass to codeception
  additional_options: '--coverage-xml=/var/www/codeception_coverage.xml -x flow_theme'

  # Additional options to pass to codecept build
  build_additional_options: ''

  logfile:
    prefix: 'codeception'

  output:
    files: |
      docker-compose.yml
      source/composer.json
      source/composer.lock
      source/source/config.inc.php
      source/source/log/oxideshop.log
      data/php/logs/error_log.txt
      source/tests/Codeception/_output
      job_status*.txt
      generated_testplan.yaml
    prefix: 'codeception_artifacts'

  coverage:
    # Must math the value of --coverage-xml in 'additional_options'. If empty,
    # nothing will be added to the codeception artifact
    path: 'source/codeception_coverage.xml'
    prefix: coverage-reports-codeception
  failure_pattern: *failure_pattern

# These deprecated tests use the runtests action. Many options are similar to
# codeception/phpunit
runtest:
  matrix:
    php: *matrix_php
    mysql: *matrix_mysql

    # Providing a list of testplans to be executed with runtests
    # by default, these are the deprecated tests
    testplan: '["~/deprecated_tests.yml"]'
  max_parallel: *max_parallel
  docker_login: *docker_login
  load_shop: *install_module_prefix
  container:
    <<: *container
    options: '-e XDEBUG_MODE=coverage'
  cache: *cache
  composer:
    <<: *composer
    transform: |
      {
          "require-dev": {
              "oxid-esales/testing-library": "dev-b-8.0.x",
              "oxid-esales/tests-deprecated-ce": "dev-b-8.0.x",
              "codeception/module-webdriver": "^3.1",
              "phpunit/phpunit": "^9.1.1"
          }
      }

  # Run custom script outside the container'
  custom_script: ''

  # Run custom script inside the container like 'bin/oe-console oe:b2b:installdemodata --shop-id=1'
  custom_script_container: ''

  # Name of the config file to copy
  config_file: 'vendor/oxid-esales/testing-library/test_config.yml.dist'

  # Should we run reset-shop
  reset_shop: true

  test: 'AllTestsUnit'
  additional_options: '--coverage-clover=/var/www/deprecated_tests_coverage.xml'
  logfile:
    prefix: 'runtests'

  output:
    files: |
      source/unit.cov
      source/source/log/oxideshop.log
      source/test_config.yml
      data/php/logs/error_log.txt
    prefix: 'deprecated_tests_artifacts'
  coverage:
    path: 'source/deprecated_tests_coverage.xml'
    prefix: coverage-report-runtest
  failure_pattern: *failure_pattern

  # Where to find the reset-shop binary
  reset_shop_binary: 'vendor/bin/reset-shop'

  # Where to find the runtests binary
  runtests_binary: 'vendor/bin/runtests'

# Running the sonarcloud scanner on the gathered coverage reports
sonarcloud:
  # We only run sonarcloud for one of the matrix combinations of PHP/MySQL
  matrix:
    php: '["8.1"]'
    mysql: '["5.7"]'
    testplan: '["-"]'

  # There is only one matrix combination
  max_parallel: 1
  docker_login: *docker_login

  # You only need to change the title when running multiple sonarcloud scans in one workflow
  title: 'sonarcloud'

  # Run custom script outside the container'
  custom_script: ''

  # Run custom script inside the container like 'bin/oe-console oe:b2b:installdemodata --shop-id=1'
  custom_script_container: ''

  coverage:
    prefix: coverage-report
  target_branch: b-8.0.x

  # Part of the absolute path to strip from the paths inside the coverage.xml,
  # This ist /var/www/ (note the trailing slash) fort the shop and should be set to
  # /var/www/dev-packages/<module_ids>/ for modules
  strip_path: '/var/www/'

  # Sonarcloud settings, get them from https://sonarcloud.io/organizations/oxid-esales/projects
  organization: 'oxid-esales'
  project_key: 'OXID-eSales_oxideshop_ce'
  project_name: 'oxideshop_ce'
  # Parameters passed to the scanner
  parameters: |
    -Dsonar.language=php
    -Dsonar.scm.provider=git
    -Dsonar.sources=source
    -Dsonar.tests=tests

  # DEPRECATED: (we use a separate config for this now) for the internal run, leave the project key empty if you don't have a need
  # for this second run with different settings
  internal_project_key: 'OXID-eSales_oxideshop_ce_internal'
  internal_project_name: 'oxideshop_ce_internal'
  internal_parameters: |
    -Dsonar.language=php
    -Dsonar.scm.provider=git
    -Dsonar.sources=source/Internal
    -Dsonar.tests=tests

# See docs/actions/start_shop.md and docs/actions/phpphpcs.md for more information.
phpcs_tests:
  skip: false
  matrix: *matrix_slim
  max_parallel: *max_parallel
  docker_login: *docker_login
  container: *container
  cache:
    bucket: *cache_bucket
  # Name of the branch/commit to gather the list of changed files
  git:
    ref: '{{ .Github.Ref }}'
  # Should we use git diff or check all files
  diff_only: true
  # Filter the file n ames against this regex
  filter: '\.php$'
  # Optional: Additional options to pass to phpcs
  additional_options: '-vp --standard=PSR12'
  output:
    files: |
      data/php/logs/error_log.txt
    prefix: 'phpcs-artifacts'
  # Grep pattern which indicate that the test failed
  failure_pattern: '[1-9][0-9]* error|[1-9][0-9]* warning'

styles:
  matrix:
    php: *matrix_php_slim
    mysql: *matrix_mysql_slim
    # This is only used in the module workflow, so the default is to skip this
    testplan: 'skip'
  max_parallel: 1
  # When looping over multiple modules, title must be set for every element
  title: 'styles'
  docker_login: *docker_login
  load_shop: *install_module_prefix
  container: *container
  cache:
    bucket: *cache_bucket
  composer:
    file: 'source/dev-packages/test-module/composer.json'
    backup: true
    transform: ''
    update: true
    update_options: '--no-interaction'

  # Run custom script outside the container'
  custom_script: ''

  # Run custom script inside the container like 'bin/oe-console oe:b2b:installdemodata --shop-id=1'
  custom_script_container: ''

  # The path pointing to the module relative to source/dev-packages needs to be the same as in install_module
  path: *module_path

  # The module_ids needs to be the same as in install_module
  module_ids: *module_ids

  # These options are passed along to composer install
  install_options: ''

  # Each iteration of the styles workflow will move their report to a distinct name in the central report folder
  output:
    files: |
      source/tests/reports/phpstan*.report.json
      source/tests/reports/phpmd*.report.json
      source/tests/reports/phpcs*.report.json
      source/tests/reports/phpstan*.report.txt
      source/tests/reports/phpmd*.report.txt
      source/tests/reports/phpcs*.report.txt
      data/php/logs/error_log.txt
    prefix: 'styles_artifacts'

# yamllint validates the github actions/testplan yaml files
yamllint:
  # Skip this part of the test run
  skip: false

  # Rules for the linter
  rules: |
    extends: default
    ignore: .git/*
    rules:
      document-start: disable
      line-length:
        max: 160
        level: warning
      new-line-at-end-of-file:
        level: warning
      trailing-spaces:
        level: warning
      truthy: disable

  # Space separated list of files or directories
  file_or_dir: '.github'

# actionlint validates the github actions workflows (not actions)
actionlint:
  # Skip this part of the test run
  skip: false

# This is the final cleanup at the end
finish:
  # Skip this part of the test run
  skip: false
  # Using the global settings here
  matrix:
    php: *matrix_php
    mysql: *matrix_mysql
  slack_title: '{{ .Github.Workflow }} ({{ .Github.RefName }}) on {{ .Github.Repository }} by {{ .Github.Actor }}'
