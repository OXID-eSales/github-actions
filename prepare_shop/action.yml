name: 'prepare_shop'
description: 'Prepares the shop and creates a cache for it'
inputs:
  container:
    type: string
    required: false
    description: 'Name of the container running php'
    default: 'php'
  container_options:
    type: string
    required: false
    description: 'Additional options when running something in the the container'
    default: ''
  container_method:
    type: string
    required: false
    description: 'Method to execute the commands inside a container, either "run" or "exec"'
    default: 'exec'
  git_sdk_url:
    type: string
    required: false
    description: 'URL for the docker-eshop sdk repo to clone'
    default: 'https://github.com/OXID-eSales/docker-eshop-sdk.git'
  git_sdk_ref:
    type: string
    required: false
    description: 'Branch, tag or hash of the commit to check out'
    default: 'master'
  git_shop_url:
    type: string
    required: false
    description: 'URL for the oxidshop_ce repository'
    default: 'https://github.com/OXID-eSales/oxideshop_ce.git'
  git_shop_ref:
    type: string
    required: true
    description: 'Branch, tag or hash of the commit to check out'
  git_enterprise_ref:
    type: string
    required: false
    description: 'Branch to check out for the enterprise repos'
    default: ''
  github_event_name:
    type: string
    required: false
    description: 'Name of the github event (github.event_name), used to handle pull requests'
    default: ''
  github_event_number:
    type: string
    required: false
    description: 'Number of the github event (github.event_number), used to handle pull requests'
    default: '0'
  github_base_ref:
    type: string
    required: false
    description: 'Base reference (github.base_ref) for testing the github pull request'
    default: ''
  github_sha:
    type: string
    required: true
    description: 'github.sha is used in generating the cache id'
  github_run_number:
    type: string
    required: false
    description: 'github.run_number and github.run_attempts are used in generating the cache id'
    default: '0'
  github_run_attempt:
    type: string
    required: false
    description: 'github.run_number and github.run_attempts are used in generating the cache id'
    default: '0'
  php:
    type: string
    required: false
    description: 'Version of PHP for this instance'
    default: '8.2'
  mysql:
    type: string
    required: false
    description: 'Version of MySQL for this instance'
    default: '8.0'
  is_enterprise:
    type: boolean
    required: false
    description: 'This action can be used on the community edition (ce) and enterprise edition (ee) of the shop. On top of setting this to true, a few extra variables/secrets must be provided for using the action on ee.'
    default: false
  custom_ini_error_reporting:
    type: string
    required: false
    description: 'Error reporting settings for php custom.ini'
    default: 'E_ALL & ~E_DEPRECATED & ~E_NOTICE & ~E_WARNING'
  custom_ini_xdebug:
    type: string
    required: false
    description: 'xdebug settings for php custom.ini'
    default: 'xdebug.max_nesting_level=1000'
  add_services:
    type: string
    required: false
    description: 'Space separated list of extra services to add'
    default: 'selenium-chrome'
  themes_install:
    type: string
    required: false
    description: 'Space separated list of themes to install'
    default: ''
  themes_options:
    type: string
    required: false
    description: 'Options to pass along to composer during install'
    default: '--with-all-dependencies'
  themes_update:
    type: string
    required: false
    description: 'Run composer update after installing all themes'
    default: true
  themes_update_options:
    type: string
    required: false
    description: 'Options to pass along to composer during install'
    default: '--no-interaction'
  enterprise_github_token:
    type: string
    required: false
    description: 'OAuth token to access enterprise repos'
    default: ''
  cache_bucket:
    type: string
    required: false
    description: 'Name of the local s3 cache bucket'
    default: 'oxideshop-ee'
  cache_endpoint:
    type: string
    required: false
    description: 'secrets.CACHE_ENDPOINT for actions-cache'
    default: ''
  cache_access_key:
    type: string
    required: false
    description: 'secrets.CACHE_ACCESS_KEY for actions-cache'
    default: ''
  cache_secret_key:
    type: string
    required: false
    description: 'secrets.CACHE_SECRET_KEY  for actions-cache'
    default: ''
outputs:
  prepared_shop:
    description: 'Name of the cached shop setup'
    value: ${{ steps.init.outputs.prepared_shop }}
runs:
  using: "composite"
  steps:
    - name: Initialize
      id: init
      shell: bash
      run: |
        if [ "${{ inputs.is_enterprise}}" == "true" ]; then
          CACHED_NAME="preparedShop-ee-${{ inputs.git_enterprise_ref }}-${{ inputs.php }}-${{ inputs.mysql }}-${{ inputs.github_sha }}-${{ inputs.github_run_number }}-${{ inputs.github_run_attempt }}"
        else
          CACHED_NAME="preparedShop-ce-${{ inputs.git_shop_ref }}-${{ inputs.php }}-${{ inputs.mysql }}-${{ inputs.github_sha }}-${{ inputs.github_run_number }}-${{ inputs.github_run_attempt }}"
        fi
        echo "prepared_shop=$CACHED_NAME" | tee -a $GITHUB_OUTPUT
        echo "EXEC_PHP=docker-compose ${{ inputs.container_method }} -T ${{ inputs.container_options }} ${{ inputs.container }}" | tee -a $GITHUB_ENV
        echo "\033[0;35m### Caching the installation as ${CACHED_NAME}\033[0m"

    - name: Clone testing environment master
      shell: bash
      run: git clone --depth 1 ${{ inputs.git_sdk_url }} --branch ${{ inputs.git_sdk_ref }} --single-branch .

    - name: Clone the shop  (${{ inputs.git_shop_ref }})
      if: inputs.github_event_name != 'pull_request'
      shell: bash
      run: git clone --depth 1 ${{ inputs.git_shop_url }} --branch ${{ inputs.git_shop_ref }} --single-branch source

    - name: Clone the shop (PR ${{ inputs.github_event_number }})
      if: inputs.github_event_name == 'pull_request'
      shell: bash
      run: |
        git clone --depth 1 ${{ inputs.git_shop_url }} --branch ${{ inputs.github_base_ref }} --single-branch source
        git -C source fetch origin refs/pull/${{ inputs.github_event_number }}/head:pr_${{ inputs.github_event_number }}
        git -C source checkout pr_${{ inputs.github_event_number }}

    - name: Prepare container configuration
      shell: bash
      run: |
        make setup
        make addbasicservices

        if [ -n "${{ inputs.add_services }}" ]; then
          for SERVICE in ${{ inputs.add_services }}; do
            echo -e "\033[0;35mAdding service ${SERVICE}\033[0m"
            if [ "${SERVICE}" == "nginx-rp" ]; then
              perl -pi\
                -e 's#- 80:80#- 8000:80#g;'\
                -e 's#apache:localhost.local#nginx:localhost.local#g;'\
                docker-compose.yml
            fi
            make file=services/${SERVICE}.yml addservice
          done
        fi

        perl -pi\
            -e "s#PHP_VERSION=.*#PHP_VERSION='${{ inputs.php }}'#g;"\
            -e "s#MYSQL_VERSION=.*#MYSQL_VERSION='${{ inputs.mysql }}'#g;"\
            .env
        perl -pi\
            -e 's#display_errors =.*#display_errors = false#g;'\
            -e 'print "${{ inputs.custom_ini_xdebug }}\n\n";'\
            -e 'print "error_reporting = ${{ inputs.custom_ini_error_reporting }}\n"'\
            containers/php/custom.ini
        perl -pi\
            -e 's#/var/www/#/var/www/source/#g;'\
            containers/httpd/project.conf
        
    - name: Start containers
      shell: bash
      run: |
        make up
        sleep 2
        docker-compose ps --all

    - name: Output docker logs if make up failed
      if: failure()
      shell: bash
      run: |
        echo -e "\033[0;31m### Starting docker failed\033[0m"
        echo -e "\033[0;35m###  docker-compose.yml ###\033[0m"
        cat docker-compose.yml
        echo -e "\033[0;35m###  docker-compose logs ###\033[0m"
        docker-compose logs --tail=all
        for c in $(docker ps -aq); do
          echo -e "\033[0;35m###  Logs for $c ###\033[0m"
          docker logs -n 200 $c
        done

    - name: Require PE, EE, Twig component, Admin theme, Apex
      if: ${{ inputs.is_enterprise == 'true' }}
      shell: bash
      run: |
        echo -e "\033[0;35m###  configure github access ###\033[0m"
        $EXEC_PHP composer config github-protocols https
        $EXEC_PHP composer config -g github-oauth.github.com "${{ inputs.enterprise_github_token }}"
        echo -e "\033[0;35m###  configure oxidshop-pe ###\033[0m"
        $EXEC_PHP composer config repositories.oxid-esales/oxideshop-pe git "https://github.com/OXID-eSales/oxideshop_pe.git"
        echo -e "\033[0;35m###  configure oxidshop-ee ###\033[0m"
        $EXEC_PHP composer config repositories.oxid-esales/oxideshop-ee git "https://github.com/OXID-eSales/oxideshop_ee.git"
        echo -e "\033[0;35m###  configure twig-component-pe ###\033[0m"
        $EXEC_PHP composer config repositories.oxid-esales/twig-component-pe git "https://github.com/OXID-eSales/twig-component-pe.git"
        echo -e "\033[0;35m###  configure twig-component-ee ###\033[0m"
        $EXEC_PHP composer config repositories.oxid-esales/twig-component-ee git "https://github.com/OXID-eSales/twig-component-ee.git"
        echo -e "\033[0;35m###  require oxideshop-pe:dev-${{ inputs.git_enterprise_ref }} ###\033[0m"
        $EXEC_PHP composer require "oxid-esales/oxideshop-pe:dev-${{ inputs.git_enterprise_ref }}" --no-update
        echo -e "\033[0;35m###  require oxideshop-ee:dev-${{ inputs.git_enterprise_ref }} ###\033[0m"
        $EXEC_PHP composer require "oxid-esales/oxideshop-ee:dev-${{ inputs.git_enterprise_ref }}" --no-update
        echo -e "\033[0;35m###  require twig-component-pe:dev-${{ inputs.git_enterprise_ref }} ###\033[0m"
        $EXEC_PHP composer require "oxid-esales/twig-component-ee:dev-${{ inputs.git_enterprise_ref }}" --no-update
        echo -e "\033[0;35m###  require codeception-modules:dev-${{ inputs.git_enterprise_ref }} ###\033[0m"
        $EXEC_PHP composer require "oxid-esales/codeception-modules:dev-${{ inputs.git_enterprise_ref }}" --no-update
        echo -e "\033[0;35m###  require codeception-page-objects:dev-${{ inputs.git_enterprise_ref }} ###\033[0m"
        $EXEC_PHP composer require "oxid-esales/codeception-page-objects:dev-${{ inputs.git_enterprise_ref }}" --no-update

    - name: 'Install Themes ${{ inputs.themes_install }}'
      if: ${{ inputs.themes_install != '' }}
      uses: 'OXID-eSales/github-actions/install_themes@v0'
      with:
        container: ${{ inputs.container }}
        container_options: ${{ inputs.container_options }}
        themes: ${{ inputs.themes_install }}
        options: ${{ inputs.themes_options }}
        update: ${{ inputs.themes_update }}
        update_options: ${{ inputs.themes_update_options }}

    - name: Install dependencies
      shell: bash
      if: ${{ inputs.themes_install == '' }}
      run: |
        $EXEC_PHP composer update --no-interaction

    - name: Setup config inc file
      shell: bash
      run: $EXEC_PHP cp source/config.inc.php.dist source/config.inc.php

    - name: Stop containers
      if: always()
      shell: bash
      run: |
        echo -e "\033[0;35m### Stopping containers $c\033[0m"
        docker-compose down
        sleep 2

    - name: Cache current installation
      uses: tespkg/actions-cache@v1
      with:
        path: |
          ./*
        key: ${{ steps.init.outputs.prepared_shop }}
        endpoint: ${{ inputs.cache_endpoint }}
        accessKey: ${{ inputs.cache_access_key }}
        secretKey: ${{ inputs.cache_secret_key }}
        bucket: ${{ inputs.cache_bucket }}
