name: 'prepare_shop'
description: 'Prepares the shop and creates a cache for it'
inputs:
  container_name:
    type: string
    required: false
    description: 'Name of the container running php'
    default: 'php'
  container_options:
    type: string
    required: false
    description: 'Additional options when running something in the the container'
    default: ''
  container_method:
    type: string
    required: false
    description: 'Method to execute the commands inside a container, either "run" or "exec"'
    default: 'exec'
  git_sdk_url:
    type: string
    required: false
    description: 'URL for the docker-eshop sdk repo to clone'
    default: 'https://github.com/OXID-eSales/docker-eshop-sdk.git'
  git_sdk_ref:
    type: string
    required: false
    description: 'Branch, tag or hash of the commit to check out'
    default: 'master'
  git_shop_url:
    type: string
    required: false
    description: 'URL for the oxidshop_ce repository'
    default: 'https://github.com/OXID-eSales/oxideshop_ce.git'
  git_shop_ref:
    type: string
    required: true
    description: 'Branch, tag or hash of the commit to check out'
  git_enterprise_ref:
    type: string
    required: false
    description: 'Branch to check out for the enterprise repos'
    default: ''
  github_event_name:
    type: string
    required: false
    description: 'Name of the github event (github.event_name), used to handle pull requests'
    default: ''
  github_event_number:
    type: string
    required: false
    description: 'Number of the github event (github.event_number), used to handle pull requests'
    default: '0'
  github_base_ref:
    type: string
    required: false
    description: 'Base reference (github.base_ref) for testing the github pull request'
    default: ''
  github_sha:
    type: string
    required: true
    description: 'github.sha is used in generating the cache id'
  github_run_number:
    type: string
    required: false
    description: 'github.run_number and github.run_attempts are used in generating the cache id'
    default: '0'
  github_run_attempt:
    type: string
    required: false
    description: 'github.run_number and github.run_attempts are used in generating the cache id'
    default: '0'
  github_ref_name:
    type: string
    required: false
    description: 'Current branch (github.ref_name) for modifying composer.json'
    default: ''
  php:
    type: string
    required: false
    description: 'Version of PHP for this instance'
    default: '8.2'
  mysql:
    type: string
    required: false
    description: 'Version of MySQL for this instance'
    default: '8.0'
  is_enterprise:
    type: boolean
    required: false
    description: 'Whether we prepare a community or enterprise edition'
    default: false
  custom_ini_error_reporting:
    type: string
    required: false
    description: 'Error reporting settings for php custom.ini'
    default: 'E_ALL & ~E_DEPRECATED & ~E_NOTICE & ~E_WARNING'
  custom_ini_xdebug:
    type: string
    required: false
    description: 'xdebug settings for php custom.ini'
    default: 'xdebug.max_nesting_level=1000'
  add_services:
    type: string
    required: false
    description: 'Space separated list of extra services to add'
    default: 'selenium-chrome'
  composer_file:
    type: string
    required: false
    description: 'Name of the original composer.json'
    default: 'source/composer.json'
  composer_transform:
    type: string
    required: false
    description: 'JSON code to merge into composer.json'
    default: ''
  composer_backup:
    type: boolean
    required: false
    description: 'Should we create a backup for composer.json'
    default: true
  composer_update:
    type: string
    required: false
    description: 'Run composer update after transform'
    default: true
  composer_update_options:
    type: string
    required: false
    description: 'Options to pass along to composer during install'
    default: '--no-interaction'
  composer_dev_ref:
    type: string
    required: false
    description: 'Development package reference'
    default: 'dev-b-8.0.x'

  enterprise_github_token:
    type: string
    required: false
    description: 'OAuth token to access enterprise repos'
    default: ''
  cache_name:
    type: string
    required: true
    description: 'Name of the shop to cache'
  cache_bucket:
    type: string
    required: false
    description: 'Name of the local s3 cache bucket'
    default: 'oxideshop-ee'
  cache_endpoint:
    type: string
    required: false
    description: 'secrets.CACHE_ENDPOINT for actions-cache'
    default: ''
  cache_access_key:
    type: string
    required: false
    description: 'secrets.CACHE_ACCESS_KEY for actions-cache'
    default: ''
  cache_secret_key:
    type: string
    required: false
    description: 'secrets.CACHE_SECRET_KEY  for actions-cache'
    default: ''
  docker_login:
    type: boolean
    required: false
    description: 'should we log in to docker'
    default: true
  docker_user:
    type: string
    required: false
    description: 'secrets.DOCKER_HUB_USER for docker login'
    default: ''
  docker_token:
    type: string
    required: false
    description: 'secrets.DOCKER_HUB_TOKEN for docker login'
    default: ''
  debug:
    type: string
    description: 'Appended to debugging scripts'
    default: ''
    required: false

outputs:
  prepared_shop:
    description: 'Name of the cached shop setup'
    value: ${{ steps.init.outputs.prepared_shop }}
runs:
  using: "composite"
  steps:
    - name: Clone testing environment master
      shell: bash
      run: |
        # prepare_shop: Clone testing environment master
        git clone --depth 1 ${{ inputs.git_sdk_url }} --branch ${{ inputs.git_sdk_ref }} --single-branch .
        ${{ inputs.debug }}

    - name: Clone the shop  (${{ inputs.git_shop_ref }})
      # yamllint disable-line rule:line-length
      if: ${{ inputs.github_event_name != 'pull_request' || ( github.repository != 'OXID-eSales/oxideshop_ce') }}
      shell: bash
      run: |
        # prepare_shop: Clone the shop
        ${{ inputs.debug }}
        git clone --depth 2 ${{ inputs.git_shop_url }} --branch ${{ inputs.git_shop_ref }} --single-branch source

    - name: Clone the shop (PR ${{ inputs.github_event_number }})
      # yamllint disable-line rule:line-length
      if: ${{ inputs.github_event_name == 'pull_request' && github.repository == 'OXID-eSales/oxideshop_ce' }}
      shell: bash
      run: |
        # prepare_shop: Clone the shop (PR)
        ${{ inputs.debug }}
        echo -e "\033[0;35mHandling the pull request\033[0m"
        git clone --depth 2 ${{ inputs.git_shop_url }} --branch ${{ inputs.github_base_ref }} --single-branch source
        git -C source fetch origin refs/pull/${{ inputs.github_event_number }}/head:pr_${{ inputs.github_event_number }}
        git -C source checkout pr_${{ inputs.github_event_number }}

    - name: Prepare container configuration
      shell: bash
      run: |
        # prepare_shop: Prepare container configuration
        ${{ inputs.debug }}
        mkdir source/dev-packages
        make setup
        make addbasicservices

        if [ -n "${{ inputs.add_services }}" ]; then
          for SERVICE in ${{ inputs.add_services }}; do
            echo -e "\033[0;35mAdding service ${SERVICE}\033[0m"
            if [ "${SERVICE}" == "nginx-rp" ]; then
              perl -pi\
                -e 's#- 80:80#- 8000:80#g;'\
                -e 's#apache:localhost.local#nginx:localhost.local#g;'\
                docker-compose.yml
            fi
            make file=services/${SERVICE}.yml addservice
          done
        fi

        perl -pi\
            -e "s#PHP_VERSION=.*#PHP_VERSION='${{ inputs.php }}'#g;"\
            -e "s#MYSQL_VERSION=.*#MYSQL_VERSION='${{ inputs.mysql }}'#g;"\
            .env
        perl -pi\
            -e 's#display_errors =.*#display_errors = false#g;'\
            -e 'print "${{ inputs.custom_ini_xdebug }}\n\n";'\
            -e 'print "error_reporting = ${{ inputs.custom_ini_error_reporting }}\n"'\
            containers/php/custom.ini
        perl -pi\
            -e 's#/var/www/#/var/www/source/#g;'\
            containers/httpd/project.conf

    # yamllint disable rule:line-length
    - name: Modify composer.json to allow the same feature-branch
      if: ${{ inputs.github_event_name != 'pull_request' }}
      shell: bash
      run: |
        # prepare_shop: Modify composer.json to allow the same feature-branch
        ${{ inputs.debug }}
        if [ -f '${{ inputs.composer_file }}' ]; then
          BASE_BRANCH_PATTERN='^b-[0-9]+\.[0-9]+\.x$'
          if [[ '${{ inputs.github_ref_name }}' =~ $BASE_BRANCH_PATTERN ]]; then
            echo -e "\033[0;35mNot modifying composer.json because ${{ inputs.github_ref_name }} is a base branch\033[0m"
          else
            echo -e "\033[0;35mAllow dev-${{ inputs.github_ref_name }} for oxid-esales requires\033[0m"
            sed -e 's#"oxid-esales/\(.*\)":[[:space:]]*"${{ inputs.composer_dev_ref }}"#"oxid-esales/\1": "dev-${{ inputs.github_ref_name }} || ${{ inputs.composer_dev_ref }}"#' \
                -i '${{ inputs.composer_file }}'
          fi
        fi
    # yamllint enable rule:line-length

    - name: Login to Docker Hub
      if: ${{ inputs.docker_login == 'true' }}
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.docker_user }}
        password: ${{ inputs.docker_token }}

    - name: Start containers
      shell: bash
      run: |
        # prepare_shop: Start containers
        ${{ inputs.debug }}
        make up
        docker compose ps --all

    - name: Output docker logs if make up failed
      if: failure()
      shell: bash
      run: |
        # prepare_shop: Output docker logs if make up failed
        echo -e "\033[0;31m### Starting docker failed\033[0m"
        echo -e "\033[0;35m###  docker-compose.yml ###\033[0m"
        cat docker-compose.yml
        echo -e "\033[0;35m###  docker compose logs ###\033[0m"
        docker compose logs --tail=all
        for c in $(docker ps -aq); do
          echo -e "\033[0;35m###  Logs for $c ###\033[0m"
          docker logs -n 200 $c
        done

    - name: Configure enterprise token
      if: ${{ inputs.enterprise_github_token != '' }}
      shell: bash
      run: |
        # prepare_shop: Configure enterprise token
        ${{ inputs.debug }}
        docker compose ${{ inputs.container_method }} -T \
          ${{ inputs.container_options }} \
          ${{ inputs.container_name}} \
          composer config -g github-oauth.github.com "${{ inputs.enterprise_github_token }}"

    - name: 'Modify composer.json'
      if: ${{ inputs.composer_transform != '' }}
      uses: 'OXID-eSales/github-actions/composer_merge@v4alpha'
      with:
        file: '${{ inputs.composer_file }}'
        backup: true
        transform: |
          ${{ inputs.composer_transform }}
        update: ${{ inputs.composer_update }}
        update_options: ${{ inputs.composer_update_options }}
        container_name: ${{ inputs.container_name }}
        container_options: ${{ inputs.container_options }}
        container_method: 'exec'
        debug: ${{ inputs.debug }}

    - name: Install dependencies
      shell: bash
      if: ${{ inputs.composer_transform == '' }}
      run: |
        # prepare_shop: Install dependencies
        ${{ inputs.debug }}
        docker compose ${{ inputs.container_method }} -T \
          ${{ inputs.container_options }} \
          ${{ inputs.container_name }} \
          composer update --no-interaction

    - name: Setup config inc file
      shell: bash
      run: |
        # prepare_shop: Setup config inc file
        ${{ inputs.debug }}
        cp source/source/config.inc.php.dist source/source/config.inc.php

    - name: Cache current installation
      uses: tespkg/actions-cache@v1
      with:
        path: |
          ./*
        key: ${{ inputs.cache_name }}
        endpoint: ${{ inputs.cache_endpoint }}
        accessKey: ${{ inputs.cache_access_key }}
        secretKey: ${{ inputs.cache_secret_key }}
        bucket: ${{ inputs.cache_bucket }}
