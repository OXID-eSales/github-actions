name: 'prepare_shop'
description: 'Prepares the shop and creates a cache for it'
inputs:
  git_sdk_url:
    description: 'URL for the docker-eshop sdk repo to clone'
    required: false
    default: 'https://github.com/OXID-eSales/docker-eshop-sdk.git'
  git_sdk_ref:
    description: 'Branch, tag or hash of the commit to check out'
    required: false
    default: 'master'
  git_shop_url:
    description: 'URL for the oxidshop_ce repository'
    required: false
    default: 'https://github.com/OXID-eSales/oxideshop_ce.git'
  git_shop_ref:
    description: 'Branch, tag or hash of the commit to check out'
    required: true
  git_enterprise_ref:
    description: 'Branch to check out for the enterprise repos'
    required: true
  github_event_name:
    description: 'Name of the github event (github.event_name), used to handle pull requests'
    required: false
    default: ${{ github.event_name }}
  github_event_number:
    description: 'Number of the github event (github.event_number), used to handle pull requests'
    required: false
    default: ${{ github.event_number }}
  github_base_ref:
    description: 'Base reference (github.base_ref) for testing the github pull request'
    required: false
    default: ${{ github.base_ref }}
  github_sha:
    required: false
    description: 'github.sha is used in generating the cache id'
    default: ${{ github.sha }}
  github_run_number:
    required: false
    description: 'github.run_number and github.run_attempts are used in generating the cache id (tbd)'
    default: ${{ github.run_number }}
  github_run_attempt:
    required: false
    description: 'github.run_number and github.run_attempts are used in generating the cache id (tbd)'
    default: ${{ github.run_attempt }}
  php:
    required: false
    description: 'Version of PHP for this instance'
    default: ${{ matrix.php }}
  mysql:
    required: false
    description: 'Version of MySQL for this instance'
    default: ${{ matrix.mysql }}
  is_enterprise:
    required: false
    description: 'This action can be used on the community edition (ce) and enterprise edition (ee) of the shop. On top of setting this to true, a few extra variables/secrets must be provided for using the action on ee.'
    default: false
  enterprise_github_token:
  required:
    description: 'OAuth token to access enterprise repos'
    default: ''
  cache_endpoint:
    description: 'secrets.CACHE_ENDPOINT for actions-cache'
    required: false
    default: ${{ secrets.CACHE_ENDPOINT }}
  cache_access_key:
    description: 'secrets.CACHE_ACCESS_KEY for actions-cache'
    required: false
    default: ${{ secrets.CACHE_ACCESS_KEY }}
  cache_secret_key:
    description: 'secrets.CACHE_SECRET_KEY  for actions-cache'
    required: false
    default: ${{ secrets.CACHE_SECRET_KEY }}
outputs:
  cached_name:
    description: 'Name of the cached shop setup'
runs:
  using: "composite"
  steps:
    - name: Cleanup
      uses: OXID-eSales/github-actions/cleanup_workspace@v1

    - name: Clone testing environment master
      run: git clone --depth 1 ${{ inputs.git_sdk_url }} --branch ${{ inputs.git_sdk_ref }} --single-branch .

    - name: Clone the shop  (${{ inputs.git_shop_ref }})
      if: inputs.github_event_name != 'pull_request'
      run: git clone --depth 1 ${{ inputs.git_shop_url }} --branch ${{ inputs.git_shop_ref }} --single-branch source

    - name: Clone the shop (PR ${{ inputs.github_event_number }})
      if: inputs. github_event_name == 'pull_request'
      run: |
        git clone --depth 1 https://github.com/OXID-eSales/oxideshop_ce.git --branch ${{ inputs.github_base_ref }} --single-branch source
        git -C source fetch origin refs/pull/${{ inputs.github_event_number }}/head:pr_${{ inputs.github_event_number }}
        git -C source checkout pr_${{ github_event_number }}

    # ToDo: Does it make sense to actually use php and mysql for naming this cached object? So far, PHP and MYSQL were not relevant
    # Recommendation: Use only ${{ inputs.github_sha }}
    # And why do we run composer update and setup config_inc after caching? I would have put this cache at the very end (same place as the caching for ee)
    - name: Cache current ce shop installation
      uses: actions/cache@v3
      with:
        path: |
          ./*
        key: preparedShop-${{ inputs.php }}-${{ inputs.mysql }}-${{ inputs.github_sha }}-${{ inputs.github_run_number }}-${{ inputs.github_run_attempt }}
        #key: preparedShop-${{ inputs.github_sha }}

    - name: Prepare container configuration
      run: |
        make setup
        make addbasicservices
        make file=services/selenium-chrome.yml addservice
        perl -pi\
            -e "s#PHP_VERSION=.*#PHP_VERSION='${{ inputs.php }}'#g;"\
            -e "s#MYSQL_VERSION=.*#MYSQL_VERSION='${{ inputs.mysql }}'#g;"\
            .env
        perl -pi\
            -e 's#display_errors =.*#display_errors = false#g;'\
            -e 'print "xdebug.max_nesting_level=1000\n\n";'\
            -e 'print "error_reporting = E_ALL & ~E_DEPRECATED & ~E_NOTICE & ~E_WARNING\n"'\
            containers/php/custom.ini
        perl -pi\
            -e 's#/var/www/#/var/www/source/#g;'\
            containers/httpd/project.conf

    - name: Start containers
      run: |
        make up
        sleep 2

    - name: Require PE, EE, Twig component, Admin theme, Apex
      if: inputs.is_enterprise == true
      run: |
        $EXEC_PHP composer config github-protocols https
        $EXEC_PHP composer config -g github-oauth.github.com ${{ inputs.enterprise_github_token }}
        $EXEC_PHP composer config repositories.oxid-esales/oxideshop-pe git https://github.com/OXID-eSales/oxideshop_pe.git
        $EXEC_PHP composer config repositories.oxid-esales/oxideshop-ee git https://github.com/OXID-eSales/oxideshop_ee.git
        $EXEC_PHP composer config repositories.oxid-esales/twig-component-pe git https://github.com/OXID-eSales/twig-component-pe.git
        $EXEC_PHP composer config repositories.oxid-esales/twig-component-ee git https://github.com/OXID-eSales/twig-component-ee.git
        $EXEC_PHP composer require oxid-esales/oxideshop-pe:${{ inputs.git_enterprise_ref }} --no-update
        $EXEC_PHP composer require oxid-esales/oxideshop-ee:${{ inputs.git_enterprise_ref }} --no-update
        $EXEC_PHP composer require oxid-esales/twig-component-ee:${{ inputs.git_enterprise_ref }} --no-update
        $EXEC_PHP composer require oxid-esales/twig-admin-theme:${{ inputs.git_enterprise_ref }} --no-update
        $EXEC_PHP composer require oxid-esales/apex-theme:${{ inputs.git_enterprise_ref }} --no-update
        $EXEC_PHP composer require oxid-esales/codeception-modules:${{ inputs.git_enterprise_ref }} --no-update
        $EXEC_PHP composer require oxid-esales/codeception-page-objects:${{ inputs.git_enterprise_ref }} --no-update

    - name: Install dependencies
      run: |
        $EXEC_PHP composer update --no-interaction

    - name: Setup config inc file
      run: $EXEC_PHP cp source/config.inc.php.dist source/config.inc.php

    - name: Cache current installation
      if: inputs.is_enterprise == true
      uses: tespkg/actions-cache@v1
      with:
        path: |
          ./*
        key: prepared-eshop-${{ inputs.git_enterprise_ref }}-matrix-full-${{ inputs.php }}-${{ inputs.mysql }}-${{ inputs.github_sha }}
        endpoint: ${{ inputs.cache_endpoint }}
        accessKey: ${{ inputs.cache_access_key }}
        secretKey: ${{ inputs.cache_secret_key }}
        bucket: oxideshop-ee

    - name: Stop containers
      if: always()
      run: |
        docker-compose down
        sleep 2

    - name: Cleanup Docker
      if: always()
      run: |
        c=$(docker ps -q) && [[ $c ]] && docker kill $c
        docker system prune --force

    - name: Set Output (ee)
      if: inputs.is_enterprise == true
      run: echo "::set-output name=cached_name::$(echo prepared-eshop-${{ inputs.git_enterprise_ref }}-matrix-full-${{ inputs.php }}-${{ inputs.mysql }}-${{ inputs.github_sha }})"

    - name: Set Output (ce)
      if: inputs.is_enterprise == false
      run: echo "::set-output name=cached_name::$(echo preparedShop-${{ inputs.php }}-${{ inputs.mysql }}-${{ inputs.github_sha }}-${{ inputs.github_run_number }}-${{ inputs.github_run_attempt }})"
      #run: echo "::set-output name=cached_name::$(echo preparedShop-${{ inputs.github_sha }})"