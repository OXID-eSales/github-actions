name: 'prepare_shop'
description: 'Prepares the shop and creates a cache for it'
inputs:
  git_sdk_url:
    type: string
    description: 'URL for the docker-eshop sdk repo to clone'
    required: false
    default: 'https://github.com/OXID-eSales/docker-eshop-sdk.git'
  git_sdk_ref:
    type: string
    description: 'Branch, tag or hash of the commit to check out'
    required: false
    default: 'master'
  git_shop_url:
    type: string
    description: 'URL for the oxidshop_ce repository'
    required: false
    default: 'https://github.com/OXID-eSales/oxideshop_ce.git'
  git_shop_ref:
    type: string
    description: 'Branch, tag or hash of the commit to check out'
    required: true
    default: ${{ github.ref_name }}
  git_enterprise_ref:
    type: string
    description: 'Branch to check out for the enterprise repos'
    required: false
  github_event_name:
    type: string
    description: 'Name of the github event (github.event_name), used to handle pull requests'
    required: false
    default: ${{ github.event_name }}
  github_event_number:
    type: string
    description: 'Number of the github event (github.event_number), used to handle pull requests'
    required: false
    default: '0'
  github_base_ref:
    type: string
    description: 'Base reference (github.base_ref) for testing the github pull request'
    required: false
    default: ${{ github.base_ref }}
  github_sha:
    type: string
    required: false
    description: 'github.sha is used in generating the cache id'
    default: ${{ github.sha }}
  github_run_number:
    type: string
    required: false
    description: 'github.run_number and github.run_attempts are used in generating the cache id (tbd)'
    default: '0'
  github_run_attempt:
    type: string
    required: false
    description: 'github.run_number and github.run_attempts are used in generating the cache id (tbd)'
    default: '0'
  php:
    type: string
    required: false
    description: 'Version of PHP for this instance'
    default: ${{ matrix.php }}
  mysql:
    type: string
    required: false
    description: 'Version of MySQL for this instance'
    default: ${{ matrix.mysql }}
  is_enterprise:
    type: boolean
    required: false
    description: 'This action can be used on the community edition (ce) and enterprise edition (ee) of the shop. On top of setting this to true, a few extra variables/secrets must be provided for using the action on ee.'
    default: false
  enterprise_github_token:
    type: string
    required: false
    description: 'OAuth token to access enterprise repos'
    default: ''
  cache_endpoint:
    type: string
    description: 'secrets.CACHE_ENDPOINT for actions-cache'
    required: false
    default: ''
  cache_access_key:
    type: string
    description: 'secrets.CACHE_ACCESS_KEY for actions-cache'
    required: false
    default: ''
  cache_secret_key:
    type: string
    description: 'secrets.CACHE_SECRET_KEY  for actions-cache'
    required: false
    default: ''
outputs:
  prepared_shop:
    description: 'Name of the cached shop setup'
    value: ${{ steps.output.prepared_shop }}
runs:
  using: "composite"
  steps:
    - name: Set cache name (ee)
      if: ${{ inputs.is_enterprise == 'true' }}
      shell: bash
      run: |
        CACHED_NAME="prepared-eshop-${{ inputs.git_enterprise_ref }}-matrix-full-${{ inputs.php }}-${{ inputs.mysql }}-${{ inputs.github_sha }}"
        echo "CACHED_NAME=$CACHED_NAME" | tee -a $GITHUB_ENV

    - name: Set cache name (ce)
      if: ${{ inputs.is_enterprise == 'false' }}
      shell: bash
      run: |
        CACHED_NAME="preparedShop-${{ inputs.php }}-${{ inputs.mysql }}-${{ inputs.github_sha }}-${{ inputs.github_run_number }}-${{ inputs.github_run_attempt }}"
        echo "CACHED_NAME=$CACHED_NAME" | tee -a $GITHUB_ENV

    - name: Add environment variables
      shell: bash
      run: |
        EXEC_PHP="docker-compose exec -T php"
        echo "EXEC_PHP=$EXEC_PHP" | tee -a $GITHUB_ENV

    - name: Clone testing environment master
      shell: bash
      run: git clone --depth 1 ${{ inputs.git_sdk_url }} --branch ${{ inputs.git_sdk_ref }} --single-branch .

    - name: Clone the shop  (${{ inputs.git_shop_ref }})
      if: inputs.github_event_name != 'pull_request'
      shell: bash
      run: git clone --depth 1 ${{ inputs.git_shop_url }} --branch ${{ inputs.git_shop_ref }} --single-branch source

    - name: Clone the shop (PR ${{ inputs.github_event_number }})
      if: inputs.github_event_name == 'pull_request'
      shell: bash
      run: |
        git clone --depth 1 ${{ inputs.git_shop_url }} --branch ${{ inputs.github_base_ref }} --single-branch source
        git -C source fetch origin refs/pull/${{ inputs.github_event_number }}/head:pr_${{ inputs.github_event_number }}
        git -C source checkout pr_${{ inputs.github_event_number }}

    # why do we run composer update and setup config_inc after caching? I would have put this cache at the very end (same place as the caching for ee)
    - name: Cache current shop installation (ce)
      if: ${{ inputs.is_enterprise == 'false' }}
      uses: actions/cache@v3
      with:
        path: |
          ./*
        key: ${{ env.CACHED_NAME }}

    - name: Prepare container configuration
      shell: bash
      run: |
        make setup
        make addbasicservices
        make file=services/selenium-chrome.yml addservice
        perl -pi\
            -e "s#PHP_VERSION=.*#PHP_VERSION='${{ inputs.php }}'#g;"\
            -e "s#MYSQL_VERSION=.*#MYSQL_VERSION='${{ inputs.mysql }}'#g;"\
            .env
        perl -pi\
            -e 's#display_errors =.*#display_errors = false#g;'\
            -e 'print "xdebug.max_nesting_level=1000\n\n";'\
            -e 'print "error_reporting = E_ALL & ~E_DEPRECATED & ~E_NOTICE & ~E_WARNING\n"'\
            containers/php/custom.ini
        perl -pi\
            -e 's#/var/www/#/var/www/source/#g;'\
            containers/httpd/project.conf
        
    - name: Start containers
      shell: bash
      run: |
        make up
        sleep 2

    - name: Output docker logs if make up failed
      if: failure()
      shell: bash
      run: |
        cat docker-compose.yml
        docker-compose logs --tail=200
        for c in $(docker ps -aq); do
          echo "*** Logs for $c ***"
          docker logs -n 200 $c
        done

    - name: Require PE, EE, Twig component, Admin theme, Apex
      if: inputs.is_enterprise == true
      shell: bash
      run: |
        $EXEC_PHP composer config github-protocols https
        $EXEC_PHP composer config -g github-oauth.github.com ${{ inputs.enterprise_github_token }}
        $EXEC_PHP composer config repositories.oxid-esales/oxideshop-pe git https://github.com/OXID-eSales/oxideshop_pe.git
        $EXEC_PHP composer config repositories.oxid-esales/oxideshop-ee git https://github.com/OXID-eSales/oxideshop_ee.git
        $EXEC_PHP composer config repositories.oxid-esales/twig-component-pe git https://github.com/OXID-eSales/twig-component-pe.git
        $EXEC_PHP composer config repositories.oxid-esales/twig-component-ee git https://github.com/OXID-eSales/twig-component-ee.git
        $EXEC_PHP composer require oxid-esales/oxideshop-pe:${{ inputs.git_enterprise_ref }} --no-update
        $EXEC_PHP composer require oxid-esales/oxideshop-ee:${{ inputs.git_enterprise_ref }} --no-update
        $EXEC_PHP composer require oxid-esales/twig-component-ee:${{ inputs.git_enterprise_ref }} --no-update
        $EXEC_PHP composer require oxid-esales/twig-admin-theme:${{ inputs.git_enterprise_ref }} --no-update
        $EXEC_PHP composer require oxid-esales/apex-theme:${{ inputs.git_enterprise_ref }} --no-update
        $EXEC_PHP composer require oxid-esales/codeception-modules:${{ inputs.git_enterprise_ref }} --no-update
        $EXEC_PHP composer require oxid-esales/codeception-page-objects:${{ inputs.git_enterprise_ref }} --no-update

    - name: Install dependencies
      shell: bash
      run: |
        $EXEC_PHP composer update --no-interaction

    - name: Setup config inc file
      shell: bash
      run: $EXEC_PHP cp source/config.inc.php.dist source/config.inc.php

    - name: Cache current installation
      if: ${{ inputs.is_enterprise == 'true' }}
      uses: tespkg/actions-cache@v1
      with:
        path: |
          ./*
        key: ${{ env.CACHED_NAME }}
        endpoint: ${{ inputs.cache_endpoint }}
        accessKey: ${{ inputs.cache_access_key }}
        secretKey: ${{ inputs.cache_secret_key }}
        bucket: oxideshop-ee

    - name: Stop containers
      if: always()
      shell: bash
      run: |
        docker-compose down
        sleep 2

    - name: Set Output
      id: output
      shell: bash
      run: echo "prepared_shop=$CACHED_NAME" >>$GITHUB_OUTPUT
