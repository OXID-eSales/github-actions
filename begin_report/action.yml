name: 'begin_report'
description: 'Creates the initial markdown headers for the reports'
inputs:
  repository:
    type: string
    required: true
    description: 'URL of the github repository'
  job:
    type: string
    required: false
    description: 'URL of the job'
    default: '-'
  testplan:
    type: string
    required: false
    description: 'URL/file name of the test plan'
    default: '-'
  title:
    type: string
    required: false
    description: 'Title of the job'
    default: 'default'
  files:
    type: string
    required: false
    description: 'Additional files to archive'
    default: |
      generated_testplan.yaml
      generated_output.txt
      generated_env.txt
      load_testplan.log
  debug:
    type: boolean
    description: 'Enable debugging'
    default: false
    required: false
outputs:
  debug:
    description: 'Debug scriptlet'
    value: ${{ steps.debug.outputs.debug }}
runs:
  using: "composite"
  steps:
    - name: 'Write Report header'
      shell: bash
      run: |
        # begin_report: Write Report header
        mkdir -p reports slack_reports
        cat >reports/000-header.md <<EOF
        # ${{inputs.title}}
        EOF
        cat >slack_reports/000-header.md <<EOF
        Repository: ${{ inputs.repository }}
        Job: ${{ inputs.job }}
        Testplan: ${{ inputs.TESTPLAN }}

        EOF

    - name: Start debug script
      if: ${{ inputs.debug == 'true' }}
      id: debug
      shell: bash
      run: |
        # begin_report: Start debug script
        mkdir -p debug
        cat >debug/000-start.sh <<EODS
        #!/bin/bash
        set -e
        set -x

        function banner() {
          PURPLE=\$(echo -e "\\033[0;35m")
          NOCOLOR=\$(echo -e "\\033[0m")
          cat <<EOF
        \${PURPLE}###############################################################################
        ### \$1
        ###############################################################################\${NOCOLOR}
        EOF
        }

        banner "Setting up environment"
        if [ -d workdir ]; then
          rm -rf workdir
        fi
        mkdir workdir
        cd workdir
        # Mocking those
        export GITHUB_ENV="${PWD}/GITHUB_ENV.txt"
        export GITHUB_OUTPUT="${PWD}/GITHUB_OUTPUT.txt"
        touch "${GITHUB_ENV}" "${GITHUB_OUTPUT}"

        banner "Debugging workflow ${{ inputs.title }}"
        echo "Reporitory: ${{ inputs.repository }}"
        echo "Job: ${{ inputs.job }}"
        echo "Testplan: ${{ inputs.testplan }}"
        echo "Working directory: ${PWD}"
        EODS

        # Create debugging scriptlet
        cat >>"${GITHUB_OUTPUT}" <<'EODS'
        debug<<debug_delimeter
        ###BEGIN_DEBUG
        if [ -n '${{ inputs.debug }}' ]; then
          mkdir -p debug
          FIRSTLINE=$(head -1 "$0")
          echo "banner '${FIRSTLINE}'" >>debug/debug.sh
          sed -e 's|exit 1|#exit 1|' \
              -e '/###BEGIN_DEBUG/,/###END_DEBUG/d' \
              "$0" >>debug/debug.sh
        fi
        ###END_DEBUG
        debug_delimeter
        EODS

    - name: Debug debug
      shell: bash
      run: |
        # begin_report: Debug debug
        echo '${{ steps.debug.outputs.debug }}'

    - name: Upload Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: testplan-000_header
        path: |
          reports/000-header.md
          slack_reports/000-header.md
          debug/000-start.sh
          ${{ inputs.files }}
        if-no-files-found: ignore
        retention-days: 2
