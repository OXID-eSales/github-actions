name: 'install_shop'
description: 'Fetches the prepared shop from cache and installs it'
inputs:
  container_name:
    type: string
    required: false
    description: 'Name of the container to run the test in'
    default: 'php'
  container_options:
    type: string
    required: false
    description: 'Additional options to pass into the container'
    default: ''
  container_method:
    type: string
    required: false
    description: 'Method to execute the commands inside a container, either "run" or "exec"'
    default: 'exec'
  git_enterprise_ref:
    type: string
    required: false
    description: 'Branch to check out for the enterprise repos'
    default: ''
  git_shop_ref:
    type: string
    required: false
    description: 'Branch, tag or hash of the commit to check out'
    default: ''
  github_sha:
    type: string
    required: true
    description: 'github.sha is used in generating the cache id'
  github_run_number:
    type: string
    required: false
    description: 'github.run_number and github.run_attempts are used in generating the cache id (tbd)'
    default: '0'
  github_run_attempt:
    type: string
    required: false
    description: 'github.run_number and github.run_attempts are used in generating the cache id (tbd)'
    default: '0'
  php:
    type: string
    required: false
    description: 'Version of PHP for this instance'
    default: '8.2'
  mysql:
    type: string
    required: false
    description: 'Version of MySQL for this instance'
    default: '8.0'
  is_enterprise:
    type: boolean
    required: false
    default: false
  config_idebug:
    type: boolean
    required: false
    default: false
  output_files:
    type: string
    required: false
    description: 'Configuration files for the shop setup'
    default: |
      docker-compose.yml
      source/composer.json
      source/composer.lock
      source/source/config.inc.php
  output_artifact:
    type: string
    required: false
    description: 'Github run artifact for the config output'
    default: 'configs_install_shop'
  cache_name:
    type: string
    required: true
    description: 'Name of the shop to cache'
  cache_bucket:
    type: string
    required: false
    description: 'Name of the local s3 cache bucket'
    default: 'oxideshop-ee'
  cache_endpoint:
    type: string
    required: false
    description: 'secrets.CACHE_ENDPOINT for actions-cache'
    default: ''
  cache_access_key:
    type: string
    required: false
    description: 'secrets.CACHE_ACCESS_KEY for actions-cache'
    default: ''
  cache_secret_key:
    type: string
    required: false
    description: 'secrets.CACHE_SECRET_KEY  for actions-cache'
    default: ''
outputs:
  installed_shop:
    description: 'Name of the cached shop installation'
    value: ${{ steps.init.outputs.installed_shop }}
runs:
  using: "composite"
  steps:
    - name: Locate Console
      shell: bash
      run: |
        # install_shop: Locate Console
        cd source
        OE_CONSOLE=$(find . -iname "oe-console" -type f|head -1|sed -e "s|^$(pwd)/||")
        echo "OE_CONSOLE=${OE_CONSOLE}"|tee -a "${GITHUB_ENV}"

    - name: Run Install Shop
      shell: bash
      run: |
        # install_shop: Run Install Shop
        docker-compose ${{ inputs.container_method }} -T \
          ${{ inputs.container_options }} \
          ${{ inputs.container_name }} \
          ${{ env.OE_CONSOLE }} oe:setup:shop \
          --db-host mysql \
          --db-port 3306 \
          --db-name example \
          --db-user root \
          --db-password root \
          --shop-url http://localhost.local \
          --shop-directory /var/www/source \
          --compile-directory /var/www/source/tmp

    - name: Activate iDebug
      if: ${{ inputs.config_idebug == 'true' }}
      shell: bash
      run: |
        # install_shop: Activate iDebug
        perl -pi -e 's#iDebug = 0;#iDebug = -1;#g;' source/source/config.inc.php

    - name: Activate shop's theme
      if: ${{ inputs.is_enterprise == 'true' }}
      shell: bash
      run: |
        # install_shop: Activate shop's theme
        docker-compose ${{ inputs.container_method }} -T \
          ${{ inputs.container_options }} \
          ${{ inputs.container_name }} \
          bin/oe-console oe:theme:activate apex

    - name: Upload configuration artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.output_artifact }}
        path: ${{ inputs.output_files }}

    - name: Cache current installation
      uses: tespkg/actions-cache@v1
      with:
        path: |
          ./*
        key: ${{ inputs.cache_name }}
        endpoint: ${{ inputs.cache_endpoint }}
        accessKey: ${{ inputs.cache_access_key }}
        secretKey: ${{ inputs.cache_secret_key }}
        bucket: ${{ inputs.cache_bucket }}
